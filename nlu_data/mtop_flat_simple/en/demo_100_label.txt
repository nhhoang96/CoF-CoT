I want to listen to Justin Bieber's latest album	[IN:PLAY_MUSIC [SL:MUSIC_ARTIST_NAME Justin Bieber ] [SL:MUSIC_TYPE album ] ]	[IN:PLAY_MUSIC [SL:MUSIC_ARTIST_NAME Justin Bieber ] [SL:MUSIC_TYPE album ] ]	music	en_XX	'(w / want-01 \n   :ARG0 (i / i) \n   :ARG1 \n     (l / listen \n         :ARG0 i \n         :ARG1 \n           (a2 / album \n               :mod \n                 (l2 / latest)\n                 :poss \n                 (b / bieber \n                     :name (n / name :op "Justin")))))'
resume the baking timer	[IN:RESUME_TIMER [SL:METHOD_TIMER timer ] ]	[IN:RESUME_TIMER [SL:METHOD_TIMER timer ] ]	timer	en_XX	'(resume :action (timer :baking))'
how many calories are in tomato sauce	[IN:GET_INFO_RECIPES [SL:RECIPES_ATTRIBUTE how many ] [SL:RECIPES_UNIT_NUTRITION calories ] [SL:RECIPES_DISH tomato sauce ] ]	[IN:GET_INFO_RECIPES [SL:RECIPES_ATTRIBUTE how many ] [SL:RECIPES_UNIT_NUTRITION calories ] [SL:RECIPES_DISH tomato sauce ] ]	recipes	en_XX	'(c / calories  \n      :mod (i / in  \n            :prep-in (s / sauce  \n                      :mod (t / tomato))))'
Set the timer for 30 min. I do not want to leave the hair color in for too long	[IN:CREATE_TIMER [SL:METHOD_TIMER timer ] [SL:DATE_TIME for 30 min ] ]	[IN:CREATE_TIMER [SL:METHOD_TIMER timer ] [SL:DATE_TIME for 30 min ] ]	timer	en_XX	'(set \n  :ARG0 (timer \n           :ARG1 (minute \n                    :value 30)))\n(do \n  :ARG0 (leave \n           :ARG1 (color \n                    :mod (hair))) \n  :ARG1 (want \n           :polarity -))'
find me art majors from Stanford	[IN:GET_CONTACT [SL:MAJOR art ] [SL:SCHOOL Stanford ] ]	[IN:GET_CONTACT [SL:MAJOR art ] [SL:SCHOOL Stanford ] ]	people	en_XX	'(c / find \n      :arg1 (p / person \n               :degree (d / degree :name "art") \n               :institution (u / university :name "Stanford")))'
Yesterday was awfully hot and I would like to know what the yesterday's temperature was	[IN:GET_WEATHER [SL:DATE_TIME Yesterday ] [SL:WEATHER_ATTRIBUTE hot ] [SL:DATE_TIME yesterday ] ]	[IN:GET_WEATHER [SL:DATE_TIME Yesterday ] [SL:WEATHER_ATTRIBUTE hot ] [SL:DATE_TIME yesterday ] ]	weather	en_XX	'(ignore indentation)\n\n(w / want-01\t\n      :ARG0 (i / I)\n      :ARG1 (k / know-01\t\n            :ARG0 (l / like-01\t\n                  :ARG0 i\n                  :ARG1 (t / temperature\n                        :time (y / yesterday)))\n            :ARG1 (w2 / be-hot-01\t\n                  :polarity -\t\n                  :time (y2 / yesterday)\n                  :degree (a / awfully))))\n\nNotes:\n- The main predicate is "want-01" with the subject "I" as :ARG0 and the content inside the main clause as :ARG1.\n- The content inside the main clause starts with "know-01" with the nested clause "like-01" as :ARG0 and the temperature object as :ARG1.\n- The clause "like-01" has "I" as :ARG0 and a nested clause "be-hot-01" as :ARG1. \n- Finally, "be-hot-01" has yesterday as :time and awfully as :degree with a negative polarity (-) indicating that it was unpleasantly hot.'
please dial Ryann Small right away	[IN:CREATE_CALL [SL:CONTACT Ryann Small ] ]	[IN:CREATE_CALL [SL:CONTACT Ryann Small ] ]	calling	en_XX	'(d / dial \n      :agent (y / you)\n      :name (n / name\n               :op1 (s / person\n                        :name "Ryann Small")))'
Subtract 30 minutes from my timer	[IN:SUBTRACT_TIME_TIMER [SL:DATE_TIME 30 minutes ] [SL:METHOD_TIMER timer ] ]	[IN:SUBTRACT_TIME_TIMER [SL:DATE_TIME 30 minutes ] [SL:METHOD_TIMER timer ] ]	timer	en_XX	'(c / subtract-01\n      :ARG1 (m / minute\n            :quant 30)\n      :ARG2 (t / timer\n            :poss (m2 / my)))'
What kind of event is Oktoberfest?	[IN:GET_CATEGORY_EVENT [SL:TITLE_EVENT Oktoberfest ] ]	[IN:GET_CATEGORY_EVENT [SL:TITLE_EVENT Oktoberfest ] ]	event	en_XX	'(p / kind-of-event-01 \n      :ARG1 (o / Oktoberfest))'
respond interested to Open Stage NYC	[IN:SET_RSVP_INTERESTED [SL:TITLE_EVENT Open Stage NYC ] ]	[IN:SET_RSVP_INTERESTED [SL:TITLE_EVENT Open Stage NYC ] ]	event	en_XX	'(c / respond-01 :ARG0 (i / interested) :ARG1 (o / Open_Stage_NYC))'
What's the address of Mike's current employer?	[IN:GET_LOCATION [SL:CONTACT Mike ] ]	[IN:GET_LOCATION [SL:CONTACT Mike ] ]	people	en_XX	'(c / ask-01 \n     :ARG0 (u / you) \n     :ARG1 (a / address \n             :mod (p / poss \n                     :poss (e / employ \n                             :ARG1-of (c2 / current) \n                             :ARG0 (m / mike))) \n             :mod (c3 / current) \n             :ARG0-of (e2 / employer)))'
Seek all available	[IN:GET_AVAILABILITY ]	[IN:GET_AVAILABILITY ]	calling	en_XX	'(c / seek-01\n     :ARG0 (x)\n     :ARG1 (a / all\n             :ARG0 (a2 / available)))'
any new news of donald trump	[IN:GET_STORIES_NEWS [SL:NEWS_REFERENCE new ] [SL:NEWS_TYPE news ] [SL:NEWS_TOPIC donald trump ] ]	[IN:GET_STORIES_NEWS [SL:NEWS_REFERENCE new ] [SL:NEWS_TYPE news ] [SL:NEWS_TOPIC donald trump ] ]	news	en_XX	'(c / communicate \n      :subject (a / anyone)\n      :object (n / news \n                  :polarity - \n                  :domain (n2 / news-entity \n                                :name (n3 / name :op1 "donald_trump"))))'
Remove my reminder for dinner on Wednesday.	[IN:DELETE_REMINDER [SL:PERSON_REMINDED my ] [SL:TODO dinner ] [SL:DATE_TIME on Wednesday ] ]	[IN:DELETE_REMINDER [SL:PERSON_REMINDED my ] [SL:TODO dinner ] [SL:DATE_TIME on Wednesday ] ]	reminder	en_XX	'(c / command\n    :subject (p / person :poss my)\n    :object (r / reminder\n               :event (e / event\n                          :time (d / day :weekday wednesday)\n                          :reason-for (h / have-reminder\n                                         :reminder r\n                                         :event e\n                                         :time d)))\n    :action remove)'
Remove work reminders.	[IN:DELETE_REMINDER [SL:TODO work ] ]	[IN:DELETE_REMINDER [SL:TODO work ] ]	reminder	en_XX	'(remove\n  :ARG0 (reminders\n           :ARG0 work))'
How do you mix a martini	[IN:GET_INFO_RECIPES [SL:RECIPES_DISH martini ] ]	[IN:GET_INFO_RECIPES [SL:RECIPES_DISH martini ] ]	recipes	en_XX	'(c / can-01\n      :modal "do"\n      :subject (y / you)\n      :complement (m / mix-01\n                      :object (m2 / martini)))'
what temperature is lamb cooked	[IN:GET_INFO_RECIPES [SL:RECIPES_ATTRIBUTE temperature ] [SL:RECIPES_INCLUDED_INGREDIENT lamb ] ]	[IN:GET_INFO_RECIPES [SL:RECIPES_ATTRIBUTE temperature ] [SL:RECIPES_INCLUDED_INGREDIENT lamb ] ]	recipes	en_XX	'(c / cook\n    :ARG1 (l / lamb)\n    :ARG2 (t / temperature))'
Could you connect me to Magic: The Gathering on Slack please	[IN:CREATE_CALL [SL:GROUP Magic : The Gathering ] [SL:NAME_APP Slack ] ]	[IN:CREATE_CALL [SL:GROUP Magic : The Gathering ] [SL:NAME_APP Slack ] ]	calling	en_XX	'(c / connect \n      :arg0 (s / someone \n                 :mod (p / polite))) \n      :arg1 (m / magic-the-gathering \n                 :wiki "Magic:_The_Gathering"\n                 :domain (s2 / slack)))'
Shuffle the channels.	[IN:START_SHUFFLE_MUSIC [SL:MUSIC_TYPE channels ] ]	[IN:START_SHUFFLE_MUSIC [SL:MUSIC_TYPE channels ] ]	music	en_XX	'(c / shuffle \n    :ARG0 (i / it)\n    :ARG1 (c2 / channel))'
what is the weather locally	[IN:GET_WEATHER [SL:LOCATION locally ] ]	[IN:GET_WEATHER [SL:LOCATION locally ] ]	weather	en_XX	'(c / condition-entity\n      :condition (w / weather\n                    :polarity - \n                    :location (l / local-entity)))'
Get my video messages from Julia Walters and Sparks	[IN:GET_MESSAGE [SL:TYPE_CONTENT video ] [SL:RECIPIENT Julia Walters ] [SL:RECIPIENT Sparks ] ]	[IN:GET_MESSAGE [SL:TYPE_CONTENT video ] [SL:RECIPIENT Julia Walters ] [SL:RECIPIENT Sparks ] ]	messaging	en_XX	'(get\n  :ARG0 (my)\n  :ARG1 \n     (and\n       :op1 (video-message\n              :ARG1 (person \n                       :name (Julia Walters)))\n       :op2 (video-message\n              :ARG1 (person \n                      :name (Sparks))))).'
play me some country	[IN:PLAY_MUSIC [SL:MUSIC_GENRE country ] ]	[IN:PLAY_MUSIC [SL:MUSIC_GENRE country ] ]	music	en_XX	'(c / play\n      :ARG0 (i / me)\n      :ARG1 (s / some\n              :mod (c2 / country)))'
The name of my friend that works at Starbucks	[IN:GET_CONTACT [SL:CONTACT_RELATED my ] [SL:TYPE_RELATION friend ] [SL:EMPLOYER Starbucks ] ]	[IN:GET_CONTACT [SL:CONTACT_RELATED my ] [SL:TYPE_RELATION friend ] [SL:EMPLOYER Starbucks ] ]	people	en_XX	'(name \n    :poss my \n    :op1 (friend \n            :ARG0 (works \n                    :ARG1 (at \n                            :place (Starbucks)))))'
can you tell me the most recent news stories	[IN:GET_STORIES_NEWS [SL:DATE_TIME the most recent ] [SL:NEWS_TYPE news stories ] ]	[IN:GET_STORIES_NEWS [SL:DATE_TIME the most recent ] [SL:NEWS_TYPE news stories ] ]	news	en_XX	'(c / can-01\n      :ARG0 (y / you)\n      :ARG1 (t / tell-01\n                  :ARG0 y\n                  :ARG1 (n / news-story\n                               :mod (r / recent)\n                               :mod (m / most))))'
Set me an alarm at 4PM to call my mum.	[IN:CREATE_ALARM [SL:DATE_TIME at 4 PM ] [SL:ALARM_NAME call my mum ] ]	[IN:CREATE_ALARM [SL:DATE_TIME at 4 PM ] [SL:ALARM_NAME call my mum ] ]	alarm	en_XX	'(set :me (alarm :time "4PM" :action (call :subject (:mum))))'
at what temperature do you cook baked chicken at	[IN:GET_INFO_RECIPES [SL:RECIPES_ATTRIBUTE temperature ] [SL:RECIPES_DISH baked chicken ] ]	[IN:GET_INFO_RECIPES [SL:RECIPES_ATTRIBUTE temperature ] [SL:RECIPES_DISH baked chicken ] ]	recipes	en_XX	'(c / cook \n     :ARG0 (y / you)\n     :ARG1 (b / bake\n              :ARG1 (c2 / chicken)\n              :mod (a / at-temperature\n                      :quant what)))'
Friends of Adelaide's	[IN:GET_CONTACT [SL:TYPE_RELATION Friends ] [SL:CONTACT_RELATED Adelaide ] ]	[IN:GET_CONTACT [SL:TYPE_RELATION Friends ] [SL:CONTACT_RELATED Adelaide ] ]	people	en_XX	'(node /friend-of\n      :arg1 (node /friends\n                 :poss (node /Adelaide\n                           :name "Adelaide")))'
How many calories are in a full pizza pie?	[IN:GET_INFO_RECIPES [SL:RECIPES_ATTRIBUTE How many ] [SL:RECIPES_UNIT_NUTRITION calories ] [SL:RECIPES_DISH pizza pie ] ]	[IN:GET_INFO_RECIPES [SL:RECIPES_ATTRIBUTE How many ] [SL:RECIPES_UNIT_NUTRITION calories ] [SL:RECIPES_DISH pizza pie ] ]	recipes	en_XX	'(define\n  (q / question\n     :ARG0 (c / calorie\n             :quant 1\n             :mod (f / full)\n             :unit (p / pizza-01)))\n     :polarity -\n     :qword "how-many"))\n     \nNote: This is just one possible AMR graph representation and there can be other valid interpretations as well.'
remind me to go left at the light	[IN:CREATE_REMINDER [SL:PERSON_REMINDED me ] [SL:TODO go left at the light ] ]	[IN:CREATE_REMINDER [SL:PERSON_REMINDED me ] [SL:TODO go left at the light ] ]	reminder	en_XX	'(p / remind-01\n     :ARG1 (h / myself)\n     :ARG2 (g / go-02\n               :ARG1 h\n               :mod (l / left)\n               :ARG2 (l2 / light)))'
whatsapp video call Lucy Hoffman	[IN:CREATE_CALL [SL:NAME_APP whatsapp ] [SL:CONTACT Lucy Hoffman ] ]	[IN:CREATE_CALL [SL:NAME_APP whatsapp ] [SL:CONTACT Lucy Hoffman ] ]	calling	en_XX	'(c / call \n     :call-from (w / whatsapp)\n     :call-to (n / name\n                  :op1 "Lucy"\n                  :op2 "Hoffman")\n     :call-type (v / video))'
Concerts this weekend	[IN:GET_EVENT [SL:CATEGORY_EVENT Concerts ] [SL:DATE_TIME this weekend ] ]	[IN:GET_EVENT [SL:CATEGORY_EVENT Concerts ] [SL:DATE_TIME this weekend ] ]	event	en_XX	'(c / concert-event \n   :time (w / weekend))'
Is Nick Foles married?	[IN:GET_LIFE_EVENT [SL:CONTACT Nick Foles ] [SL:LIFE_EVENT married ] ]	[IN:GET_LIFE_EVENT [SL:CONTACT Nick Foles ] [SL:LIFE_EVENT married ] ]	people	en_XX	'(c / marry-01 :ARG0 (p / person :name "Nick Foles"))'
Give me CNN headlines	[IN:GET_STORIES_NEWS [SL:NEWS_SOURCE CNN ] [SL:NEWS_TYPE headlines ] ]	[IN:GET_STORIES_NEWS [SL:NEWS_SOURCE CNN ] [SL:NEWS_TYPE headlines ] ]	news	en_XX	'(p / provide-01 \n      :arg0 (y / you) \n      :arg1 (h / headline \n                  :mod (c / company-entity :op1 "CNN")))'
all James friends	[IN:GET_CONTACT [SL:CONTACT_RELATED James ] [SL:TYPE_RELATION friends ] ]	[IN:GET_CONTACT [SL:CONTACT_RELATED James ] [SL:TYPE_RELATION friends ] ]	people	en_XX	'(c / group\n      :quant (a / all)\n      :mod (f / friend\n            :name (n / name\n                  :op "James")))'
set my timer for a 35 minute baking time	[IN:CREATE_TIMER [SL:METHOD_TIMER timer ] [SL:DATE_TIME 35 minute ] ]	[IN:CREATE_TIMER [SL:METHOD_TIMER timer ] [SL:DATE_TIME 35 minute ] ]	timer	en_XX	'(c / set-01\n      :ARG0 (u / you)\n      :ARG1 (t / timer\n            :mod (m / my))\n      :ARG2 (t2 / time\n            :unit "minute"\n            :quant 35\n            :mod (b / bake-01)))'
Change to video call	[IN:UPDATE_METHOD_CALL ]	[IN:UPDATE_METHOD_CALL ]	calling	en_XX	'(c / change-01 \n      :ARG1 (p / person :name "speaker") \n      :ARG2 (v / video-call))'
create a conference call reminder to all my subornants.	[IN:CREATE_REMINDER [SL:TODO conference call ] [SL:PERSON_REMINDED all my subornants ] ]	[IN:CREATE_REMINDER [SL:TODO [IN:CREATE_CALL ] ] [SL:PERSON_REMINDED all my subornants ] ]	reminder	en_XX	'(c / create\n    :ARG1 (r / reminder\n              :ARG1 (c2 / call\n                        :ARG1 (co / conference)\n                        :ARG2 (p / person :quant 1 :ARG1-of (m / my)))\n              :ARG2 (s / subordinates \n                        :ARG1-of (m2 / member-of)))\n    )'
Please give me the local news.	[IN:GET_STORIES_NEWS [SL:NEWS_CATEGORY local ] [SL:NEWS_TYPE news ] ]	[IN:GET_STORIES_NEWS [SL:NEWS_CATEGORY local ] [SL:NEWS_TYPE news ] ]	news	en_XX	'(d / give-01\n      :ARG0 (p / please)\n      :ARG1 (n / news\n            :mod (l / local))\n      :ARG2 (m / me))'
Turn on all alarms	[IN:CREATE_ALARM [SL:AMOUNT all ] ]	[IN:CREATE_ALARM [SL:AMOUNT all ] ]	alarm	en_XX	'(t / turn-01\n      :ARG0 (y / you)\n      :ARG1 (a / alarm\n              :ARG0-of (o / on)))'
What is the recipe for Pico de Gallo	[IN:GET_RECIPES [SL:RECIPES_DISH Pico de Gallo ] ]	[IN:GET_RECIPES [SL:RECIPES_DISH Pico de Gallo ] ]	recipes	en_XX	'(c / recipe\n      :name "Pico de Gallo"\n      :query (q / question\n                  :op "What")\n      )'
How much longer do I have	[IN:GET_TIMER ]	[IN:GET_TIMER ]	timer	en_XX	'(c / continue-01\n   :ARG0 (i / i)\n   :ARG1 (h / have-03\n             :ARG0 i\n             :ARG1 (l / long-adv\n                       :degree (m / much))))\n   :time (f / future))'
Delete my reminder to send a gift to Brent, it's already done	[IN:DELETE_REMINDER [SL:PERSON_REMINDED my ] [SL:TODO send a gift to Brent ] ]	[IN:DELETE_REMINDER [SL:PERSON_REMINDED my ] [SL:TODO send a gift to Brent ] ]	reminder	en_XX	'(c / delete \n      :ARG0 (i / I)\n      :ARG1 (r / reminder \n               :ARG0 i\n               :ARG1 (s / send \n                         :ARG0 i \n                         :ARG1 (g / gift \n                                   :ARG0 (p / person :named "Brent"))))\n      :ARG2 (d / done))'
delete all rap songs.	[IN:REMOVE_FROM_PLAYLIST_MUSIC [SL:MUSIC_GENRE rap ] [SL:MUSIC_TYPE songs ] ]	[IN:REMOVE_FROM_PLAYLIST_MUSIC [SL:MUSIC_GENRE rap ] [SL:MUSIC_TYPE songs ] ]	music	en_XX	'(deleted :mod (songs :mod rap))'
Could you please give weather information for Italy	[IN:GET_WEATHER [SL:LOCATION Italy ] ]	[IN:GET_WEATHER [SL:LOCATION Italy ] ]	weather	en_XX	'(could :operator (give :ARG2 (weather-information :ARG1 Italy)))'
Start timer again.	[IN:RESTART_TIMER [SL:METHOD_TIMER timer ] ]	[IN:RESTART_TIMER [SL:METHOD_TIMER timer ] ]	timer	en_XX	'(c1 / continue-01\n     :ARG0 (t / timer)\n     :time (a / again))'
hang up to end the call	[IN:END_CALL ]	[IN:END_CALL ]	calling	en_XX	'(h / hang-up-01\n      :ARG0 (e / end-01\n               :ARG1 (c / call-01)))'
Set a reminder to call my dad at 5:00 to ask about his doctor's appointment.	[IN:CREATE_REMINDER [SL:TODO call my dad at 5 : 00 to ask about his doctor 's appointment ] ]	[IN:CREATE_REMINDER [SL:TODO [IN:GET_TODO [SL:TODO [IN:CREATE_CALL [SL:CONTACT [IN:GET_CONTACT [SL:CONTACT_RELATED my ] [SL:TYPE_RELATION dad ] ] ] ] ] [SL:DATE_TIME at 5 : 00 ] [SL:TODO ask about his doctor 's appointment ] ] ] ]	reminder	en_XX	'(set-01\n     :ARG0 (reminder-02\n               :ARG0 (I-03)\n               :ARG1 (call-04\n                         :ARG0 I-03\n                         :ARG1 (dad-05\n                                   :poss I-03))\n               :time (clock_time :quant 5 :unit "hour"))\n     :ARG1 (ask-06\n               :ARG0 I-03\n               :ARG1 (appointment-07\n                         :ARG0 (doctor-08\n                                   :poss I-03))))'
When did Sam get his diploma?	[IN:GET_EDUCATION_TIME [SL:CONTACT Sam ] [SL:EDUCATION_DEGREE diploma ] ]	[IN:GET_EDUCATION_TIME [SL:CONTACT Sam ] [SL:EDUCATION_DEGREE diploma ] ]	people	en_XX	'(s / when-event\n      :time (d / during\n             :op1 (s2 / get-01\n                    :arg0 (p / person :name "Sam")\n                    :arg1 (d2 / diploma)))\n      :op2 (now / date-entity))'
Set an Early bird alarm for tomorrow morning at six.	[IN:CREATE_ALARM [SL:ALARM_NAME Early bird ] [SL:DATE_TIME for tomorrow morning at six ] ]	[IN:CREATE_ALARM [SL:ALARM_NAME Early bird ] [SL:DATE_TIME for tomorrow morning at six ] ]	alarm	en_XX	'(set-01\n    :ARG0 (alarm-02 :mod early-01 :time (time :op1 "tomorrow morning" :mod (for-04 :mod six-05))))'
Do any of my friends attend Eastern?	[IN:GET_CONTACT [SL:CONTACT_RELATED my ] [SL:TYPE_RELATION friends ] [SL:SCHOOL Eastern ] ]	[IN:GET_CONTACT [SL:CONTACT_RELATED my ] [SL:TYPE_RELATION friends ] [SL:SCHOOL Eastern ] ]	people	en_XX	'(S / skill-ask\n      :subject (I / me)\n      :object (A / any\n                  :op1 (F / friend\n                            :poss (I / me))\n                  :op2 (E / Eastern)))'
leave current call and switch to new call	[IN:SWITCH_CALL ]	[IN:SWITCH_CALL ]	calling	en_XX	'(c / switch\n      :ARG0 (p / person :quant 1)\n      :ARG1 (c2 / call :purpose (l / leave\n                                          :ARG0 p)\n                           :topic (c3 / call\n                                           :topic-of c2)))'
Any news on the marijuana legalization in Sonoma County	[IN:GET_STORIES_NEWS [SL:NEWS_TYPE news ] [SL:NEWS_TOPIC marijuana legalization in Sonoma County ] ]	[IN:GET_STORIES_NEWS [SL:NEWS_TYPE news ] [SL:NEWS_TOPIC marijuana legalization in Sonoma County ] ]	news	en_XX	'(c / county\n      :wiki "Sonoma_County"\n      :name (n / name\n              :op1 "Sonoma"\n              :op2 "County"))\n      :topic (m / marijuana-legalization\n              :mod (s / some)))\n              :possessive (a / any)\n              :domain c)'
Set alarm every minutes for 15 minutes	[IN:CREATE_ALARM [SL:PERIOD every minutes ] [SL:DATE_TIME for 15 minutes ] ]	[IN:CREATE_ALARM [SL:PERIOD every minutes ] [SL:DATE_TIME for 15 minutes ] ]	alarm	en_XX	'(min_freq :minute\n            :unit "minutes"\n            :for 15\n            :every (set :alarm))'
Tell Jimmy the puppet show will be tonight at the local elementary school.	[IN:SEND_MESSAGE [SL:RECIPIENT Jimmy ] [SL:CONTENT_EXACT the puppet show will be tonight at the local elementary school ] ]	[IN:SEND_MESSAGE [SL:RECIPIENT Jimmy ] [SL:CONTENT_EXACT the puppet show will be tonight at the local elementary school ] ]	messaging	en_XX	'(t / tell \n      :arg0 (p / person :name "Jimmy") \n      :arg1 (s / schedule-event \n                 :event (s2 / show :mod (p2 / puppet)) \n                 :time (t2 / tonight) \n                 :location (l / location :name (n / name :op1 "local" :op2 "elementary school"))))'
Give me the local news for New York.	[IN:GET_STORIES_NEWS [SL:NEWS_CATEGORY local ] [SL:NEWS_TYPE news ] [SL:NEWS_TOPIC New York ] ]	[IN:GET_STORIES_NEWS [SL:NEWS_CATEGORY local ] [SL:NEWS_TYPE news ] [SL:NEWS_TOPIC New York ] ]	news	en_XX	'(give :recipient (me) :theme (news :type local :location (city :name "New York")))'
Delete the reminder to make plan reservations for Christmas.	[IN:DELETE_REMINDER [SL:TODO make plan reservations for Christmas ] ]	[IN:DELETE_REMINDER [SL:TODO make plan reservations for Christmas ] ]	reminder	en_XX	'(d / delete-01 \n      :arg0 (r / reminder\n                :mod (m / make-01 \n                        :arg0 (p / plan \n                                  :mod (r2 / reservation)) \n                        :arg1 (c / Christmas))))'
Alarm must be set for tomorrow	[IN:CREATE_ALARM [SL:DATE_TIME for tomorrow ] ]	[IN:CREATE_ALARM [SL:DATE_TIME for tomorrow ] ]	alarm	en_XX	'(c / can \n  :modality must\n  :subject (a / alarm) \n  :object (s / set \n            :tense future \n            :purpose (t / time \n                      :op1 tomorrow)))'
add 28 minutes to the stop showering timer	[IN:ADD_TIME_TIMER [SL:DATE_TIME 28 minutes ] [SL:TIMER_NAME stop showering ] [SL:METHOD_TIMER timer ] ]	[IN:ADD_TIME_TIMER [SL:DATE_TIME 28 minutes ] [SL:TIMER_NAME stop showering ] [SL:METHOD_TIMER timer ] ]	timer	en_XX	'(add-01\n     :agent (timer-02 :stop showering)\n     :theme 28)'
i would like to message the classmate thread message	[IN:SEND_MESSAGE [SL:GROUP classmate ] ]	[IN:SEND_MESSAGE [SL:GROUP classmate ] ]	messaging	en_XX	'(c / can-do\n      :ARG0 (i)\n      :ARG1 (m / message\n               :ARG0 i\n               :ARG1 (t / thread\n                        :ARG1 (m2 / message\n                                 :ARG0 t\n                                 :mod (classmate))))))'
Fast forward that song	[IN:FAST_FORWARD_MUSIC [SL:MUSIC_TYPE song ] ]	[IN:FAST_FORWARD_MUSIC [SL:MUSIC_TYPE song ] ]	music	en_XX	'(c / fast-forward-01\n      :ARG0 (you)\n      :ARG1 (s / song))'
What is the recipe for fettuccine Alfredo	[IN:GET_RECIPES [SL:RECIPES_DISH fettuccine Alfredo ] ]	[IN:GET_RECIPES [SL:RECIPES_DISH fettuccine Alfredo ] ]	recipes	en_XX	'(d / recipe\n      :topic (f / fettuccine_Alfredo))'
Things going on in Ft Worth this weekend	[IN:GET_EVENT [SL:LOCATION Ft Worth ] [SL:DATE_TIME this weekend ] ]	[IN:GET_EVENT [SL:LOCATION Ft Worth ] [SL:DATE_TIME this weekend ] ]	event	en_XX	'(c / city\n      :name "Ft Worth"\n      :time (t / time\n                 :op1 (w / weekend))\n      :event (g / go-on\n                  :topic (t2 / thing)))'
Is there any sports match in November	[IN:GET_EVENT [SL:CATEGORY_EVENT sports match ] [SL:DATE_TIME in November ] ]	[IN:GET_EVENT [SL:CATEGORY_EVENT sports match ] [SL:DATE_TIME in November ] ]	event	en_XX	'(c / check-01\n      :polarity negative\n      :arg0 (y / you)\n      :arg1 (m / match\n            :domain (s / sport)\n            :time (t / time\n                  :op1 "in"\n                  :op2 (n / november))))'
start a call with stepsisters	[IN:CREATE_CALL [SL:CONTACT stepsisters ] ]	[IN:CREATE_CALL [SL:CONTACT [IN:GET_CONTACT [SL:TYPE_RELATION stepsisters ] ] ] ]	calling	en_XX	'(c / call\n      :action (s / start)\n      :patient (s2 / stepsister))'
Display reminders for student loans payments including the dates and repayment links	[IN:GET_REMINDER [SL:METHOD_RETRIEVAL_REMINDER Display ] [SL:TODO student loans payments including the dates and repayment links ] ]	[IN:GET_REMINDER [SL:METHOD_RETRIEVAL_REMINDER Display ] [SL:TODO student loans payments including the dates and repayment links ] ]	reminder	en_XX	'(c / display-01\n      :ARG1 (r / reminder\n             :mod (s / student-loan))\n      :ARG2 (i / include\n             :ARG1 (d / date)\n             :ARG2 (l / link\n                    :mod (r2 / repayment))))'
What timers do i have running	[IN:GET_TIMER [SL:METHOD_TIMER timers ] ]	[IN:GET_TIMER [SL:METHOD_TIMER timers ] ]	timer	en_XX	'(predict \n      :arg0 (i)\n      :arg1 (have\n            :arg0 i\n            :arg1 (run \n                  :mod (timer)\n                  :polarity +)))'
Send a message asking what time they want to go to the Santa Monica Pier?	[IN:SEND_MESSAGE [SL:CONTENT_EXACT what time they want to go to the Santa Monica Pier ] ]	[IN:SEND_MESSAGE [SL:CONTENT_EXACT what time they want to go to the Santa Monica Pier ] ]	messaging	en_XX	'(send-01\n  :ARG0 (you)\n  :ARG1 (message\n          :ARG1 (ask-01\n                  :ARG0 (they)\n                  :ARG1 (time-02\n                          :mod (want-01\n                                  :ARG0 they)))\n          :ARG2 (Santa-Monica-Pier)))'
Anything interesting in the news?	[IN:GET_STORIES_NEWS [SL:NEWS_REFERENCE interesting ] [SL:NEWS_TYPE news ] ]	[IN:GET_STORIES_NEWS [SL:NEWS_REFERENCE interesting ] [SL:NEWS_TYPE news ] ]	news	en_XX	'(c / communicate-01 \n      :ARG0 (a / anyone) \n      :ARG1 \n            (i / interest \n                  :degree (q / qualify-01 :polarity - \n                                          :ARG1 (n / news))))'
display video messages from my cousin Fernando	[IN:GET_MESSAGE [SL:TYPE_CONTENT video ] [SL:SENDER my cousin Fernando ] ]	[IN:GET_MESSAGE [SL:TYPE_CONTENT video ] [SL:SENDER [IN:GET_CONTACT [SL:CONTACT_RELATED my ] [SL:TYPE_RELATION cousin ] [SL:CONTACT Fernando ] ] ] ]	messaging	en_XX	'(c / display-01\n      :arg1 (v / video-message\n                  :mod (f / from\n                           :poss (p / person :name "Fernando")\n                           :mod (m / my)))\n      :mode imperative)'
Who is jack	[IN:GET_INFO_CONTACT [SL:CONTACT jack ] ]	[IN:GET_INFO_CONTACT [SL:CONTACT jack ] ]	people	en_XX	'(c / person\n  :name "Jack"\n  :arg0 (i / introduce-01\n           :arg0 (p / person)))'
Send me the news from New York University.	[IN:GET_STORIES_NEWS [SL:NEWS_TYPE news ] [SL:NEWS_TOPIC New York University ] ]	[IN:GET_STORIES_NEWS [SL:NEWS_TYPE news ] [SL:NEWS_TOPIC New York University ] ]	news	en_XX	'(send \n      :ARG0 (person :ARG0-of (command))\n      :ARG1 (news \n             :topic (university \n                         :name (name :op1 "New York University")\n                    )\n            )\n      :ARG2 (destination \n             :ARG0 (person :ARG0-of (receive))\n            )\n     )'
Alarm for February 14, 10am	[IN:CREATE_ALARM [SL:DATE_TIME for February 14 , 10 am ] ]	[IN:CREATE_ALARM [SL:DATE_TIME for February 14 , 10 am ] ]	alarm	en_XX	'(time-of :time "10am"\n         :date-entity (date-entity :month 2\n                                   :day 14))\n(s / alarm)'
please give me a news update	[IN:GET_STORIES_NEWS [SL:NEWS_TYPE news ] ]	[IN:GET_STORIES_NEWS [SL:NEWS_TYPE news ] ]	news	en_XX	'(c / communicate-01\n      :arg0 (i / i)\n      :arg1 (n / news\n            :mod (u / update)))'
What soccer matches are coming up tonight	[IN:GET_EVENT [SL:CATEGORY_EVENT soccer matches ] [SL:DATE_TIME tonight ] ]	[IN:GET_EVENT [SL:CATEGORY_EVENT soccer matches ] [SL:DATE_TIME tonight ] ]	event	en_XX	'(p / ask-01\n      :ARG0 (you)\n      :ARG1 (m / match\n             :mod (s / soccer)\n             :time (t / tonight)))'
Read Anthony's text to me this morning	[IN:GET_MESSAGE [SL:SENDER Anthony ] [SL:RECIPIENT me ] [SL:DATE_TIME this morning ] ]	[IN:GET_MESSAGE [SL:SENDER Anthony ] [SL:RECIPIENT me ] [SL:DATE_TIME this morning ] ]	messaging	en_XX	'(read\n    :ARG0 (you)\n    :ARG1 (text \n            :ARG0-of (Anthony))\n    :time (morning))'
Does Jason live in Richmond?	[IN:GET_LOCATION [SL:CONTACT Jason ] [SL:LOCATION Richmond ] ]	[IN:GET_LOCATION [SL:CONTACT Jason ] [SL:LOCATION Richmond ] ]	people	en_XX	'(l / live-01\n   :ARG0 (p / person :name "Jason")\n   :ARG1 (c / city :name "Richmond"))'
Is there rain forecasted in Panama City, FL next week?	[IN:GET_WEATHER [SL:WEATHER_ATTRIBUTE rain ] [SL:LOCATION Panama City , FL ] [SL:DATE_TIME next week ] ]	[IN:GET_WEATHER [SL:WEATHER_ATTRIBUTE rain ] [SL:LOCATION Panama City , FL ] [SL:DATE_TIME next week ] ]	weather	en_XX	'(c / check-weather\n     :location (c2 / city\n                   :name "Panama City"\n                   :state "FL")\n     :time (t / next-week)\n     :weather-type (r / rain))'
What's happening in Baltimore tonight	[IN:GET_EVENT [SL:LOCATION Baltimore ] [SL:DATE_TIME tonight ] ]	[IN:GET_EVENT [SL:LOCATION Baltimore ] [SL:DATE_TIME tonight ] ]	event	en_XX	'(c / city :name "Baltimore"\n   :top "tonight"\n   :op1 (h / happen-01))'
Start a one hour timer	[IN:CREATE_TIMER [SL:DATE_TIME one hour ] [SL:METHOD_TIMER timer ] ]	[IN:CREATE_TIMER [SL:DATE_TIME one hour ] [SL:METHOD_TIMER timer ] ]	timer	en_XX	'(s / start-01\n     :ARG1 (t / timer\n               :quant 1\n               :unit (h / hour)))'
What is the temperature in Yucaipa today?	[IN:GET_WEATHER [SL:LOCATION Yucaipa ] [SL:DATE_TIME today ] ]	[IN:GET_WEATHER [SL:LOCATION Yucaipa ] [SL:DATE_TIME today ] ]	weather	en_XX	'(c / temperature\n      :location (l / today\n                    :location (y / Yucaipa)))'
How long do I need to cook ground beef for	[IN:GET_INFO_RECIPES [SL:RECIPES_ATTRIBUTE How long ] [SL:RECIPES_DISH ground beef ] ]	[IN:GET_INFO_RECIPES [SL:RECIPES_ATTRIBUTE How long ] [SL:RECIPES_DISH ground beef ] ]	recipes	en_XX	'(c / cook-01\n      :ARG0 (i / I)\n      :ARG1 (g / ground_beef\n            :mod (l / long))\n      :ARG2 (t / time\n            :quant (n / need)))'
how many teaspoons of cinnamon are needed	[IN:GET_INFO_RECIPES [SL:RECIPES_ATTRIBUTE how many ] [SL:RECIPES_UNIT_MEASUREMENT teaspoons ] [SL:RECIPES_INCLUDED_INGREDIENT cinnamon ] ]	[IN:GET_INFO_RECIPES [SL:RECIPES_ATTRIBUTE how many ] [SL:RECIPES_UNIT_MEASUREMENT teaspoons ] [SL:RECIPES_INCLUDED_INGREDIENT cinnamon ] ]	recipes	en_XX	'(cinnamon :quant 1\n          :unit teaspoon\n          :arg1 (need-01 :polarity positive \n                          :ARG1 cinnamon))'
Will it be above 11 in degrees Celsius here	[IN:GET_WEATHER [SL:WEATHER_ATTRIBUTE above ] [SL:WEATHER_ATTRIBUTE 11 ] [SL:WEATHER_TEMPERATURE_UNIT Celsius ] [SL:LOCATION here ] ]	[IN:GET_WEATHER [SL:WEATHER_ATTRIBUTE above ] [SL:WEATHER_ATTRIBUTE 11 ] [SL:WEATHER_TEMPERATURE_UNIT Celsius ] [SL:LOCATION here ] ]	weather	en_XX	'(c / could-01\n    :polarity positive\n    :domain (t / temperature\n              :degree (a / above\n                          :value 11\n                          :unit (d / degree-celsius)))\n    :location (h / here))'
set an alarm for 5am named get up	[IN:CREATE_ALARM [SL:DATE_TIME for 5 am ] [SL:ALARM_NAME get up ] ]	[IN:CREATE_ALARM [SL:DATE_TIME for 5 am ] [SL:ALARM_NAME get up ] ]	alarm	en_XX	'(set-01\n  :ARG0 (alarm-02\n          :name (name-03 :op "get up"))\n  :time (time-04\n          :value 5\n          :unit "AM"))'
I wanna snooze the alarm to give me 15 more minutes sleep	[IN:SNOOZE_ALARM [SL:DATE_TIME 15 more minutes ] ]	[IN:SNOOZE_ALARM [SL:DATE_TIME 15 more minutes ] ]	alarm	en_XX	'(s / snooze-01\n      :ARG0 (i / I)\n      :ARG1 (a / alarm\n              :time (m / minute :quant 15))\n      :ARG2 (g / give\n              :ARG0 i\n              :time (m2 / minute :quant 15)\n              :ARG1 (s2 / sleep)))'
Can you set a reminder to look at flights at 5:30 AM Tuesday?	[IN:CREATE_REMINDER [SL:TODO look at flights ] [SL:DATE_TIME at 5 : 30 AM Tuesday ] ]	[IN:CREATE_REMINDER [SL:TODO look at flights ] [SL:DATE_TIME at 5 : 30 AM Tuesday ] ]	reminder	en_XX	'(c / can\n      :ARG0 (y / you)\n      :ARG1 (s / set-01\n                  :ARG0 y\n                  :purpose (r / remind-01\n                                    :ARG0 y\n                                    :time (d / date-entity \n                                                  :weekday (n / name :op "Tuesday")\n                                                  :time "5:30AM")\n                                    :topic (f / flight))))\nNote: This is one possible AMR graph representation of the given sentence in the textual Neo-Davidsonian format. Other valid representations may exist depending on the interpretation of the sentence.'
New alarm for film contest tomorrow at 8	[IN:CREATE_ALARM [SL:DATE_TIME tomorrow at 8 ] ]	[IN:CREATE_ALARM [SL:DATE_TIME tomorrow at 8 ] ]	alarm	en_XX	'(t / time-entity\n      :type (d / date-entity\n              :day 2019-??-??\n              :month 2019-??-??\n              :year 2019-??-?? )\n      :hour 8\n      :timezone "UTC-7"\n      :minute 0\n      :weekday "Saturday"\n      :mod (l / tomorrow)\n    )\n    :topic (c / contest-entity\n            :type (f / film-contest-entity)\n            :mod (n / new-alarm))'
Has co workers chat sent me anything	[IN:GET_MESSAGE [SL:GROUP co workers ] [SL:RECIPIENT me ] ]	[IN:GET_MESSAGE [SL:GROUP co workers ] [SL:RECIPIENT me ] ]	messaging	en_XX	'(c / chat \n    :ARG0 (s / send \n              :ARG0 (m / me)\n              :ARG1 (s2 / something))\n    :ARG1 (c2 / coworker))'
Send Comic Con to Mary	[IN:SHARE_EVENT [SL:TITLE_EVENT Comic Con ] [SL:CONTACT Mary ] ]	[IN:SHARE_EVENT [SL:TITLE_EVENT Comic Con ] [SL:CONTACT Mary ] ]	event	en_XX	'(send :ARG0 (Comic Con) :ARG1 (Mary))'
change the channel to Spotify	[IN:PLAY_MUSIC [SL:MUSIC_TYPE channel ] [SL:MUSIC_PROVIDER_NAME Spotify ] ]	[IN:PLAY_MUSIC [SL:MUSIC_TYPE channel ] [SL:MUSIC_PROVIDER_NAME Spotify ] ]	music	en_XX	'(c / change-01               \n     :ARG0 (y / you)                \n     :ARG1 (ch / channel             \n           :mod (s / Spotify)))'
I want replies from Greg today	[IN:GET_MESSAGE [SL:SENDER Greg ] [SL:DATE_TIME today ] ]	[IN:GET_MESSAGE [SL:SENDER Greg ] [SL:DATE_TIME today ] ]	messaging	en_XX	'(w / want-01 \n      :ARG0 (i / i)\n      :ARG1 (r / reply \n                  :ARG0 i \n                  :ARG1 (f / from \n                              :ARG0 r \n                              :ARG1 (g / Greg)))\n      :time (t / today))'
What is the weather like in Adelaide?	[IN:GET_WEATHER [SL:LOCATION Adelaide ] ]	[IN:GET_WEATHER [SL:LOCATION Adelaide ] ]	weather	en_XX	'(c / comparison-quant :op1 (w / weather :mod (l / location :name "Adelaide")))'
things to do this weekend	[IN:GET_EVENT [SL:DATE_TIME this weekend ] ]	[IN:GET_EVENT [SL:DATE_TIME this weekend ] ]	event	en_XX	'(d / do-01   \n   :ARG1 (t / thing\n             :quant  (d2 / number-of             \n                        :quant  every\n                        :op1 (w / weekend)))\n   :ARG2 (t2 / this))'
Play me The Yellow Submarine album please	[IN:PLAY_MUSIC [SL:MUSIC_ALBUM_TITLE The Yellow Submarine ] [SL:MUSIC_TYPE album ] ]	[IN:PLAY_MUSIC [SL:MUSIC_ALBUM_TITLE The Yellow Submarine ] [SL:MUSIC_TYPE album ] ]	music	en_XX	'(p / play \n      :arg0 (m / me)\n      :purpose (a2 / album\n                :name "The Yellow Submarine")\n      :mod (p2 / please))'
Let's send my husband a video message response	[IN:SEND_MESSAGE [SL:RECIPIENT my husband ] [SL:TYPE_CONTENT video ] ]	[IN:SEND_MESSAGE [SL:RECIPIENT [IN:GET_CONTACT [SL:CONTACT_RELATED my ] [SL:TYPE_RELATION husband ] ] ] [SL:TYPE_CONTENT video ] ]	messaging	en_XX	'- [udef_q] :query\n     - :action "send"\n     - :polarity +\n     - :ARG0 (I)\n     - :ARG1 [b2] :message\n          - :medium (video)\n          - :ARG0 [b1] :respond\n               - :ARG0 (I)\n               - :ARG1 [b3] :recipient\n                    - :ARG0 (my)\n                    - :ARG1 [b4] :husband'
Please play 2Pac on Apple Music	[IN:PLAY_MUSIC [SL:MUSIC_ARTIST_NAME 2Pac ] [SL:MUSIC_PROVIDER_NAME Apple ] [SL:MUSIC_TYPE Music ] ]	[IN:PLAY_MUSIC [SL:MUSIC_ARTIST_NAME 2Pac ] [SL:MUSIC_PROVIDER_NAME Apple ] [SL:MUSIC_TYPE Music ] ]	music	en_XX	'(c / command\n      :refers-to (p / play\n                        :object (s / song\n                                       :name "2Pac"\n                                       :platform (a / apple-music))))'
Could you tell me the weather of Colorado?	[IN:GET_WEATHER [SL:LOCATION Colorado ] ]	[IN:GET_WEATHER [SL:LOCATION Colorado ] ]	weather	en_XX	'(could\n  :polarity +\n  :arg0 (you)\n  :arg1 (tell\n          :arg0 you\n          :arg1 (weather\n                  :mod (of Colorado))))'
Can you play some country music?	[IN:PLAY_MUSIC [SL:MUSIC_GENRE country ] [SL:MUSIC_TYPE music ] ]	[IN:PLAY_MUSIC [SL:MUSIC_GENRE country ] [SL:MUSIC_TYPE music ] ]	music	en_XX	'(c / can-01 \n      :ARG0 (y / you) \n      :ARG1 (p / play-01 \n                  :ARG0 y \n                  :ARG1 (m / music \n                              :mod (c2 / country))))'
Will it rain in Las Vegas. NV next week?	[IN:GET_WEATHER [SL:WEATHER_ATTRIBUTE rain ] [SL:LOCATION Las Vegas ] [SL:DATE_TIME next week ] ]	[IN:GET_WEATHER [SL:WEATHER_ATTRIBUTE rain ] [SL:LOCATION Las Vegas ] [SL:DATE_TIME next week ] ]	weather	en_XX	'(c / can\n    :polarity - \n    :subject (r / rain-01\n                 :location (c2 / city\n                               :name "Las Vegas"\n                               :state "NV"))\n    :time (n / next-week))'
check if katie is online right now	[IN:GET_AVAILABILITY [SL:CONTACT katie ] ]	[IN:GET_AVAILABILITY [SL:CONTACT katie ] ]	calling	en_XX	'(c / check-01\n    :ARG0 (you)\n    :ARG1 (k / know-01\n            :ARG1 (o / online\n                  :topic (person :name "Katie")))\n    :time (n / now))'
