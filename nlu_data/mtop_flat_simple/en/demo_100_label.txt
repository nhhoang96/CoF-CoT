{"utterance": "I want to listen to Justin Bieber's latest album", "AMR Graph": "I want to listen to Justin Bieber's latest album\t[IN:PLAY_MUSIC [SL:MUSIC_ARTIST_NAME Justin Bieber ] [SL:MUSIC_TYPE album ] ]\t[IN:PLAY_MUSIC [SL:MUSIC_ARTIST_NAME Justin Bieber ] [SL:MUSIC_TYPE album ] ]\tmusic\ten_XX\t(w / want-01\n      :ARG0 (i / i)\n      :ARG1 (l / listen-01\n            :ARG0 i\n            :ARG1 (a / album\n                  :name (n / name\n                        :op1 \"Justin Bieber\")\n                  :mod (l2 / latest))))"}{"utterance": "resume the baking timer", "AMR Graph": "resume the baking timer\t[IN:RESUME_TIMER [SL:METHOD_TIMER timer ] ]\t[IN:RESUME_TIMER [SL:METHOD_TIMER timer ] ]\ttimer\ten_XX\t(resume / :action-of (timer-bake / :bake))"}{"utterance": "how many calories are in tomato sauce", "AMR Graph": "how many calories are in tomato sauce\t[IN:GET_INFO_RECIPES [SL:RECIPES_ATTRIBUTE how many ] [SL:RECIPES_UNIT_NUTRITION calories ] [SL:RECIPES_DISH tomato sauce ] ]\t[IN:GET_INFO_RECIPES [SL:RECIPES_ATTRIBUTE how many ] [SL:RECIPES_UNIT_NUTRITION calories ] [SL:RECIPES_DISH tomato sauce ] ]\trecipes\ten_XX\t(s / quantify-quantity\n      :quant  (q / quantity\n                    :cardinality (o / one))\n      :op1 (c / calorie\n                  :quant (m / measure-quantity\n                                 :unit (u / unit\n                                                :name \"calorie\"))\n                  :op1 (f / food\n                              :name (n / name :op1 \"tomato\")\n                              :name (n2 / name :op1 \"sauce\"))))"}{"utterance": "Set the timer for 30 min. I do not want to leave the hair color in for too long", "AMR Graph": "Set the timer for 30 min. I do not want to leave the hair color in for too long\t[IN:CREATE_TIMER [SL:METHOD_TIMER timer ] [SL:DATE_TIME for 30 min ] ]\t[IN:CREATE_TIMER [SL:METHOD_TIMER timer ] [SL:DATE_TIME for 30 min ] ]\ttimer\ten_XX\t(set-01\n      :ARG0 (timer-02)\n      :time (temporal-03\n             :unit minute\n             :quant 30)\n      :mode imperative)\n                  \n(do-04\n      :ARG1 (coloring-06\n             :ARG0-of (leave-05)\n             :time (temporal-07\n                    :op2 (too-08\n                           :polarity -)\n                    :unit minute\n                    :quant long)))\n                  \n(neg-09 :polarity -)"}{"utterance": "find me art majors from Stanford", "AMR Graph": "find me art majors from Stanford\t[IN:GET_CONTACT [SL:MAJOR art ] [SL:SCHOOL Stanford ] ]\t[IN:GET_CONTACT [SL:MAJOR art ] [SL:SCHOOL Stanford ] ]\tpeople\ten_XX\t(c / find\n    :ARG0 (p / person\n              :possessive \"me\"\n              :degree (a / art-major\n                         :mod (f / from\n                                  :name (s / stanford))))"}{"utterance": "Yesterday was awfully hot and I would like to know what the yesterday's temperature was", "AMR Graph": "Yesterday was awfully hot and I would like to know what the yesterday's temperature was\t[IN:GET_WEATHER [SL:DATE_TIME Yesterday ] [SL:WEATHER_ATTRIBUTE hot ] [SL:DATE_TIME yesterday ] ]\t[IN:GET_WEATHER [SL:DATE_TIME Yesterday ] [SL:WEATHER_ATTRIBUTE hot ] [SL:DATE_TIME yesterday ] ]\tweather\ten_XX\t(inc / include\n      :time (day / day :quant 1)\n      :degree (awful / awful)\n      :polarity -\n      :subj (i / i)\n      :want (know :polarity + \n                     :topic (temp / temperature :mod (day / day :quant 1))))\n      \nNote: This AMR graph represents that \"Yesterday\", the subject \"I\" and \"temperature of yesterday\" are involved in the \"know\" relation and that \"Yesterday\" is modified by \"awfully hot\"."}{"utterance": "please dial Ryann Small right away", "AMR Graph": "please dial Ryann Small right away\t[IN:CREATE_CALL [SL:CONTACT Ryann Small ] ]\t[IN:CREATE_CALL [SL:CONTACT Ryann Small ] ]\tcalling\ten_XX\t(d / dial-01\n      :object (n / name\n                  :op1 \"Ryann Small\")\n      :time (i / immediately))"}{"utterance": "Subtract 30 minutes from my timer", "AMR Graph": "Subtract 30 minutes from my timer\t[IN:SUBTRACT_TIME_TIMER [SL:DATE_TIME 30 minutes ] [SL:METHOD_TIMER timer ] ]\t[IN:SUBTRACT_TIME_TIMER [SL:DATE_TIME 30 minutes ] [SL:METHOD_TIMER timer ] ]\ttimer\ten_XX\t(c / subtract-01\n    :ARG1 (t / timer\n            :poss my)\n    :ARG2 (a / amount\n            :value -30\n            :unit (m / minute)))"}{"utterance": "What kind of event is Oktoberfest?", "AMR Graph": "What kind of event is Oktoberfest?\t[IN:GET_CATEGORY_EVENT [SL:TITLE_EVENT Oktoberfest ] ]\t[IN:GET_CATEGORY_EVENT [SL:TITLE_EVENT Oktoberfest ] ]\tevent\ten_XX\t(c / event\n    :ARG1 (w / want-01\n              :ARG0 (w2 / what)\n              :ARG1 (e / oktoberfest)))"}{"utterance": "respond interested to Open Stage NYC", "AMR Graph": "respond interested to Open Stage NYC\t[IN:SET_RSVP_INTERESTED [SL:TITLE_EVENT Open Stage NYC ] ]\t[IN:SET_RSVP_INTERESTED [SL:TITLE_EVENT Open Stage NYC ] ]\tevent\ten_XX\t(c / respond-01      \n      :ARG1 (i / interested)\n      :ARG2 (o / Open_Stage_NYC))"}{"utterance": "What's the address of Mike's current employer?", "AMR Graph": "What's the address of Mike's current employer?\t[IN:GET_LOCATION [SL:CONTACT Mike ] ]\t[IN:GET_LOCATION [SL:CONTACT Mike ] ]\tpeople\ten_XX\t(c / current-employer\n      :name (n / name\n               :op1 \"Mike\")\n      :address (a / address))"}{"utterance": "Seek all available", "AMR Graph": "Seek all available\t[IN:GET_AVAILABILITY ]\t[IN:GET_AVAILABILITY ]\tcalling\ten_XX\t(possible-event :polarity \"+\" :domain (p2 :seek)\n                :quant (q2 :all) \n                :mod (m2 :available))"}{"utterance": "any new news of donald trump", "AMR Graph": "any new news of donald trump\t[IN:GET_STORIES_NEWS [SL:NEWS_REFERENCE new ] [SL:NEWS_TYPE news ] [SL:NEWS_TOPIC donald trump ] ]\t[IN:GET_STORIES_NEWS [SL:NEWS_REFERENCE new ] [SL:NEWS_TYPE news ] [SL:NEWS_TOPIC donald trump ] ]\tnews\ten_XX\t(c / candidate                                                 \n    :name \"donald trump\"                                      \n    :known-for (n / news                                         \n                    :degree new))"}{"utterance": "Remove my reminder for dinner on Wednesday.", "AMR Graph": "Remove my reminder for dinner on Wednesday.\t[IN:DELETE_REMINDER [SL:PERSON_REMINDED my ] [SL:TODO dinner ] [SL:DATE_TIME on Wednesday ] ]\t[IN:DELETE_REMINDER [SL:PERSON_REMINDED my ] [SL:TODO dinner ] [SL:DATE_TIME on Wednesday ] ]\treminder\ten_XX\t(remove  \n      :ARG0 (I)\n      :ARG1 (reminder\n             :ARG0 (for dinner on Wednesday)         \n             :poss my))"}{"utterance": "Remove work reminders.", "AMR Graph": "Remove work reminders.\t[IN:DELETE_REMINDER [SL:TODO work ] ]\t[IN:DELETE_REMINDER [SL:TODO work ] ]\treminder\ten_XX\t(c / command\n       :subject (y / you)\n       :object (r / reminder\n                    :purpose (w / work)\n                    :action (r2 / remove)))"}{"utterance": "How do you mix a martini", "AMR Graph": "How do you mix a martini\t[IN:GET_INFO_RECIPES [SL:RECIPES_DISH martini ] ]\t[IN:GET_INFO_RECIPES [SL:RECIPES_DISH martini ] ]\trecipes\ten_XX\t(c / mix-01\n      :ARG0 (y / you)\n      :ARG1 (m / martini))"}{"utterance": "what temperature is lamb cooked", "AMR Graph": "what temperature is lamb cooked\t[IN:GET_INFO_RECIPES [SL:RECIPES_ATTRIBUTE temperature ] [SL:RECIPES_INCLUDED_INGREDIENT lamb ] ]\t[IN:GET_INFO_RECIPES [SL:RECIPES_ATTRIBUTE temperature ] [SL:RECIPES_INCLUDED_INGREDIENT lamb ] ]\trecipes\ten_XX\t(did / :polarity_negative \n     :ARG1 (temperature \n               :ARG1 (lamb \n                         :wiki \"Lamb\" \n                         :name (name \n                                   :op1 \"lamb\")) \n               :op1 \"cooked\"))"}{"utterance": "Could you connect me to Magic: The Gathering on Slack please", "AMR Graph": "Could you connect me to Magic: The Gathering on Slack please\t[IN:CREATE_CALL [SL:GROUP Magic : The Gathering ] [SL:NAME_APP Slack ] ]\t[IN:CREATE_CALL [SL:GROUP Magic : The Gathering ] [SL:NAME_APP Slack ] ]\tcalling\ten_XX\t(s / connect-01\n      :agent (y / you)\n      :patient (p / please\n                  :degree (m / magic-the-gathering)\n                  :medium (s2 / slack)))"}{"utterance": "Shuffle the channels.", "AMR Graph": "Shuffle the channels.\t[IN:START_SHUFFLE_MUSIC [SL:MUSIC_TYPE channels ] ]\t[IN:START_SHUFFLE_MUSIC [SL:MUSIC_TYPE channels ] ]\tmusic\ten_XX\t(shuffle :polarity + \n         :agent (channels))"}{"utterance": "what is the weather locally", "AMR Graph": "what is the weather locally\t[IN:GET_WEATHER [SL:LOCATION locally ] ]\t[IN:GET_WEATHER [SL:LOCATION locally ] ]\tweather\ten_XX\t(c / command-01\n  :domain (l / local)\n  :topic (w / weather))"}{"utterance": "Get my video messages from Julia Walters and Sparks", "AMR Graph": "Get my video messages from Julia Walters and Sparks\t[IN:GET_MESSAGE [SL:TYPE_CONTENT video ] [SL:RECIPIENT Julia Walters ] [SL:RECIPIENT Sparks ] ]\t[IN:GET_MESSAGE [SL:TYPE_CONTENT video ] [SL:RECIPIENT Julia Walters ] [SL:RECIPIENT Sparks ] ]\tmessaging\ten_XX\t(c / get-01 \n    :ARG0 (i / i)\n    :ARG1 \n        (m2 / message \n            :ARG0 i \n            :medium (v / video)\n            :from \n                (p / person \n                    :name (n / name :op \"Julia Walters\"))\n            :from \n                (o / organization \n                    :name (n2 / name :op \"Sparks\"))))"}{"utterance": "play me some country", "AMR Graph": "play me some country\t[IN:PLAY_MUSIC [SL:MUSIC_GENRE country ] ]\t[IN:PLAY_MUSIC [SL:MUSIC_GENRE country ] ]\tmusic\ten_XX\t(node /play\n      :ARG1 (node /me)\n      :ARG2 (node /music\n              :mod (node /country)))"}{"utterance": "The name of my friend that works at Starbucks", "AMR Graph": "The name of my friend that works at Starbucks\t[IN:GET_CONTACT [SL:CONTACT_RELATED my ] [SL:TYPE_RELATION friend ] [SL:EMPLOYER Starbucks ] ]\t[IN:GET_CONTACT [SL:CONTACT_RELATED my ] [SL:TYPE_RELATION friend ] [SL:EMPLOYER Starbucks ] ]\tpeople\ten_XX\t(c / friend\n      :name (n / name\n               :poss (l / my))\n      :ARG1-of (w / work\n                  :name (s / Starbucks)))"}{"utterance": "can you tell me the most recent news stories", "AMR Graph": "can you tell me the most recent news stories\t[IN:GET_STORIES_NEWS [SL:DATE_TIME the most recent ] [SL:NEWS_TYPE news stories ] ]\t[IN:GET_STORIES_NEWS [SL:DATE_TIME the most recent ] [SL:NEWS_TYPE news stories ] ]\tnews\ten_XX\t(c / can\n      :ARG0 (y / you)\n      :ARG1 (t / tell\n            :ARG0 y\n            :ARG1 (s / story\n                  :mod (r / recent)\n                  :ARG1-of (n / news))))"}{"utterance": "Set me an alarm at 4PM to call my mum.", "AMR Graph": "Set me an alarm at 4PM to call my mum.\t[IN:CREATE_ALARM [SL:DATE_TIME at 4 PM ] [SL:ALARM_NAME call my mum ] ]\t[IN:CREATE_ALARM [SL:DATE_TIME at 4 PM ] [SL:ALARM_NAME call my mum ] ]\talarm\ten_XX\t(set :event (set-reminder :time \"4PM\" :action (phone-call :recipient \"my mum\")))"}{"utterance": "at what temperature do you cook baked chicken at", "AMR Graph": "at what temperature do you cook baked chicken at\t[IN:GET_INFO_RECIPES [SL:RECIPES_ATTRIBUTE temperature ] [SL:RECIPES_DISH baked chicken ] ]\t[IN:GET_INFO_RECIPES [SL:RECIPES_ATTRIBUTE temperature ] [SL:RECIPES_DISH baked chicken ] ]\trecipes\ten_XX\t(i / cook-01\n    :ARG0 (you)\n    :ARG1 (c / chicken\n            :mod (b / baked)\n        )\n    :ARG3 (t / temperature))"}{"utterance": "Friends of Adelaide's", "AMR Graph": "Friends of Adelaide's\t[IN:GET_CONTACT [SL:TYPE_RELATION Friends ] [SL:CONTACT_RELATED Adelaide ] ]\t[IN:GET_CONTACT [SL:TYPE_RELATION Friends ] [SL:CONTACT_RELATED Adelaide ] ]\tpeople\ten_XX\t(c / friend-91\n      :ARG1 (p / person\n                  :name \"Adelaide\"\n                  )\n      :ARG2 (p2 / friend-of-91))"}{"utterance": "How many calories are in a full pizza pie?", "AMR Graph": "How many calories are in a full pizza pie?\t[IN:GET_INFO_RECIPES [SL:RECIPES_ATTRIBUTE How many ] [SL:RECIPES_UNIT_NUTRITION calories ] [SL:RECIPES_DISH pizza pie ] ]\t[IN:GET_INFO_RECIPES [SL:RECIPES_ATTRIBUTE How many ] [SL:RECIPES_UNIT_NUTRITION calories ] [SL:RECIPES_DISH pizza pie ] ]\trecipes\ten_XX\t(c / calories\n      :quant (m / many)\n      :mod (f / full)\n      :in (p / pizza-pie))"}{"utterance": "remind me to go left at the light", "AMR Graph": "remind me to go left at the light\t[IN:CREATE_REMINDER [SL:PERSON_REMINDED me ] [SL:TODO go left at the light ] ]\t[IN:CREATE_REMINDER [SL:PERSON_REMINDED me ] [SL:TODO go left at the light ] ]\treminder\ten_XX\t(c / remind-01\n      :ARG1 (p / person :poss my)\n      :ARG2 (g / go-01\n             :ARG1 p\n             :ARG2 (l / left)\n             :manner (a / at\n                      :location (t / traffic-light))))"}{"utterance": "whatsapp video call Lucy Hoffman", "AMR Graph": "whatsapp video call Lucy Hoffman\t[IN:CREATE_CALL [SL:NAME_APP whatsapp ] [SL:CONTACT Lucy Hoffman ] ]\t[IN:CREATE_CALL [SL:NAME_APP whatsapp ] [SL:CONTACT Lucy Hoffman ] ]\tcalling\ten_XX\t(c / call \n      :manner (v / video)\n      :arg0 (w / whatsapp)\n      :arg1 (p / person\n                  :name \"Lucy Hoffman\"))"}{"utterance": "Concerts this weekend", "AMR Graph": "Concerts this weekend\t[IN:GET_EVENT [SL:CATEGORY_EVENT Concerts ] [SL:DATE_TIME this weekend ] ]\t[IN:GET_EVENT [SL:CATEGORY_EVENT Concerts ] [SL:DATE_TIME this weekend ] ]\tevent\ten_XX\t(c / concerts\n  :time (w / weekend))"}{"utterance": "Is Nick Foles married?", "AMR Graph": "Is Nick Foles married?\t[IN:GET_LIFE_EVENT [SL:CONTACT Nick Foles ] [SL:LIFE_EVENT married ] ]\t[IN:GET_LIFE_EVENT [SL:CONTACT Nick Foles ] [SL:LIFE_EVENT married ] ]\tpeople\ten_XX\t(c / contrast-01\n      :polarity -\n      :time (n / now)\n      :op1 (m / marry-01\n            :ARG0 (p / person :wiki \"Nick_Foles\")\n            :ARG1 (w / woman)))"}{"utterance": "Give me CNN headlines", "AMR Graph": "Give me CNN headlines\t[IN:GET_STORIES_NEWS [SL:NEWS_SOURCE CNN ] [SL:NEWS_TYPE headlines ] ]\t[IN:GET_STORIES_NEWS [SL:NEWS_SOURCE CNN ] [SL:NEWS_TYPE headlines ] ]\tnews\ten_XX\t(g / give \n      :recipient (m / me) \n      :theme (c / CNN-headlines))"}{"utterance": "all James friends", "AMR Graph": "all James friends\t[IN:GET_CONTACT [SL:CONTACT_RELATED James ] [SL:TYPE_RELATION friends ] ]\t[IN:GET_CONTACT [SL:CONTACT_RELATED James ] [SL:TYPE_RELATION friends ] ]\tpeople\ten_XX\t(c / conjunction :op1 (a / all-quantifier :op1 (f / friend :poss (j / name :op1 \"James\"))))"}{"utterance": "set my timer for a 35 minute baking time", "AMR Graph": "set my timer for a 35 minute baking time\t[IN:CREATE_TIMER [SL:METHOD_TIMER timer ] [SL:DATE_TIME 35 minute ] ]\t[IN:CREATE_TIMER [SL:METHOD_TIMER timer ] [SL:DATE_TIME 35 minute ] ]\ttimer\ten_XX\t(set :object (timer :possessive my) :event (time :duration 35 :unit minute :quant baking))"}{"utterance": "Change to video call", "AMR Graph": "Change to video call\t[IN:UPDATE_METHOD_CALL ]\t[IN:UPDATE_METHOD_CALL ]\tcalling\ten_XX\t(c / change-01 \n    :ARG1 (p / person :wiki - \n                           :name \"you\") \n    :ARG2 (v / video-call))"}{"utterance": "create a conference call reminder to all my subornants.", "AMR Graph": "create a conference call reminder to all my subornants.\t[IN:CREATE_REMINDER [SL:TODO conference call ] [SL:PERSON_REMINDED all my subornants ] ]\t[IN:CREATE_REMINDER [SL:TODO [IN:CREATE_CALL ] ] [SL:PERSON_REMINDED all my subornants ] ]\treminder\ten_XX\t(c / create-01\n      :ARG0 (u / you)\n      :ARG1 (r / reminder\n                   :ARG0 (c2 / call\n                                   :ARG1 (co / conference))\n                   :ARG1-of (u))\n      :ARG2 (s / subordinate\n                   :poss (m / my))\n      :mod (a / all))"}{"utterance": "Please give me the local news.", "AMR Graph": "Please give me the local news.\t[IN:GET_STORIES_NEWS [SL:NEWS_CATEGORY local ] [SL:NEWS_TYPE news ] ]\t[IN:GET_STORIES_NEWS [SL:NEWS_CATEGORY local ] [SL:NEWS_TYPE news ] ]\tnews\ten_XX\t(d / give-01\n      :ARG0 (y / you)\n      :ARG1 (n / news\n                :mod (l / local)))"}{"utterance": "Turn on all alarms", "AMR Graph": "Turn on all alarms\t[IN:CREATE_ALARM [SL:AMOUNT all ] ]\t[IN:CREATE_ALARM [SL:AMOUNT all ] ]\talarm\ten_XX\t(c / cause-01 \n      :ARG0 (a / alarm\n                 :mod (all)))\n      :ARG1 (t / turn-on-01))"}{"utterance": "What is the recipe for Pico de Gallo", "AMR Graph": "What is the recipe for Pico de Gallo\t[IN:GET_RECIPES [SL:RECIPES_DISH Pico de Gallo ] ]\t[IN:GET_RECIPES [SL:RECIPES_DISH Pico de Gallo ] ]\trecipes\ten_XX\t(c / recipe :name \"Pico de Gallo\")"}{"utterance": "How much longer do I have", "AMR Graph": "How much longer do I have\t[IN:GET_TIMER ]\t[IN:GET_TIMER ]\ttimer\ten_XX\t(time-of (:op1 i)\n         (have :ARG0 i\n               :ARG1 \n               (duration\n                 :quant how-much\n                 :unit (:time-unit longer)))))"}{"utterance": "Delete my reminder to send a gift to Brent, it's already done", "AMR Graph": "Delete my reminder to send a gift to Brent, it's already done\t[IN:DELETE_REMINDER [SL:PERSON_REMINDED my ] [SL:TODO send a gift to Brent ] ]\t[IN:DELETE_REMINDER [SL:PERSON_REMINDED my ] [SL:TODO send a gift to Brent ] ]\treminder\ten_XX\t(d / delete \n    :ARG0 (i / i) \n    :ARG1 (r / reminder\n              :ARG0 i \n              :ARG1 (s / send \n                        :ARG0 i \n                        :ARG1 (g / gift \n                                  :ARG0 (b / brent))) \n              :ARG2 (t / temporal-quantity \n                        :quant 1 \n                        :unit \"t\" \n                        :mod \"already done\")))"}{"utterance": "delete all rap songs.", "AMR Graph": "delete all rap songs.\t[IN:REMOVE_FROM_PLAYLIST_MUSIC [SL:MUSIC_GENRE rap ] [SL:MUSIC_TYPE songs ] ]\t[IN:REMOVE_FROM_PLAYLIST_MUSIC [SL:MUSIC_GENRE rap ] [SL:MUSIC_TYPE songs ] ]\tmusic\ten_XX\t(delete\n      :arg0 (all\n                 :mod (rap)\n      )\n)"}{"utterance": "Could you please give weather information for Italy", "AMR Graph": "Could you please give weather information for Italy\t[IN:GET_WEATHER [SL:LOCATION Italy ] ]\t[IN:GET_WEATHER [SL:LOCATION Italy ] ]\tweather\ten_XX\t(c / could-01\n    :ARG0 (y / you)\n    :ARG1 (g / give-01\n        :ARG0 y\n        :ARG1 (i / information\n            :mod (w / weather)\n            :mod (f / for\n                :name (n / name\n                    :op1 \"Italy\")))))"}{"utterance": "Start timer again.", "AMR Graph": "Start timer again.\t[IN:RESTART_TIMER [SL:METHOD_TIMER timer ] ]\t[IN:RESTART_TIMER [SL:METHOD_TIMER timer ] ]\ttimer\ten_XX\t(start\n  :ARG0 (timer\n           :mod (again))))"}{"utterance": "hang up to end the call", "AMR Graph": "hang up to end the call\t[IN:END_CALL ]\t[IN:END_CALL ]\tcalling\ten_XX\t(c / call \n      :ARG1 (e / end \n               :ARG1 (h / hang-up)))"}{"utterance": "Set a reminder to call my dad at 5:00 to ask about his doctor's appointment.", "AMR Graph": "Set a reminder to call my dad at 5:00 to ask about his doctor's appointment.\t[IN:CREATE_REMINDER [SL:TODO call my dad at 5 : 00 to ask about his doctor 's appointment ] ]\t[IN:CREATE_REMINDER [SL:TODO [IN:GET_TODO [SL:TODO [IN:CREATE_CALL [SL:CONTACT [IN:GET_CONTACT [SL:CONTACT_RELATED my ] [SL:TYPE_RELATION dad ] ] ] ] ] [SL:DATE_TIME at 5 : 00 ] [SL:TODO ask about his doctor 's appointment ] ] ] ]\treminder\ten_XX\t(set: \n     :event (reminder\n               :action (set\n                          :action-of (call\n                                        :arg0 (my dad)\n                                        :time (at 5:00))\n                          :purpose (ask\n                                       :arg0 (about his doctor's appointment))))"}{"utterance": "When did Sam get his diploma?", "AMR Graph": "When did Sam get his diploma?\t[IN:GET_EDUCATION_TIME [SL:CONTACT Sam ] [SL:EDUCATION_DEGREE diploma ] ]\t[IN:GET_EDUCATION_TIME [SL:CONTACT Sam ] [SL:EDUCATION_DEGREE diploma ] ]\tpeople\ten_XX\t(time-of\n\t  :op1 (get-01\n         :arg0 (name :op1 \"Sam\"))\n\t  :op2 (diploma\n\t\t :poss (pronoun :op1 \"his\")))"}{"utterance": "Set an Early bird alarm for tomorrow morning at six.", "AMR Graph": "Set an Early bird alarm for tomorrow morning at six.\t[IN:CREATE_ALARM [SL:ALARM_NAME Early bird ] [SL:DATE_TIME for tomorrow morning at six ] ]\t[IN:CREATE_ALARM [SL:ALARM_NAME Early bird ] [SL:DATE_TIME for tomorrow morning at six ] ]\talarm\ten_XX\t(set \n      :time (tomorrow \n                 :part-of-day morning \n                 :quant 6) \n      :condition (early-bird-alarm))"}{"utterance": "Do any of my friends attend Eastern?", "AMR Graph": "Do any of my friends attend Eastern?\t[IN:GET_CONTACT [SL:CONTACT_RELATED my ] [SL:TYPE_RELATION friends ] [SL:SCHOOL Eastern ] ]\t[IN:GET_CONTACT [SL:CONTACT_RELATED my ] [SL:TYPE_RELATION friends ] [SL:SCHOOL Eastern ] ]\tpeople\ten_XX\t(c / check-01\n      :ARG0 (i / I)\n      :ARG1 (f / friend\n             :ARG0 i)\n      :ARG2 (e / Eastern))"}{"utterance": "leave current call and switch to new call", "AMR Graph": "leave current call and switch to new call\t[IN:SWITCH_CALL ]\t[IN:SWITCH_CALL ]\tcalling\ten_XX\t(c/leave :agent (c/person) :theme (c/current_call) :purpose (c/switch :theme (c/new_call)))"}{"utterance": "Any news on the marijuana legalization in Sonoma County", "AMR Graph": "Any news on the marijuana legalization in Sonoma County\t[IN:GET_STORIES_NEWS [SL:NEWS_TYPE news ] [SL:NEWS_TOPIC marijuana legalization in Sonoma County ] ]\t[IN:GET_STORIES_NEWS [SL:NEWS_TYPE news ] [SL:NEWS_TOPIC marijuana legalization in Sonoma County ] ]\tnews\ten_XX\t(c / county\n        :name \"Sonoma County\"\n        :location (l / locate-02\n              :name (n / name :op1 \"Sonoma\")\n              :location (s / state :name \"California\")))\n    (l2 / legalize-01\n        :ARG1 (m / marijuana))\n    (n2 / news\n        :ARG1 m\n        :ARG2 c)"}{"utterance": "Set alarm every minutes for 15 minutes", "AMR Graph": "Set alarm every minutes for 15 minutes\t[IN:CREATE_ALARM [SL:PERIOD every minutes ] [SL:DATE_TIME for 15 minutes ] ]\t[IN:CREATE_ALARM [SL:PERIOD every minutes ] [SL:DATE_TIME for 15 minutes ] ]\talarm\ten_XX\t(set :arg0 (alarm :time \"every minutes\") :arg1 (minute :quant 15))"}{"utterance": "Tell Jimmy the puppet show will be tonight at the local elementary school.", "AMR Graph": "Tell Jimmy the puppet show will be tonight at the local elementary school.\t[IN:SEND_MESSAGE [SL:RECIPIENT Jimmy ] [SL:CONTENT_EXACT the puppet show will be tonight at the local elementary school ] ]\t[IN:SEND_MESSAGE [SL:RECIPIENT Jimmy ] [SL:CONTENT_EXACT the puppet show will be tonight at the local elementary school ] ]\tmessaging\ten_XX\t(c / communicate-01\n      :arg0 (p / person :name \"the speaker\")\n      :arg1 (j / person :name \"Jimmy\")\n      :arg2 (s / show-event\n            :theme (p2 / puppet-show)\n            :time (t / tonight)\n            :location (s2 / school :name (n / name :op1 \"elementary\" :op2 \"local\"))))"}{"utterance": "Give me the local news for New York.", "AMR Graph": "Give me the local news for New York.\t[IN:GET_STORIES_NEWS [SL:NEWS_CATEGORY local ] [SL:NEWS_TYPE news ] [SL:NEWS_TOPIC New York ] ]\t[IN:GET_STORIES_NEWS [SL:NEWS_CATEGORY local ] [SL:NEWS_TYPE news ] [SL:NEWS_TOPIC New York ] ]\tnews\ten_XX\t(g / give-01\n    :ARG0 (m / me)\n    :ARG1 (n / news\n           :mod (l / local)\n           :location (c / city\n                      :name \"New York\")))"}{"utterance": "Delete the reminder to make plan reservations for Christmas.", "AMR Graph": "Delete the reminder to make plan reservations for Christmas.\t[IN:DELETE_REMINDER [SL:TODO make plan reservations for Christmas ] ]\t[IN:DELETE_REMINDER [SL:TODO make plan reservations for Christmas ] ]\treminder\ten_XX\t(c / delete\n      :ARG0 (y / you)\n      :ARG1 (r / reminder\n            :ARG1-of (m / make\n                  :ARG1 (p / plan\n                        :ARG2 (r2 / reservation\n                              :mod (d / date-entity :month \"December\" :day 25))))))"}{"utterance": "Alarm must be set for tomorrow", "AMR Graph": "Alarm must be set for tomorrow\t[IN:CREATE_ALARM [SL:DATE_TIME for tomorrow ] ]\t[IN:CREATE_ALARM [SL:DATE_TIME for tomorrow ] ]\talarm\ten_XX\t(set-alarm :time tomorrow)"}{"utterance": "add 28 minutes to the stop showering timer", "AMR Graph": "add 28 minutes to the stop showering timer\t[IN:ADD_TIME_TIMER [SL:DATE_TIME 28 minutes ] [SL:TIMER_NAME stop showering ] [SL:METHOD_TIMER timer ] ]\t[IN:ADD_TIME_TIMER [SL:DATE_TIME 28 minutes ] [SL:TIMER_NAME stop showering ] [SL:METHOD_TIMER timer ] ]\ttimer\ten_XX\t(add\n   :duration (measure-unit :number 28 :unit \"minute\")\n   :op1 (stop-showering-timer))"}{"utterance": "i would like to message the classmate thread message", "AMR Graph": "i would like to message the classmate thread message\t[IN:SEND_MESSAGE [SL:GROUP classmate ] ]\t[IN:SEND_MESSAGE [SL:GROUP classmate ] ]\tmessaging\ten_XX\t(c / communicate \n      :agent (i)\n      :medium (m / message)\n      :theme (t / thread)\n      :topic (m2 / message\n                    :poss (c2 / classmate)))"}{"utterance": "Fast forward that song", "AMR Graph": "Fast forward that song\t[IN:FAST_FORWARD_MUSIC [SL:MUSIC_TYPE song ] ]\t[IN:FAST_FORWARD_MUSIC [SL:MUSIC_TYPE song ] ]\tmusic\ten_XX\t(c / cause-01\n      :agent (y / you)\n      :theme (s / song)\n      :mod (f / fast))"}{"utterance": "What is the recipe for fettuccine Alfredo", "AMR Graph": "What is the recipe for fettuccine Alfredo\t[IN:GET_RECIPES [SL:RECIPES_DISH fettuccine Alfredo ] ]\t[IN:GET_RECIPES [SL:RECIPES_DISH fettuccine Alfredo ] ]\trecipes\ten_XX\t(name / recipe\n      :topic (dish / fettuccine_Alfredo))"}{"utterance": "Things going on in Ft Worth this weekend", "AMR Graph": "Things going on in Ft Worth this weekend\t[IN:GET_EVENT [SL:LOCATION Ft Worth ] [SL:DATE_TIME this weekend ] ]\t[IN:GET_EVENT [SL:LOCATION Ft Worth ] [SL:DATE_TIME this weekend ] ]\tevent\ten_XX\t(c / city\n      :name \"Ft Worth\"\n      :ARG1-of (g / go-on\n                  :ARG1 (t / this-weekend)))"}{"utterance": "Is there any sports match in November", "AMR Graph": "Is there any sports match in November\t[IN:GET_EVENT [SL:CATEGORY_EVENT sports match ] [SL:DATE_TIME in November ] ]\t[IN:GET_EVENT [SL:CATEGORY_EVENT sports match ] [SL:DATE_TIME in November ] ]\tevent\ten_XX\t(c / check-01\n      :polarity -\n      :ARG1 (m / match\n            :domain sport\n            :time (d / date-entity\n                  :month 11)))\n    (t / there)\n    )"}{"utterance": "start a call with stepsisters", "AMR Graph": "start a call with stepsisters\t[IN:CREATE_CALL [SL:CONTACT stepsisters ] ]\t[IN:CREATE_CALL [SL:CONTACT [IN:GET_CONTACT [SL:TYPE_RELATION stepsisters ] ] ] ]\tcalling\ten_XX\t(start :event (call :participant (stepsisters)))"}{"utterance": "Display reminders for student loans payments including the dates and repayment links", "AMR Graph": "Display reminders for student loans payments including the dates and repayment links\t[IN:GET_REMINDER [SL:METHOD_RETRIEVAL_REMINDER Display ] [SL:TODO student loans payments including the dates and repayment links ] ]\t[IN:GET_REMINDER [SL:METHOD_RETRIEVAL_REMINDER Display ] [SL:TODO student loans payments including the dates and repayment links ] ]\treminder\ten_XX\t(d / display \n    :ARG0 (r / reminder \n              :time (p / payment \n                        :type \"student loans\" \n                        :date (d2 / date) \n                        :link (l / link \n                                  :type \"repayment\"))) \n    :purpose (i / include))"}{"utterance": "What timers do i have running", "AMR Graph": "What timers do i have running\t[IN:GET_TIMER [SL:METHOD_TIMER timers ] ]\t[IN:GET_TIMER [SL:METHOD_TIMER timers ] ]\ttimer\ten_XX\t(c / query \n     :query-op \"do\" \n     :arg0 (i / i) \n     :arg1 (r / have-05 \n                :ARG0 i \n                :ARG1 (t / timer \n                           :domain i \n                           :mod (s / progressive))))"}{"utterance": "Send a message asking what time they want to go to the Santa Monica Pier?", "AMR Graph": "Send a message asking what time they want to go to the Santa Monica Pier?\t[IN:SEND_MESSAGE [SL:CONTENT_EXACT what time they want to go to the Santa Monica Pier ] ]\t[IN:SEND_MESSAGE [SL:CONTENT_EXACT what time they want to go to the Santa Monica Pier ] ]\tmessaging\ten_XX\t(send-01\n      :ARG0 (you)\n      :ARG1 (message\n             :ARG0 (ask-01\n                    :ARG0 (they)\n                    :ARG1 (what\n                           :mod (time)))\n             :mod (to\n                   :name (Santa Monica Pier))))"}{"utterance": "Anything interesting in the news?", "AMR Graph": "Anything interesting in the news?\t[IN:GET_STORIES_NEWS [SL:NEWS_REFERENCE interesting ] [SL:NEWS_TYPE news ] ]\t[IN:GET_STORIES_NEWS [SL:NEWS_REFERENCE interesting ] [SL:NEWS_TYPE news ] ]\tnews\ten_XX\t(c / call-01 \n      :ARG0 (a / anything)\n      :ARG1 (i / interesting \n                  :polarity (n / negative)\n                  :domain (n2 / news)))"}{"utterance": "display video messages from my cousin Fernando", "AMR Graph": "display video messages from my cousin Fernando\t[IN:GET_MESSAGE [SL:TYPE_CONTENT video ] [SL:SENDER my cousin Fernando ] ]\t[IN:GET_MESSAGE [SL:TYPE_CONTENT video ] [SL:SENDER [IN:GET_CONTACT [SL:CONTACT_RELATED my ] [SL:TYPE_RELATION cousin ] [SL:CONTACT Fernando ] ] ] ]\tmessaging\ten_XX\t(display :ARG0 (video-message :ARG0 (cousin :poss my) :ARG1 Fernando))"}{"utterance": "Who is jack", "AMR Graph": "Who is jack\t[IN:GET_INFO_CONTACT [SL:CONTACT jack ] ]\t[IN:GET_INFO_CONTACT [SL:CONTACT jack ] ]\tpeople\ten_XX\t(name x)\n(person :op1 x)\n(name y)\n(person :op2 y)\n(person_name :op1 y \"Jack\")\n(identity :op1 x :op2 y)"}{"utterance": "Send me the news from New York University.", "AMR Graph": "Send me the news from New York University.\t[IN:GET_STORIES_NEWS [SL:NEWS_TYPE news ] [SL:NEWS_TOPIC New York University ] ]\t[IN:GET_STORIES_NEWS [SL:NEWS_TYPE news ] [SL:NEWS_TOPIC New York University ] ]\tnews\ten_XX\t(s / send \n      :ARG0 (m / me) \n      :ARG1 (n / news \n              :ARG2 (u / university \n                      :name (n2 / \"New York\"))))"}{"utterance": "Alarm for February 14, 10am", "AMR Graph": "Alarm for February 14, 10am\t[IN:CREATE_ALARM [SL:DATE_TIME for February 14 , 10 am ] ]\t[IN:CREATE_ALARM [SL:DATE_TIME for February 14 , 10 am ] ]\talarm\ten_XX\t(alarm :time \"February 14, 10am\")"}{"utterance": "please give me a news update", "AMR Graph": "please give me a news update\t[IN:GET_STORIES_NEWS [SL:NEWS_TYPE news ] ]\t[IN:GET_STORIES_NEWS [SL:NEWS_TYPE news ] ]\tnews\ten_XX\t(n / news-update\n   :arg0 (y / you)\n   :arg1 (g / give-01\n             :arg0 y))"}{"utterance": "What soccer matches are coming up tonight", "AMR Graph": "What soccer matches are coming up tonight\t[IN:GET_EVENT [SL:CATEGORY_EVENT soccer matches ] [SL:DATE_TIME tonight ] ]\t[IN:GET_EVENT [SL:CATEGORY_EVENT soccer matches ] [SL:DATE_TIME tonight ] ]\tevent\ten_XX\t(c / check-01 \n    :arg1 (s / soccer-match \n            :quant (u / upcoming) \n            :time (t / tonight)))"}