I want to listen to Justin Bieber's latest album	[IN:PLAY_MUSIC [SL:MUSIC_ARTIST_NAME Justin Bieber ] [SL:MUSIC_TYPE album ] ]	[IN:PLAY_MUSIC [SL:MUSIC_ARTIST_NAME Justin Bieber ] [SL:MUSIC_TYPE album ] ]	music	en_XX	'(w / want-01\n      :ARG0 (i / i)\n      :ARG1 (l / listen-01\n                  :ARG0 i\n                  :ARG1 (a / album\n                             :mod (l2 / latest)\n                             :name (n / name\n                                         :op1 "Justin"\n                                         :op2 "Bieber"))))'
resume the baking timer	[IN:RESUME_TIMER [SL:METHOD_TIMER timer ] ]	[IN:RESUME_TIMER [SL:METHOD_TIMER timer ] ]	timer	en_XX	'(This sentence is too short to produce a clear and complete AMR graph representation as it lacks sufficient contextual information and predicates to be properly classified. Please provide a longer and more detailed sentence for me to generate an accurate and meaningful AMR graph representation.)'
how many calories are in tomato sauce	[IN:GET_INFO_RECIPES [SL:RECIPES_ATTRIBUTE how many ] [SL:RECIPES_UNIT_NUTRITION calories ] [SL:RECIPES_DISH tomato sauce ] ]	[IN:GET_INFO_RECIPES [SL:RECIPES_ATTRIBUTE how many ] [SL:RECIPES_UNIT_NUTRITION calories ] [SL:RECIPES_DISH tomato sauce ] ]	recipes	en_XX	'(c / calorie \n     :quant  (m / many)\n     :polarity - \n     :in  (s / sauce \n           :mod (t / tomato)))'
Set the timer for 30 min. I do not want to leave the hair color in for too long	[IN:CREATE_TIMER [SL:METHOD_TIMER timer ] [SL:DATE_TIME for 30 min ] ]	[IN:CREATE_TIMER [SL:METHOD_TIMER timer ] [SL:DATE_TIME for 30 min ] ]	timer	en_XX	'(set \n  :op1 (timer \n          :quant 30 \n          :unit (min))\n  :op2 (want \n          :ARG1 (leave \n                  :ARG1 (hair-color) \n                  :ARG2 long)))'
find me art majors from Stanford	[IN:GET_CONTACT [SL:MAJOR art ] [SL:SCHOOL Stanford ] ]	[IN:GET_CONTACT [SL:MAJOR art ] [SL:SCHOOL Stanford ] ]	people	en_XX	'(c / command\n      :rel "imperative"\n      :arg0 (p / person\n             :name "me")\n      :arg1 (f / find-01\n             :arg0 (m / major\n                    :name "art"\n                    :mod (u / university\n                           :name "Stanford"))))'
Yesterday was awfully hot and I would like to know what the yesterday's temperature was	[IN:GET_WEATHER [SL:DATE_TIME Yesterday ] [SL:WEATHER_ATTRIBUTE hot ] [SL:DATE_TIME yesterday ] ]	[IN:GET_WEATHER [SL:DATE_TIME Yesterday ] [SL:WEATHER_ATTRIBUTE hot ] [SL:DATE_TIME yesterday ] ]	weather	en_XX	'(c / condition\n      :polarity -\n      :nsubj (y / yesterday)\n      :domain (h / hot\n                  :degree (a / awfully))\n      :purpose (k / know\n                  :ARG0 (i / I)\n                  :ARG1 (t / temperature\n                              :time (y2 / yesterday))))'
please dial Ryann Small right away	[IN:CREATE_CALL [SL:CONTACT Ryann Small ] ]	[IN:CREATE_CALL [SL:CONTACT Ryann Small ] ]	calling	en_XX	'(d / dial\n      :ARG0 (y / you)\n      :ARG1 (p / phone\n                  :mod (r / person\n                              :name "Ryann Small")))'
Subtract 30 minutes from my timer	[IN:SUBTRACT_TIME_TIMER [SL:DATE_TIME 30 minutes ] [SL:METHOD_TIMER timer ] ]	[IN:SUBTRACT_TIME_TIMER [SL:DATE_TIME 30 minutes ] [SL:METHOD_TIMER timer ] ]	timer	en_XX	'(subtract \n     :arg1 (timer \n                :possessive my) \n     :arg2 (measure \n                :unit minute \n                :quant 30))'
What kind of event is Oktoberfest?	[IN:GET_CATEGORY_EVENT [SL:TITLE_EVENT Oktoberfest ] ]	[IN:GET_CATEGORY_EVENT [SL:TITLE_EVENT Oktoberfest ] ]	event	en_XX	'(c / kind-event \n      :event     (e2 / oktoberfest))'
respond interested to Open Stage NYC	[IN:SET_RSVP_INTERESTED [SL:TITLE_EVENT Open Stage NYC ] ]	[IN:SET_RSVP_INTERESTED [SL:TITLE_EVENT Open Stage NYC ] ]	event	en_XX	'(c/respond-01 \n    :ARG0 (c/you) \n    :ARG1 (c/interested-01 \n             :ARG0 (c/you) \n             :ARG1 (c/Open_Stage_NYC)))'
What's the address of Mike's current employer?	[IN:GET_LOCATION [SL:CONTACT Mike ] ]	[IN:GET_LOCATION [SL:CONTACT Mike ] ]	people	en_XX	'(s / address\n      :wh-question t\n      :arg1 (p / employer\n            :poss (n / mike)\n            :mod (c / current)))'
Seek all available	[IN:GET_AVAILABILITY ]	[IN:GET_AVAILABILITY ]	calling	en_XX	'(c / seek-01\n    :ARG1 (x / you)\n    :ARG2 (a / all\n           :mod (a2 / available)))'
any new news of donald trump	[IN:GET_STORIES_NEWS [SL:NEWS_REFERENCE new ] [SL:NEWS_TYPE news ] [SL:NEWS_TOPIC donald trump ] ]	[IN:GET_STORIES_NEWS [SL:NEWS_REFERENCE new ] [SL:NEWS_TYPE news ] [SL:NEWS_TOPIC donald trump ] ]	news	en_XX	'(c / capture-01\n      :ARG1 (n / news\n            :mod (n2 / new))\n      :ARG2 (p / person\n            :name "Donald Trump"))'
Remove my reminder for dinner on Wednesday.	[IN:DELETE_REMINDER [SL:PERSON_REMINDED my ] [SL:TODO dinner ] [SL:DATE_TIME on Wednesday ] ]	[IN:DELETE_REMINDER [SL:PERSON_REMINDED my ] [SL:TODO dinner ] [SL:DATE_TIME on Wednesday ] ]	reminder	en_XX	'(p / remove\n      :agent (i / i)\n      :theme (r / reminder\n                  :poss (m / my)\n                  :topic "dinner on Wednesday"))'
Remove work reminders.	[IN:DELETE_REMINDER [SL:TODO work ] ]	[IN:DELETE_REMINDER [SL:TODO work ] ]	reminder	en_XX	'(c / cause-01\n      :ARG0 (r / remove-01\n                  :ARG1 (w / work)\n                  :ARG2 (r2 / reminder))\n      :ARG1 (a / agent\n                  :ARG0 r))'
How do you mix a martini	[IN:GET_INFO_RECIPES [SL:RECIPES_DISH martini ] ]	[IN:GET_INFO_RECIPES [SL:RECIPES_DISH martini ] ]	recipes	en_XX	'(source / speech)\n  (s / sequence\n    :first (h / how)\n    :rest (m / mix\n            :agent (y / you)\n            :object (m2 / martini)))'
what temperature is lamb cooked	[IN:GET_INFO_RECIPES [SL:RECIPES_ATTRIBUTE temperature ] [SL:RECIPES_INCLUDED_INGREDIENT lamb ] ]	[IN:GET_INFO_RECIPES [SL:RECIPES_ATTRIBUTE temperature ] [SL:RECIPES_INCLUDED_INGREDIENT lamb ] ]	recipes	en_XX	'(c / cook-01\n      :ARG1 (l / lamb)\n      :ARGM-MNR (t / temperature))'
Could you connect me to Magic: The Gathering on Slack please	[IN:CREATE_CALL [SL:GROUP Magic : The Gathering ] [SL:NAME_APP Slack ] ]	[IN:CREATE_CALL [SL:GROUP Magic : The Gathering ] [SL:NAME_APP Slack ] ]	calling	en_XX	'(could :modality "ability"\n       :arg0 (you)\n       :arg1 (connect \n              :arg0 (me)\n              :to (slack\n                  :name "Magic: The Gathering")))'
Shuffle the channels.	[IN:START_SHUFFLE_MUSIC [SL:MUSIC_TYPE channels ] ]	[IN:START_SHUFFLE_MUSIC [SL:MUSIC_TYPE channels ] ]	music	en_XX	'(c / shuffle-01 \n        :ARG0 (you) \n        :ARG1 (c2 / channel \n                :quant  pl \n                :ARG0-of (s / switch-01)))'
what is the weather locally	[IN:GET_WEATHER [SL:LOCATION locally ] ]	[IN:GET_WEATHER [SL:LOCATION locally ] ]	weather	en_XX	'(w / weather-01\n      :polarity yes\n      :domain (l / locality\n                :name (n / name\n                        :op1 "locally")))'
Get my video messages from Julia Walters and Sparks	[IN:GET_MESSAGE [SL:TYPE_CONTENT video ] [SL:RECIPIENT Julia Walters ] [SL:RECIPIENT Sparks ] ]	[IN:GET_MESSAGE [SL:TYPE_CONTENT video ] [SL:RECIPIENT Julia Walters ] [SL:RECIPIENT Sparks ] ]	messaging	en_XX	'(c / communicate\n      :medium (v / video)\n      :patient (p / person \n                    :name "Julia Walters"\n                    :mod (p2 / person :name "Sparks"))\n      :beneficiary (p3 / person :role "my"))'
play me some country	[IN:PLAY_MUSIC [SL:MUSIC_GENRE country ] ]	[IN:PLAY_MUSIC [SL:MUSIC_GENRE country ] ]	music	en_XX	'(c / play\n      :agent (i / me)\n      :theme (s / some\n                 :op1 (c2 / country)))'
The name of my friend that works at Starbucks	[IN:GET_CONTACT [SL:CONTACT_RELATED my ] [SL:TYPE_RELATION friend ] [SL:EMPLOYER Starbucks ] ]	[IN:GET_CONTACT [SL:CONTACT_RELATED my ] [SL:TYPE_RELATION friend ] [SL:EMPLOYER Starbucks ] ]	people	en_XX	'(c / coffee-shop\n      :name (n / name\n                  :poss (i / i))\n      :employee (f / friend\n                        :poss i\n                        :employed (w / work-01\n                                          :mode "-ing"\n                                          :location (s / starbucks))))'
can you tell me the most recent news stories	[IN:GET_STORIES_NEWS [SL:DATE_TIME the most recent ] [SL:NEWS_TYPE news stories ] ]	[IN:GET_STORIES_NEWS [SL:DATE_TIME the most recent ] [SL:NEWS_TYPE news stories ] ]	news	en_XX	'(c / can \n    :ARG0 (y / you)\n    :ARG1 (t / tell \n              :ARG0 y\n              :ARG1 (s / story \n                        :time (m / most \n                                  :degree (r / recent)\n                        :topic (n / news))))'
Set me an alarm at 4PM to call my mum.	[IN:CREATE_ALARM [SL:DATE_TIME at 4 PM ] [SL:ALARM_NAME call my mum ] ]	[IN:CREATE_ALARM [SL:DATE_TIME at 4 PM ] [SL:ALARM_NAME call my mum ] ]	alarm	en_XX	'(call-01\n    :time (time-of-day :hour 16 :minute 0)\n    :arg0 (me)\n    :arg1 (mum))'
at what temperature do you cook baked chicken at	[IN:GET_INFO_RECIPES [SL:RECIPES_ATTRIBUTE temperature ] [SL:RECIPES_DISH baked chicken ] ]	[IN:GET_INFO_RECIPES [SL:RECIPES_ATTRIBUTE temperature ] [SL:RECIPES_DISH baked chicken ] ]	recipes	en_XX	'(c / cook-01   \n     :ARG1 (y / you)\n     :ARG2 (b / bake-01 \n               :ARG1 (c2 / chicken-01) \n               :prep-at (t / temperature)))'
Friends of Adelaide's	[IN:GET_CONTACT [SL:TYPE_RELATION Friends ] [SL:CONTACT_RELATED Adelaide ] ]	[IN:GET_CONTACT [SL:TYPE_RELATION Friends ] [SL:CONTACT_RELATED Adelaide ] ]	people	en_XX	'(c / connective\n      :op1 (f / friend\n            :poss (a / Adelaide)))'
How many calories are in a full pizza pie?	[IN:GET_INFO_RECIPES [SL:RECIPES_ATTRIBUTE How many ] [SL:RECIPES_UNIT_NUTRITION calories ] [SL:RECIPES_DISH pizza pie ] ]	[IN:GET_INFO_RECIPES [SL:RECIPES_ATTRIBUTE How many ] [SL:RECIPES_UNIT_NUTRITION calories ] [SL:RECIPES_DISH pizza pie ] ]	recipes	en_XX	'(c / calories\n      :quant (m / many)\n      :in\n        (p / pizza\n               :mod (f / full)))'
remind me to go left at the light	[IN:CREATE_REMINDER [SL:PERSON_REMINDED me ] [SL:TODO go left at the light ] ]	[IN:CREATE_REMINDER [SL:PERSON_REMINDED me ] [SL:TODO go left at the light ] ]	reminder	en_XX	'(c / remind-01\n      :ARG0 (I)\n      :ARG1 (g / go-01\n            :ARG1-of (r / remember-01)\n            :mod (l / left)\n            :location (l2 / light)))'
whatsapp video call Lucy Hoffman	[IN:CREATE_CALL [SL:NAME_APP whatsapp ] [SL:CONTACT Lucy Hoffman ] ]	[IN:CREATE_CALL [SL:NAME_APP whatsapp ] [SL:CONTACT Lucy Hoffman ] ]	calling	en_XX	'(c / call-01\n      :ARG0 (p / person :name "Lucy Hoffman")\n      :medium (v / video-communication)\n      :conveyance (w / whatsapp))'
Concerts this weekend	[IN:GET_EVENT [SL:CATEGORY_EVENT Concerts ] [SL:DATE_TIME this weekend ] ]	[IN:GET_EVENT [SL:CATEGORY_EVENT Concerts ] [SL:DATE_TIME this weekend ] ]	event	en_XX	'(c / concert-01\n      :time (t / weekend))'
Is Nick Foles married?	[IN:GET_LIFE_EVENT [SL:CONTACT Nick Foles ] [SL:LIFE_EVENT married ] ]	[IN:GET_LIFE_EVENT [SL:CONTACT Nick Foles ] [SL:LIFE_EVENT married ] ]	people	en_XX	'(e / married  \n      :ARG0 (p / person \n              :name "Nick Foles"))'
Give me CNN headlines	[IN:GET_STORIES_NEWS [SL:NEWS_SOURCE CNN ] [SL:NEWS_TYPE headlines ] ]	[IN:GET_STORIES_NEWS [SL:NEWS_SOURCE CNN ] [SL:NEWS_TYPE headlines ] ]	news	en_XX	'(c / command\n    :type question\n    :ARG0 (y / you)\n    :ARG1 (h / headlines\n        :op1 (n / network\n            :wiki "Cable News Network"\n            :name (n2 / name\n                :op1 "CNN"))))'
all James friends	[IN:GET_CONTACT [SL:CONTACT_RELATED James ] [SL:TYPE_RELATION friends ] ]	[IN:GET_CONTACT [SL:CONTACT_RELATED James ] [SL:TYPE_RELATION friends ] ]	people	en_XX	'(c / conjunction\n      :op1 (a / all-quantifier\n            :op1 (f / friend\n                  :arg0 (j / person\n                        :name "James"))))'
set my timer for a 35 minute baking time	[IN:CREATE_TIMER [SL:METHOD_TIMER timer ] [SL:DATE_TIME 35 minute ] ]	[IN:CREATE_TIMER [SL:METHOD_TIMER timer ] [SL:DATE_TIME 35 minute ] ]	timer	en_XX	'(set :time-entity (timer :setting (bake :duration 35)))'
Change to video call	[IN:UPDATE_METHOD_CALL ]	[IN:UPDATE_METHOD_CALL ]	calling	en_XX	'(c / change-01\n      :purpose (v / video_call-01))'
create a conference call reminder to all my subornants.	[IN:CREATE_REMINDER [SL:TODO conference call ] [SL:PERSON_REMINDED all my subornants ] ]	[IN:CREATE_REMINDER [SL:TODO [IN:CREATE_CALL ] ] [SL:PERSON_REMINDED all my subornants ] ]	reminder	en_XX	'(c / create-01\n      :ARG0 (i / i)\n      :ARG1 (r / reminder\n            :ARG0 (c2 / call\n                  :ARG1 (g / group\n                        :mod (s / subordinate\n                              :poss (m / my)))\n                  :mod (co / conference))))'
Please give me the local news.	[IN:GET_STORIES_NEWS [SL:NEWS_CATEGORY local ] [SL:NEWS_TYPE news ] ]	[IN:GET_STORIES_NEWS [SL:NEWS_CATEGORY local ] [SL:NEWS_TYPE news ] ]	news	en_XX	'(c / command\n      :subject (y / you)\n      :object (n / news\n                  :mod (l / local)))'
Turn on all alarms	[IN:CREATE_ALARM [SL:AMOUNT all ] ]	[IN:CREATE_ALARM [SL:AMOUNT all ] ]	alarm	en_XX	'(t / turn-01\n   :ARG0 (a / alarm\n             :mod (a2 / all)))'
What is the recipe for Pico de Gallo	[IN:GET_RECIPES [SL:RECIPES_DISH Pico de Gallo ] ]	[IN:GET_RECIPES [SL:RECIPES_DISH Pico de Gallo ] ]	recipes	en_XX	'(c / ask\n      :arg0 (w / what)\n      :arg1 (r / recipe\n            :ARG0-of (f / for)\n            :topic (p / pico_de_gallo)))'
How much longer do I have	[IN:GET_TIMER ]	[IN:GET_TIMER ]	timer	en_XX	'(time\n      :quant longer\n      :polarity positive\n      :mod (have /pronoun_1))'
Delete my reminder to send a gift to Brent, it's already done	[IN:DELETE_REMINDER [SL:PERSON_REMINDED my ] [SL:TODO send a gift to Brent ] ]	[IN:DELETE_REMINDER [SL:PERSON_REMINDED my ] [SL:TODO send a gift to Brent ] ]	reminder	en_XX	'(d / delete\n      :ARG0 (m / my)\n      :ARG1 (r / reminder\n                  :ARG1-of (s / send\n                                      :ARG1 (g / gift)\n                                      :ARG2 (b / brent)))\n      :ARG2 (a / already\n                  :polarity -\n                  :degree done))'
delete all rap songs.	[IN:REMOVE_FROM_PLAYLIST_MUSIC [SL:MUSIC_GENRE rap ] [SL:MUSIC_TYPE songs ] ]	[IN:REMOVE_FROM_PLAYLIST_MUSIC [SL:MUSIC_GENRE rap ] [SL:MUSIC_TYPE songs ] ]	music	en_XX	'(delete-01\n  :ARG0 (you)\n  :ARG1 (all\n          :op1 (song\n                 :mod (rap))))'
Could you please give weather information for Italy	[IN:GET_WEATHER [SL:LOCATION Italy ] ]	[IN:GET_WEATHER [SL:LOCATION Italy ] ]	weather	en_XX	'(could\n     :ARG0 (you)\n     :ARG1 (give\n              :ARG0 you\n              :ARG2 (weather-information\n                        :mod (for Italy))))'
Start timer again.	[IN:RESTART_TIMER [SL:METHOD_TIMER timer ] ]	[IN:RESTART_TIMER [SL:METHOD_TIMER timer ] ]	timer	en_XX	'(S (start-event :arg0 (timer-entity :name "timer") :time (again-interval)))'
hang up to end the call	[IN:END_CALL ]	[IN:END_CALL ]	calling	en_XX	'(s / hang-up-01 \n      :ARG1 (c / call \n            :ARG0-of (e / end-01)))'
Set a reminder to call my dad at 5:00 to ask about his doctor's appointment.	[IN:CREATE_REMINDER [SL:TODO call my dad at 5 : 00 to ask about his doctor 's appointment ] ]	[IN:CREATE_REMINDER [SL:TODO [IN:GET_TODO [SL:TODO [IN:CREATE_CALL [SL:CONTACT [IN:GET_CONTACT [SL:CONTACT_RELATED my ] [SL:TYPE_RELATION dad ] ] ] ] ] [SL:DATE_TIME at 5 : 00 ] [SL:TODO ask about his doctor 's appointment ] ] ] ]	reminder	en_XX	'(set-01\n      :ARG0 (reminder-02\n                :purpose (call-03\n                              :ARG0 (I-04)\n                              :ARG1 (dad-05)\n                              :time (time-06\n                                        :op1 "5:00")\n                              :topic (appointment-08\n                                          :ARG0 dad-05\n                                          :topic (doctor-09))))\n                :time (time-06\n                          :op1 "5:00")))\n                          \nNote: This AMR graph representation is based on the assumption that the system is trained on Neo-Davidsonian format.'
When did Sam get his diploma?	[IN:GET_EDUCATION_TIME [SL:CONTACT Sam ] [SL:EDUCATION_DEGREE diploma ] ]	[IN:GET_EDUCATION_TIME [SL:CONTACT Sam ] [SL:EDUCATION_DEGREE diploma ] ]	people	en_XX	'(time-of-event :op1 (get-01 :ARG0 Sam :ARG1 diploma))'
Set an Early bird alarm for tomorrow morning at six.	[IN:CREATE_ALARM [SL:ALARM_NAME Early bird ] [SL:DATE_TIME for tomorrow morning at six ] ]	[IN:CREATE_ALARM [SL:ALARM_NAME Early bird ] [SL:DATE_TIME for tomorrow morning at six ] ]	alarm	en_XX	'(c / set\n      :ARG0 (y / you)\n      :ARG1 (a / alarm\n                :mod (e / early)\n                :time (t / time\n                         :op1 tomorrow\n                         :op2 (m / morning)))\n      :ARG2 (s / six))'
Do any of my friends attend Eastern?	[IN:GET_CONTACT [SL:CONTACT_RELATED my ] [SL:TYPE_RELATION friends ] [SL:SCHOOL Eastern ] ]	[IN:GET_CONTACT [SL:CONTACT_RELATED my ] [SL:TYPE_RELATION friends ] [SL:SCHOOL Eastern ] ]	people	en_XX	'(s / attend-01\n      :ARG0 (f / friend\n             :poss (m / my))\n      :ARG1 (e / eastern))'
leave current call and switch to new call	[IN:SWITCH_CALL ]	[IN:SWITCH_CALL ]	calling	en_XX	'(S / switch-01\n      :ARG0 (l / leave-01\n                  :ARG1 (c / call)\n                  :ARG2 (c2 / call))\n      :ARG1 c2)'
Any news on the marijuana legalization in Sonoma County	[IN:GET_STORIES_NEWS [SL:NEWS_TYPE news ] [SL:NEWS_TOPIC marijuana legalization in Sonoma County ] ]	[IN:GET_STORIES_NEWS [SL:NEWS_TYPE news ] [SL:NEWS_TOPIC marijuana legalization in Sonoma County ] ]	news	en_XX	'(c / county \n      :name "Sonoma"\n      :location (l / location)\n      :legalization (l2 / legalize \n                            :item (m / marijuana))\n      :information (n / news \n                            :topic (l2)))'
Set alarm every minutes for 15 minutes	[IN:CREATE_ALARM [SL:PERIOD every minutes ] [SL:DATE_TIME for 15 minutes ] ]	[IN:CREATE_ALARM [SL:PERIOD every minutes ] [SL:DATE_TIME for 15 minutes ] ]	alarm	en_XX	'(cycle\n       :init (set-01\n                   :polarity +\n                   :ARG0 (alarm-02\n                              :mod (every-03\n                                        :mod minute)))\n       :duration (15-04\n                      :mod minute)))'
Tell Jimmy the puppet show will be tonight at the local elementary school.	[IN:SEND_MESSAGE [SL:RECIPIENT Jimmy ] [SL:CONTENT_EXACT the puppet show will be tonight at the local elementary school ] ]	[IN:SEND_MESSAGE [SL:RECIPIENT Jimmy ] [SL:CONTENT_EXACT the puppet show will be tonight at the local elementary school ] ]	messaging	en_XX	'(t / tell-01\n      :ARG0 (s / speaker)\n      :ARG1 (p / person :name "Jimmy")\n      :ARG2 (s2 / show\n            :mod (p2 / puppet)\n            :time (t2 / tonight)\n            :location (s3 / school\n                  :mod (e / elementary)\n                  :mod (l / local))))'
Give me the local news for New York.	[IN:GET_STORIES_NEWS [SL:NEWS_CATEGORY local ] [SL:NEWS_TYPE news ] [SL:NEWS_TOPIC New York ] ]	[IN:GET_STORIES_NEWS [SL:NEWS_CATEGORY local ] [SL:NEWS_TYPE news ] [SL:NEWS_TOPIC New York ] ]	news	en_XX	'(c / communicate-01\n      :ARG0 (m / I)\n      :ARG1 (n / news\n               :mod (l / location\n                        :wiki "New York")))'
Delete the reminder to make plan reservations for Christmas.	[IN:DELETE_REMINDER [SL:TODO make plan reservations for Christmas ] ]	[IN:DELETE_REMINDER [SL:TODO make plan reservations for Christmas ] ]	reminder	en_XX	'(d / delete \n      :ARG0 (y / you)\n      :ARG1 (r / reminder \n              :time (n / now)\n              :topic (m / make \n                        :ARG0 y\n                        :ARG1 (p / plan \n                                :ARG0 y\n                                :ARG1 (r2 / reservation \n                                        :ARG0 p\n                                        :date (c / Christmas))))))'
Alarm must be set for tomorrow	[IN:CREATE_ALARM [SL:DATE_TIME for tomorrow ] ]	[IN:CREATE_ALARM [SL:DATE_TIME for tomorrow ] ]	alarm	en_XX	'(set-alarm\n     :time tomorrow)'
add 28 minutes to the stop showering timer	[IN:ADD_TIME_TIMER [SL:DATE_TIME 28 minutes ] [SL:TIMER_NAME stop showering ] [SL:METHOD_TIMER timer ] ]	[IN:ADD_TIME_TIMER [SL:DATE_TIME 28 minutes ] [SL:TIMER_NAME stop showering ] [SL:METHOD_TIMER timer ] ]	timer	en_XX	'(add-event :op1 (stop-showering-timer-entity :quant 1) :op2 (time-entity :number 28 :unit "minute"))'
i would like to message the classmate thread message	[IN:SEND_MESSAGE [SL:GROUP classmate ] ]	[IN:SEND_MESSAGE [SL:GROUP classmate ] ]	messaging	en_XX	'(c / communicate-01\n      :agent (i / pronoun)\n      :theme (m / message\n                  :topic (t / thread)\n                  :medium (m2 / text)\n                  :mod (l / like))\n      :recipient (c2 / classmate))'
Fast forward that song	[IN:FAST_FORWARD_MUSIC [SL:MUSIC_TYPE song ] ]	[IN:FAST_FORWARD_MUSIC [SL:MUSIC_TYPE song ] ]	music	en_XX	'(c / continue-01 \n    :subject (y / you) \n    :object (s / song \n        :mod (f / fast)) \n    :time (b / before \n        :op1 (n / now)))'
What is the recipe for fettuccine Alfredo	[IN:GET_RECIPES [SL:RECIPES_DISH fettuccine Alfredo ] ]	[IN:GET_RECIPES [SL:RECIPES_DISH fettuccine Alfredo ] ]	recipes	en_XX	'(name / ask\n      :ARG0 (person / pronoun :value "you")\n      :ARG1 (recipe / name :name "fettuccine Alfredo"))'
Things going on in Ft Worth this weekend	[IN:GET_EVENT [SL:LOCATION Ft Worth ] [SL:DATE_TIME this weekend ] ]	[IN:GET_EVENT [SL:LOCATION Ft Worth ] [SL:DATE_TIME this weekend ] ]	event	en_XX	'(c / cause-01   \n      :arg0 (t / thing  \n                  :mod (g / go-00\n                             :mod (o / on  \n                                       :op1 (w / weekend)))  \n                  :mod (F / Ft_Worth)))'
Is there any sports match in November	[IN:GET_EVENT [SL:CATEGORY_EVENT sports match ] [SL:DATE_TIME in November ] ]	[IN:GET_EVENT [SL:CATEGORY_EVENT sports match ] [SL:DATE_TIME in November ] ]	event	en_XX	'(c / check-01\n    :polarity interrogative\n    :ARG1 (s / sport-event\n        :time (m / month-entity\n            :name "November")))'
start a call with stepsisters	[IN:CREATE_CALL [SL:CONTACT stepsisters ] ]	[IN:CREATE_CALL [SL:CONTACT [IN:GET_CONTACT [SL:TYPE_RELATION stepsisters ] ] ] ]	calling	en_XX	'(start \n  :ARG0 (call\n           :ARG1 (stepsisters)))'
Display reminders for student loans payments including the dates and repayment links	[IN:GET_REMINDER [SL:METHOD_RETRIEVAL_REMINDER Display ] [SL:TODO student loans payments including the dates and repayment links ] ]	[IN:GET_REMINDER [SL:METHOD_RETRIEVAL_REMINDER Display ] [SL:TODO student loans payments including the dates and repayment links ] ]	reminder	en_XX	'(d / display \n      :ARG1 (r / reminders \n            :mod (p / payment \n                  :ARG1 (l / loan \n                        :mod (s / student))) \n            :mod (i / include \n                  :ARG1 (d2 / date))) \n      :ARG2 (r2 / repayment-link))'
What timers do i have running	[IN:GET_TIMER [SL:METHOD_TIMER timers ] ]	[IN:GET_TIMER [SL:METHOD_TIMER timers ] ]	timer	en_XX	'(c / claim-01\n      :ARG0 (i / i)\n      :ARG1 (r / run-01\n            :ARG0 i\n            :ARG1 (t / timer\n                  :ARG0 i\n                  :mod (d / do-05))))'
Send a message asking what time they want to go to the Santa Monica Pier?	[IN:SEND_MESSAGE [SL:CONTENT_EXACT what time they want to go to the Santa Monica Pier ] ]	[IN:SEND_MESSAGE [SL:CONTENT_EXACT what time they want to go to the Santa Monica Pier ] ]	messaging	en_XX	'(send-01\n      :ARG0 (you)\n      :ARG1\n        (message\n            :ARG0 (you)\n            :ARG1\n              (what-time\n                  :ARG1 (they)\n                  :mod (want\n                          :ARG1 (go-01\n                                  :ARG1 (Santa-Monica-Pier))))))'
Anything interesting in the news?	[IN:GET_STORIES_NEWS [SL:NEWS_REFERENCE interesting ] [SL:NEWS_TYPE news ] ]	[IN:GET_STORIES_NEWS [SL:NEWS_REFERENCE interesting ] [SL:NEWS_TYPE news ] ]	news	en_XX	'(c / communicate-01  \n      :ARG0 (a / anyone) \n      :ARG1  \n           (i / interest-01  \n                :ARG0 a \n                :ARG1 (n / news)))'
display video messages from my cousin Fernando	[IN:GET_MESSAGE [SL:TYPE_CONTENT video ] [SL:SENDER my cousin Fernando ] ]	[IN:GET_MESSAGE [SL:TYPE_CONTENT video ] [SL:SENDER [IN:GET_CONTACT [SL:CONTACT_RELATED my ] [SL:TYPE_RELATION cousin ] [SL:CONTACT Fernando ] ] ] ]	messaging	en_XX	'(s / display\n      :mode imperative\n      :ARG0 (m / message\n              :mod (v / video)\n              :ARG1 (c / cousin\n                        :name "Fernando")\n              :ARG2 (i / I)))'
Who is jack	[IN:GET_INFO_CONTACT [SL:CONTACT jack ] ]	[IN:GET_INFO_CONTACT [SL:CONTACT jack ] ]	people	en_XX	'(node /who\n      :ARG0 (person /Jack\n                :wiki "Jack_(given_name)"))'
Send me the news from New York University.	[IN:GET_STORIES_NEWS [SL:NEWS_TYPE news ] [SL:NEWS_TOPIC New York University ] ]	[IN:GET_STORIES_NEWS [SL:NEWS_TYPE news ] [SL:NEWS_TOPIC New York University ] ]	news	en_XX	'(send :ARG0 (I) :ARG1 (news :ARG0-of (send) :mod (from (New York University))))'
Alarm for February 14, 10am	[IN:CREATE_ALARM [SL:DATE_TIME for February 14 , 10 am ] ]	[IN:CREATE_ALARM [SL:DATE_TIME for February 14 , 10 am ] ]	alarm	en_XX	'(a / alarm\n   :time (t / time\n             :date "February 14"\n             :hour 10\n             :minute 0))'
please give me a news update	[IN:GET_STORIES_NEWS [SL:NEWS_TYPE news ] ]	[IN:GET_STORIES_NEWS [SL:NEWS_TYPE news ] ]	news	en_XX	'(g / give-01 \n   :ARG0 (y / you) \n   :ARG1 (u / update \n             :mod (n / news)))'
What soccer matches are coming up tonight	[IN:GET_EVENT [SL:CATEGORY_EVENT soccer matches ] [SL:DATE_TIME tonight ] ]	[IN:GET_EVENT [SL:CATEGORY_EVENT soccer matches ] [SL:DATE_TIME tonight ] ]	event	en_XX	'(explicit-continuation\n  :domain (today)\n  :time (tonight)\n  :event (match\n           :sport (soccer)\n           :upcoming t)))'
Read Anthony's text to me this morning	[IN:GET_MESSAGE [SL:SENDER Anthony ] [SL:RECIPIENT me ] [SL:DATE_TIME this morning ] ]	[IN:GET_MESSAGE [SL:SENDER Anthony ] [SL:RECIPIENT me ] [SL:DATE_TIME this morning ] ]	messaging	en_XX	'(ref\n  :op1 (read\n         :arg1 (text :poss Anthony)\n         :arg2 me)\n  :time (morning))'
Does Jason live in Richmond?	[IN:GET_LOCATION [SL:CONTACT Jason ] [SL:LOCATION Richmond ] ]	[IN:GET_LOCATION [SL:CONTACT Jason ] [SL:LOCATION Richmond ] ]	people	en_XX	'(l / live-01\n      :ARG0 (p / person :name "Jason")\n      :ARG1 (c / city :name "Richmond"))'
Is there rain forecasted in Panama City, FL next week?	[IN:GET_WEATHER [SL:WEATHER_ATTRIBUTE rain ] [SL:LOCATION Panama City , FL ] [SL:DATE_TIME next week ] ]	[IN:GET_WEATHER [SL:WEATHER_ATTRIBUTE rain ] [SL:LOCATION Panama City , FL ] [SL:DATE_TIME next week ] ]	weather	en_XX	'(d / date-entity :weekday (w / weekday-entity :name "next week"))\n(r / rain-forecast :location (c / city :name "Panama City" :region "FL") :date d)'
What's happening in Baltimore tonight	[IN:GET_EVENT [SL:LOCATION Baltimore ] [SL:DATE_TIME tonight ] ]	[IN:GET_EVENT [SL:LOCATION Baltimore ] [SL:DATE_TIME tonight ] ]	event	en_XX	'(PREDICATE\n  :ARG0 (QUERY\n           :op1 "what"\n           :op2 (PREDICATE\n                   :ARG0 (SELECTOR\n                            :op1 "happen"\n                            :op2 (PREDICATE\n                                    :ARG1 "night"\n                                    :ARG0 (LOC :op1 "Baltimore")))))))'
Start a one hour timer	[IN:CREATE_TIMER [SL:DATE_TIME one hour ] [SL:METHOD_TIMER timer ] ]	[IN:CREATE_TIMER [SL:DATE_TIME one hour ] [SL:METHOD_TIMER timer ] ]	timer	en_XX	'(start :ARG0 (timer :duration (hour :quant 1)))'
What is the temperature in Yucaipa today?	[IN:GET_WEATHER [SL:LOCATION Yucaipa ] [SL:DATE_TIME today ] ]	[IN:GET_WEATHER [SL:LOCATION Yucaipa ] [SL:DATE_TIME today ] ]	weather	en_XX	'(name / temperature\n      :query \n      (op1 / what)\n      :location \n      (op2 / city\n            :name (n / "Yucaipa"))\n      :time \n      (op3 / today))'
How long do I need to cook ground beef for	[IN:GET_INFO_RECIPES [SL:RECIPES_ATTRIBUTE How long ] [SL:RECIPES_DISH ground beef ] ]	[IN:GET_INFO_RECIPES [SL:RECIPES_ATTRIBUTE How long ] [SL:RECIPES_DISH ground beef ] ]	recipes	en_XX	'(time-of (need-01\n                   :ARG1 (cook-02 :ARG0 I\n                                     :ARG1 (ground-beef :wiki "Ground_beef")\n                                     :ARG2 (time-interval :unit "minute"\n                                                                     :quant 30)) \n                   :ARG2 (question :polarity -)))'
how many teaspoons of cinnamon are needed	[IN:GET_INFO_RECIPES [SL:RECIPES_ATTRIBUTE how many ] [SL:RECIPES_UNIT_MEASUREMENT teaspoons ] [SL:RECIPES_INCLUDED_INGREDIENT cinnamon ] ]	[IN:GET_INFO_RECIPES [SL:RECIPES_ATTRIBUTE how many ] [SL:RECIPES_UNIT_MEASUREMENT teaspoons ] [SL:RECIPES_INCLUDED_INGREDIENT cinnamon ] ]	recipes	en_XX	'(cinnamon :quant 1 \n          :unit (teaspoon) \n          :domain (quantity)) \n(need-01 :ARG1 cinnamon \n         :polarity + \n         :quant (number 1))'
Will it be above 11 in degrees Celsius here	[IN:GET_WEATHER [SL:WEATHER_ATTRIBUTE above ] [SL:WEATHER_ATTRIBUTE 11 ] [SL:WEATHER_TEMPERATURE_UNIT Celsius ] [SL:LOCATION here ] ]	[IN:GET_WEATHER [SL:WEATHER_ATTRIBUTE above ] [SL:WEATHER_ATTRIBUTE 11 ] [SL:WEATHER_TEMPERATURE_UNIT Celsius ] [SL:LOCATION here ] ]	weather	en_XX	'(c / question\n      :polarity positive\n      :domain (t / temperature\n                  :degree 11\n                  :unit celsius)\n      :location (h / here))'
set an alarm for 5am named get up	[IN:CREATE_ALARM [SL:DATE_TIME for 5 am ] [SL:ALARM_NAME get up ] ]	[IN:CREATE_ALARM [SL:DATE_TIME for 5 am ] [SL:ALARM_NAME get up ] ]	alarm	en_XX	'(set :alarm (for :time 5am) :name "get up")'
I wanna snooze the alarm to give me 15 more minutes sleep	[IN:SNOOZE_ALARM [SL:DATE_TIME 15 more minutes ] ]	[IN:SNOOZE_ALARM [SL:DATE_TIME 15 more minutes ] ]	alarm	en_XX	'(c / cause-01 \n      :ARG0 (i / i) \n      :ARG1 (s / snooze-01 \n              :ARG0 i \n              :ARG1 (a2 / alarm \n                      :mod (g / give-01 \n                              :ARG0 i \n                              :ARG1 (m / minute \n                                      :quant 15)) \n                      :ARG0-of s)))'
Can you set a reminder to look at flights at 5:30 AM Tuesday?	[IN:CREATE_REMINDER [SL:TODO look at flights ] [SL:DATE_TIME at 5 : 30 AM Tuesday ] ]	[IN:CREATE_REMINDER [SL:TODO look at flights ] [SL:DATE_TIME at 5 : 30 AM Tuesday ] ]	reminder	en_XX	'(c / can-01\n    :ARG0 (y / you)\n    :ARG1 (s / set-01\n            :ARG0 y\n            :ARG1 (r / reminder\n                    :ARG1 (l / look-01\n                            :ARG1 (f / flight\n                                    :time "TUESDAY"\n                                    :ARG1 (a / am\n                                            :mod "05:30"))\n                            :mod (a2 / at))))'
New alarm for film contest tomorrow at 8	[IN:CREATE_ALARM [SL:DATE_TIME tomorrow at 8 ] ]	[IN:CREATE_ALARM [SL:DATE_TIME tomorrow at 8 ] ]	alarm	en_XX	'(c / contest\n    :time (t / tomorrow\n              :time-of-day (a / am\n                              :quant 8))\n    :film (f / film)\n    :alarm (n / new))'
Has co workers chat sent me anything	[IN:GET_MESSAGE [SL:GROUP co workers ] [SL:RECIPIENT me ] ]	[IN:GET_MESSAGE [SL:GROUP co workers ] [SL:RECIPIENT me ] ]	messaging	en_XX	'(c / chat \n    :ARG0 (i / i) \n    :ARG1 (cw / co-worker)) \n(p / send-01 \n    :ARG0 cw \n    :ARG1 i \n    :ARG2 (a / anything)) \n(h / have-03 \n    :ARG0 i \n    :ARG1 p)'
Send Comic Con to Mary	[IN:SHARE_EVENT [SL:TITLE_EVENT Comic Con ] [SL:CONTACT Mary ] ]	[IN:SHARE_EVENT [SL:TITLE_EVENT Comic Con ] [SL:CONTACT Mary ] ]	event	en_XX	'(send\n      :ARG0 (comic_con)\n      :ARG1 (mary)\n)'
change the channel to Spotify	[IN:PLAY_MUSIC [SL:MUSIC_TYPE channel ] [SL:MUSIC_PROVIDER_NAME Spotify ] ]	[IN:PLAY_MUSIC [SL:MUSIC_TYPE channel ] [SL:MUSIC_PROVIDER_NAME Spotify ] ]	music	en_XX	'(change \n    :ARG0 (you)\n    :ARG1 (channel \n              :mod (to Spotify)))'
I want replies from Greg today	[IN:GET_MESSAGE [SL:SENDER Greg ] [SL:DATE_TIME today ] ]	[IN:GET_MESSAGE [SL:SENDER Greg ] [SL:DATE_TIME today ] ]	messaging	en_XX	'(s / want\n      :ARG0 (i / i)\n      :ARG1 (r / reply\n            :ARG0 i\n            :ARG1 (g / named :op1 "Greg")\n            :time (t / today)))'
What is the weather like in Adelaide?	[IN:GET_WEATHER [SL:LOCATION Adelaide ] ]	[IN:GET_WEATHER [SL:LOCATION Adelaide ] ]	weather	en_XX	'(n / ask\n          :ARG0 (p / person)\n          :ARG1 (l / location\n                    :name "Adelaide")\n          :ARG2 (w / weather\n                    :polarity -)))'
things to do this weekend	[IN:GET_EVENT [SL:DATE_TIME this weekend ] ]	[IN:GET_EVENT [SL:DATE_TIME this weekend ] ]	event	en_XX	'(c / weekend\n      :mod (t / thing\n            :ARG1-of (d / do)))'
Play me The Yellow Submarine album please	[IN:PLAY_MUSIC [SL:MUSIC_ALBUM_TITLE The Yellow Submarine ] [SL:MUSIC_TYPE album ] ]	[IN:PLAY_MUSIC [SL:MUSIC_ALBUM_TITLE The Yellow Submarine ] [SL:MUSIC_TYPE album ] ]	music	en_XX	'(c / play\n   :ARG0 (m / me)\n   :ARG1 (a / album\n         :name "The Yellow Submarine")\n   :mod (p / please))'
Let's send my husband a video message response	[IN:SEND_MESSAGE [SL:RECIPIENT my husband ] [SL:TYPE_CONTENT video ] ]	[IN:SEND_MESSAGE [SL:RECIPIENT [IN:GET_CONTACT [SL:CONTACT_RELATED my ] [SL:TYPE_RELATION husband ] ] ] [SL:TYPE_CONTENT video ] ]	messaging	en_XX	'(send-01\n    :ARG0 (let-01)\n    :ARG1 (response\n            :ARG0 (message-01\n                    :ARG0 (video-01)\n                    :ARG1 (me)))\n    :ARG2 (husband\n            :poss (my)))'
Please play 2Pac on Apple Music	[IN:PLAY_MUSIC [SL:MUSIC_ARTIST_NAME 2Pac ] [SL:MUSIC_PROVIDER_NAME Apple ] [SL:MUSIC_TYPE Music ] ]	[IN:PLAY_MUSIC [SL:MUSIC_ARTIST_NAME 2Pac ] [SL:MUSIC_PROVIDER_NAME Apple ] [SL:MUSIC_TYPE Music ] ]	music	en_XX	'(c / command\n      :subject (y / you)\n      :object (p / play\n                  :song (s / song\n                          :artist "2Pac"\n                          :service (a / apple-music))))'
Could you tell me the weather of Colorado?	[IN:GET_WEATHER [SL:LOCATION Colorado ] ]	[IN:GET_WEATHER [SL:LOCATION Colorado ] ]	weather	en_XX	'(could_tell :subject (you) :topic (weather_Colorado))'
Can you play some country music?	[IN:PLAY_MUSIC [SL:MUSIC_GENRE country ] [SL:MUSIC_TYPE music ] ]	[IN:PLAY_MUSIC [SL:MUSIC_GENRE country ] [SL:MUSIC_TYPE music ] ]	music	en_XX	'(c / can-01 \n      :ARG0 (y / you) \n      :ARG1 (p / play-01 \n                :ARG0 y\n                :ARG1 (m / country-music)))'
Will it rain in Las Vegas. NV next week?	[IN:GET_WEATHER [SL:WEATHER_ATTRIBUTE rain ] [SL:LOCATION Las Vegas ] [SL:DATE_TIME next week ] ]	[IN:GET_WEATHER [SL:WEATHER_ATTRIBUTE rain ] [SL:LOCATION Las Vegas ] [SL:DATE_TIME next week ] ]	weather	en_XX	'(c / question\n      :polarity -\n      :ARG1 (r / rain\n            :mod (w / week\n                  :mod (n / next\n                        :name (l / location :wiki "Las_Vegas,_Nevada")))))'
check if katie is online right now	[IN:GET_AVAILABILITY [SL:CONTACT katie ] ]	[IN:GET_AVAILABILITY [SL:CONTACT katie ] ]	calling	en_XX	'(s / check-01\n      :arg0 (p / person :name "Katie")\n      :arg1 (n / now))'
