Temperature manila tonight Celcius	[IN:GET_WEATHER [SL:LOCATION manila ] [SL:DATE_TIME tonight ] [SL:WEATHER_TEMPERATURE_UNIT Celcius ] ]	[IN:GET_WEATHER [SL:LOCATION manila ] [SL:DATE_TIME tonight ] [SL:WEATHER_TEMPERATURE_UNIT Celcius ] ]	weather	en_XX	'(p / temperature\n  :mode expressed\n  :location (c / city :name "Manila")\n  :unit (C / degree-Celsius))'
Find me tennis matches in Seattle this month	[IN:GET_EVENT [SL:CATEGORY_EVENT tennis matches ] [SL:LOCATION Seattle ] [SL:DATE_TIME this month ] ]	[IN:GET_EVENT [SL:CATEGORY_EVENT tennis matches ] [SL:LOCATION Seattle ] [SL:DATE_TIME this month ] ]	event	en_XX	'(find\n      :polarity +\n      :domain (me)\n      :ARG0 (let\n              :ARG0 me)\n      :ARG1 (match\n              :ARG0 (tennis)\n              :location (city-of :Seattle)\n              :time (interval\n                      :op1 (date-entity :month)\n                      :op2 (date-entity :month))\n              )\n      )'
How do I make my own yogurt	[IN:GET_RECIPES [SL:RECIPES_DISH yogurt ] ]	[IN:GET_RECIPES [SL:RECIPES_DISH yogurt ] ]	recipes	en_XX	'(h / have-01\n      :ARG0 (I)\n      :ARG1 (m / make-01\n                  :ARG0 I\n                  :ARG1 (y / yogurt)))'
Tell me the weather for Berlin, Germany	[IN:GET_WEATHER [SL:LOCATION Berlin , Germany ] ]	[IN:GET_WEATHER [SL:LOCATION Berlin , Germany ] ]	weather	en_XX	'(c / command\n      :target (w / weather-forecast\n                  :location (c2 / city\n                                :name "Berlin"\n                                :country-name "Germany"))                  \n      :mode interrogative)'
What temperature should I bake chicken	[IN:GET_INFO_RECIPES [SL:RECIPES_ATTRIBUTE temperature ] [SL:RECIPES_COOKING_METHOD bake ] [SL:RECIPES_INCLUDED_INGREDIENT chicken ] ]	[IN:GET_INFO_RECIPES [SL:RECIPES_ATTRIBUTE temperature ] [SL:RECIPES_COOKING_METHOD bake ] [SL:RECIPES_INCLUDED_INGREDIENT chicken ] ]	recipes	en_XX	'(a / ask-01\n      :subject (i / i)\n      :object (c / chicken)\n      :mod (b / bake-01\n            :mod (t / temperature)))'
What are my reminders for the week.	[IN:GET_REMINDER [SL:PERSON_REMINDED my ] [SL:DATE_TIME for the week ] ]	[IN:GET_REMINDER [SL:PERSON_REMINDED my ] [SL:DATE_TIME for the week ] ]	reminder	en_XX	'(s / seek-01\n       :ARG0 (i / I)\n       :ARG1 (r / reminder-01\n              :ARG0 i\n              :time (w / week)))'
Please set an alarm for 4pm.	[IN:CREATE_ALARM [SL:DATE_TIME for 4 pm ] ]	[IN:CREATE_ALARM [SL:DATE_TIME for 4 pm ] ]	alarm	en_XX	'(set-01 \n    :ARG0 (you) \n    :ARG1 (alarm-02 \n        :time "4pm"))'
I want replies from Greg today	[IN:GET_MESSAGE [SL:SENDER Greg ] [SL:DATE_TIME today ] ]	[IN:GET_MESSAGE [SL:SENDER Greg ] [SL:DATE_TIME today ] ]	messaging	en_XX	'(w / want-01 \n      :ARG0 (i / i)\n      :ARG1 (r / reply \n                  :ARG0 i\n                  :ARG1 (g / person\n                              :name "Greg")\n                  :time (t / today)))'
where is Ines' work place?	[IN:GET_LOCATION [SL:CONTACT Ines ] ]	[IN:GET_LOCATION [SL:CONTACT Ines ] ]	people	en_XX	'(c / ask-01\n      :ARG0 (p / person :name "Ines")\n      :location (w / work\n                  :poss p))'
display video messages from my cousin Fernando	[IN:GET_MESSAGE [SL:TYPE_CONTENT video ] [SL:SENDER my cousin Fernando ] ]	[IN:GET_MESSAGE [SL:TYPE_CONTENT video ] [SL:SENDER [IN:GET_CONTACT [SL:CONTACT_RELATED my ] [SL:TYPE_RELATION cousin ] [SL:CONTACT Fernando ] ] ] ]	messaging	en_XX	'(d / display\n      :ARG1 (v / video)\n      :ARG2 (m / message\n                :ARG1 (o / owner\n                          :ARG1 (c / cousin\n                                    :name "Fernando"))))'
Did my family went to UEL?	[IN:GET_CONTACT [SL:CONTACT_RELATED my ] [SL:TYPE_RELATION family ] [SL:SCHOOL UEL ] ]	[IN:GET_CONTACT [SL:CONTACT_RELATED my ] [SL:TYPE_RELATION family ] [SL:SCHOOL UEL ] ]	people	en_XX	'(assertion\n      :predicate (question\n                   :polarity -\n                   :subject (I)\n                   :predicate (go\n                                :arg0 (family\n                                        :possessor (I))\n                                :arg1 (UEL))))'
swap calls now	[IN:SWITCH_CALL ]	[IN:SWITCH_CALL ]	calling	en_XX	'(swapping \n        :ARG0 (call :op1 now) \n        :ARG1 (call :op1 now))'
Please dial up James Torres, Marissa Welch, and Natasha Fleming	[IN:CREATE_CALL [SL:CONTACT James Torres ] [SL:CONTACT Marissa Welch ] [SL:CONTACT Natasha Fleming ] ]	[IN:CREATE_CALL [SL:CONTACT James Torres ] [SL:CONTACT Marissa Welch ] [SL:CONTACT Natasha Fleming ] ]	calling	en_XX	'(dial :ARG1 (please) :ARG2 (list :op1 (person :name "James Torres") :op2 (person :name "Marissa Welch") :op3 (person :name "Natasha Fleming")))'
Any good shows in Las Vegas next month	[IN:GET_EVENT [SL:LOCATION Las Vegas ] [SL:DATE_TIME next month ] ]	[IN:GET_EVENT [SL:LOCATION Las Vegas ] [SL:DATE_TIME next month ] ]	event	en_XX	'(c / can\n      :modal "any"\n      :polarity -\n      :scope (m / month\n                  :op1 "next"\n                  :op2 (l / Las_Vegas))\n      :topic (s / show\n                  :degree good))'
Cancel all of my reminders for next Friday after 2:00 pm.	[IN:DELETE_REMINDER [SL:AMOUNT all ] [SL:PERSON_REMINDED my ] [SL:DATE_TIME for next Friday after 2 : 00 pm ] ]	[IN:DELETE_REMINDER [SL:AMOUNT all ] [SL:PERSON_REMINDED my ] [SL:DATE_TIME for next Friday after 2 : 00 pm ] ]	reminder	en_XX	'(c / cancel \n      :arg0 (i / i)\n      :arg1 (r / reminder\n                  :mod (t / time :op2 "next Friday after 2:00 pm")))'
please turn the noise off	[IN:SILENCE_ALARM ]	[IN:SILENCE_ALARM ]	alarm	en_XX	'(c / command\n      :subject (y / you)\n      :impoliteness +please\n      :pred-turn-Off (n / noise))'
