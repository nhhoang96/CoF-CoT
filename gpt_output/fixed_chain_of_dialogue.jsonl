{"utterance": "call Nicholas and Natasha", "intent": "get_call,create_call,update_call \nConfidence Scores: 0.8, 0.75, 0.7", "AMR Graph": "(call :get_call \n      :agent (person :name \"I\") \n      :object (list \n                 (person :name \"Nicholas\") \n                 (person :name \"Natasha\")))", "key_phrase": "call, Nicholas, Natasha, I", "slot_type": "Nicholas, attendee\nNatasha, attendee", "pred_lf": "[IN:get_call [SL:attendee Nicholas] [SL:attendee Natasha]]", "gold_lf": "[IN:CREATE_CALL [SL:CONTACT Nicholas ] [SL:CONTACT Natasha ] ]"}
{"utterance": "Give me the most recent NPR news", "intent": "get_details_news, question_news, get_info_recipes\nConfidence scores: 0.9, 0.5, 0.3", "AMR Graph": "(S / give-01\n      :ARG0 (u / you)\n      :ARG1 (n / news\n            :mod (r / recent)\n            :mod (NPR))\n      :mode imperative)", "key_phrase": "most recent NPR news, give, imperative", "slot_type": "(NPR, news_source), (most recent, ordinal)", "pred_lf": "[IN: get_details_news [SL: news_source NPR] [SL: ordinal most recent]]", "gold_lf": "[IN:GET_STORIES_NEWS [SL:DATE_TIME the most recent ] [SL:NEWS_SOURCE NPR ] [SL:NEWS_TYPE news ] ]"}
{"utterance": "What's the work address with zipcode where James work?", "intent": "get_location, get_contact, get_details_news\nConfidence scores: 0.8, 0.6, 0.1", "AMR Graph": "get_location / 0.8\n\n```\n  \t- (d / demand\n      \t:content (a / ask\n        \t:what (a2 / address\n          \t\t:op1 (w / work :name \"James\")\n          \t\t:op2 (z / zipcode)))))\n```\nExplanation: The intent of the sentence is to ask for the work address of James along with the zipcode. The intent type \"get_location\" has the highest confidence score and is used to generate the AMR graph. The graph has a demand node, with content of ask. The ask is about the address of James's work, which has two parts - the work itself (represented as 'w') and the zipcode (represented as 'z'). 'w' has a name attribute, which indicates that James is the one who works at the given address.", "key_phrase": "work address, zipcode, James's work", "slot_type": "work address, location\nzipcode, O\nJames work, contact_related", "pred_lf": "[IN:get_location [SL:contact_related James work] [SL:location work address] [SL:O zipcode]]", "gold_lf": "[IN:GET_LOCATION [SL:CONTACT James ] ]"}
{"utterance": "ring my brother", "intent": "get_call,create_call,answer_call\nConfidence scores: 0.6, 0.2, 0.15", "AMR Graph": "(get-call \n\t:agent (you)\n\t:call-object (person \n\t\t\t:name (brother)))", "key_phrase": "ring, my brother", "slot_type": "(brother, contact)", "pred_lf": "[IN:get_call [SL:contact (brother)]]", "gold_lf": "[IN:CREATE_CALL [SL:CONTACT my brother ] ]"}
{"utterance": "set a timer for my workout right now", "intent": "add_time_timer, create_timer, update_timer\nNumeric confidence scores: 0.8, 0.75, 0.6", "AMR Graph": "(set :op1 (timer \n          :purpose (purpose \n                    :topic my_workout) \n          :start_now))", "key_phrase": "set a timer, my workout, right now.", "slot_type": "(timer_name, method_timer)", "pred_lf": "[IN:add_time_timer [SL:timer_name workout] [SL:method_timer set now]]", "gold_lf": "[IN:CREATE_TIMER [SL:METHOD_TIMER timer ] [SL:TIMER_NAME workout ] ]"}
{"utterance": "call Camilla whatsapp video", "intent": "get_call_contact, create_call, play_media\nConfidence scores:\n0.85, 0.75, 0.6", "AMR Graph": "(get-call-contact :contact \"Camilla\"\n                   :app \"whatsapp\"\n                   :media-type \"video\")", "key_phrase": "call Camilla, whatsapp video", "slot_type": "Camilla, contact_added\nwhatsapp video, method_recipes", "pred_lf": "[IN:get_call_contact [SL:contact_added Camilla] [SL:method_recipes whatsapp video]]", "gold_lf": "[IN:CREATE_CALL [SL:CONTACT Camilla ] [SL:NAME_APP whatsapp ] ]"}
{"utterance": "call Avery M", "intent": "get_call_contact,create_call,cancel_call\nConfidence scores: 0.7, 0.4, 0.3", "AMR Graph": "(get_call_contact\n    :recipient (person\n                    :name \"Avery M\"))", "key_phrase": "call, Avery M", "slot_type": "(Avery M, contact)", "pred_lf": "[IN:get_call_contact [SL:contact Avery M]]", "gold_lf": "[IN:CREATE_CALL [SL:CONTACT Avery M ] ]"}
{"utterance": "what is the next alarm for", "intent": "get_alarm, get_next_alarm, get_reminder\nConfidence scores: 0.9, 0.8, 0.7", "AMR Graph": "(1) Sent: \"What is the next alarm for?\"\nInt: get_next_alarm\nConf: 0.8\n\nAMR:\n(e / GET-NEXT-ALARM\n      :arg1 (i / YOU)\n      :time (n / NEXT)\n      :mod (a / ALARM))", "key_phrase": "next alarm", "slot_type": "(next alarm, alarm_name)", "pred_lf": "[IN:get_next_alarm [SL:alarm_name next_alarm]]", "gold_lf": "[IN:GET_ALARM [SL:ORDINAL next ] ]"}
{"utterance": "Recommend me some Broadway shows in Anchorage for Thursday night", "intent": "get_event,question_music,get_location\nConfidence scores: 0.8, 0.6, 0.4", "AMR Graph": "(get_event\n    :ARG1 (recommend-01\n              :ARG0 (I)\n              :ARG1 (show\n                        :mod (Broadway))\n              :ARG2 (location\n                        :name (Anchorage)\n                        :time \"Thursday night\")))", "key_phrase": "Broadway shows, Anchorage, Thursday night, recommend.", "slot_type": "(Broadway shows, title_event), (Anchorage, location), (Thursday night, date_time)", "pred_lf": "[IN:get_event [SL:title_event Broadway shows] [SL:location Anchorage] \n[SL:date_time Thursday night]]", "gold_lf": "[IN:GET_EVENT [SL:CATEGORY_EVENT Broadway shows ] [SL:LOCATION Anchorage ] [SL:DATE_TIME for Thursday night ] ]"}
{"utterance": "What's news about facebook this week", "intent": "get_stories_news,question_news,get_details_news\nConfidence scores: 0.80, 0.75, 0.60", "AMR Graph": "(get_stories_news\n  :topic (facebook)\n  :time (week))\n\nor\n\n(question_news\n  :content (about facebook)\n  :time (this week))", "key_phrase": "news, facebook, this week", "slot_type": "facebook, news_topic", "pred_lf": "[IN:get_stories_news [SL:facebook], [SL:news_topic]]", "gold_lf": "[IN:GET_STORIES_NEWS [SL:NEWS_TYPE news ] [SL:NEWS_TOPIC facebook ] [SL:DATE_TIME this week ] ]"}
{"utterance": "can you set a warning alarm for 7pm", "intent": "create_alarm (0.95), update_alarm (0.7), snooze_alarm (0.4)", "AMR Graph": "(create_alarm\n      :time (exact \"7pm\")\n      :type (warning)\n    :subject (you))", "key_phrase": "set warning alarm, 7pm.", "slot_type": "(warning alarm, alarm_name), (7pm, date_time)", "pred_lf": "[IN:create_alarm [SL:alarm_name warning alarm] [SL:date_time 7pm]]", "gold_lf": "[IN:CREATE_ALARM [SL:ALARM_NAME warning ] [SL:DATE_TIME for 7 pm ] ]"}
{"utterance": "Tell me about events going on in Crandon this weekend", "intent": "get_event,question_news,get_location\nConfidence scores: 0.8, 0.6, 0.5", "AMR Graph": "(get_event\n     :topic (event\n                  :name \"events\"\n                  :location (location\n                                       :name \"Crandon\"\n                                       :quant (quant\n                                                       :value \"this\"\n                                                       :unit \"weekend\"))))", "key_phrase": "Crandon, events, this weekend", "slot_type": "Crandon, location\nweekend, date_time\nevents, category_event", "pred_lf": "[IN:get_event [SL:location Crandon] [SL:date_time weekend] [SL:category_event events]]", "gold_lf": "[IN:GET_EVENT [SL:LOCATION Crandon ] [SL:DATE_TIME this weekend ] ]"}
{"utterance": "make one timer for four minutes and another for 10 minutes", "intent": "create_timer (0.95), add_time_timer (0.8), update_timer (0.7)", "AMR Graph": "(create_timer\n     :quantity (two)\n     :timer \n       (create\n         :quantity (four)\n         :unit \"minute\"\n         :ordinality \"one\")\n       (create\n         :quantity (ten)\n         :unit \"minute\"\n         :ordinality \"another\")))", "key_phrase": "make timer, four minutes, 10 minutes, one timer, another timer", "slot_type": "(\"timer\", \"method_timer\"), (\"four minutes\", \"amount\"), (\"10 minutes\", \"amount\")", "pred_lf": "[IN:create_timer [SL:method_timer Make] [SL:amount four minutes] [SL:amount 10 minutes]]", "gold_lf": "[IN:CREATE_TIMER [SL:AMOUNT one ] [SL:METHOD_TIMER timer ] [SL:DATE_TIME for four minutes ] [SL:DATE_TIME for 10 minutes ] ]"}
{"utterance": "How do I prepare spaghetti", "intent": "get_info_recipes,0.95,get_recipes,0.65,question_news,0.2", "AMR Graph": "(get_info\n      :ARG0 (I)\n      :purpose (prepare-01\n                  :ARG1 (spaghetti)))", "key_phrase": "prepare spaghetti", "slot_type": "spaghetti, recipes_dish\nprepare, method_recipes", "pred_lf": "[IN:get_info_recipes [SL:recipes_dish spaghetti] [SL:method_recipes prepare]]", "gold_lf": "[IN:GET_RECIPES [SL:RECIPES_DISH spaghetti ] ]"}
{"utterance": "mark me as not going to Olympic Peninsula Apple and Cider Festival", "intent": "get_location (0.8), update_event (0.6), set_rsvp_no (0.4)", "AMR Graph": "(d / declare-01\n      :ARG0 (p / person :name \"Mark\")\n      :ARG1 (n / negate-01\n              :polarity -\n              :polarity-modality +\n              :mod (g / go-01\n                     :ARG0 p\n                     :ARG1 (e / event\n                             :name \"Olympic Peninsula Apple and Cider Festival\")))\n      :ARG2 (s / RSVP\n              :arg0 p\n              :polarity -\n              :status no))", "key_phrase": "Mark, not going, Olympic Peninsula Apple and Cider Festival", "slot_type": "(Olympic Peninsula Apple and Cider Festival, location), (set_rsvp_no, todo)", "pred_lf": "[IN:update_event [SL:location Olympic Peninsula Apple and Cider Festival] [SL:todo set_rsvp_no]]", "gold_lf": "[IN:SET_RSVP_NO [SL:TITLE_EVENT Olympic Peninsula Apple and Cider Festival ] ]"}
{"utterance": "tell mark to pick up our to go order from olive garden", "intent": "get_message, get_message_contact, get_details_news\nConfidence scores: 0.7, 0.5, 0.4", "AMR Graph": "(get_message\n      :subject (you)\n      :message (tell\n                  :agent (you)\n                  :theme (let-know\n                            :agent (you)\n                            :theme (pick-up\n                                      :agent (mark)\n                                      :theme (go-order\n                                                :quant (our)\n                                                :source (olive-garden))))))", "key_phrase": "tell mark, pick up, to go order, olive garden", "slot_type": "mark, contact_added\nto go order, recipes_dish\nolive garden, location", "pred_lf": "[IN:get_message_contact] [SL:contact_added mark] [IN:get_details_news] [SL:recipes_dish to go order] [SL:location olive garden]", "gold_lf": "[IN:SEND_MESSAGE [SL:RECIPIENT mark ] [SL:CONTENT_EXACT pick up our to go order from olive garden ] ]"}
{"utterance": "Set my alarm for 21st of May at 5 am.", "intent": "create_alarm (0.9), update_alarm (0.7), get_alarm (0.6)", "AMR Graph": "(create_alarm \n  :time (date-entity :year 2021 :month 5 :day 21 :hour 5)\n  :task (alarm-entity :label \"my alarm\"))", "key_phrase": "Set alarm, 21st of May, 5 am", "slot_type": "Set, O\nalarm, alarm_name\n21st of May, date_time\n5 am, date_time or weather_temperature_unit (ambiguous without further context)", "pred_lf": "[IN:create_alarm [SL:Set Set] [SL:alarm date_time=21st of May 5 am]]", "gold_lf": "[IN:CREATE_ALARM [SL:DATE_TIME for 21st of May at 5 am ] ]"}
{"utterance": "call on whatsapp Zachary Adkins", "intent": "get_call,create_call,send_message\nConfidence scores: 0.8, 0.5, 0.3", "AMR Graph": "(call-01\n   :ARG0 (you)\n   :medium (whatsapp)\n   :ARG1 (person\n          :name (name-01\n                  :op1 \"Zachary\"\n                  :op2 \"Adkins\")))", "key_phrase": "whatsapp, Zachary Adkins, call on", "slot_type": "(call, todo)\n(whatsapp, method_recipes)\n(Zachary Adkins, person_reminded)", "pred_lf": "[IN:get_call [SL:todo call] [SL:method_recipes whatsapp] [SL:person_reminded Zachary Adkins]]", "gold_lf": "[IN:CREATE_CALL [SL:NAME_APP whatsapp ] [SL:CONTACT Zachary Adkins ] ]"}
{"utterance": "Is it below 47 in F at New York today", "intent": "get_weather,question_news,get_location\nConfidence scores: 0.7,0.6,0.4", "AMR Graph": "The most likely intent type for this sentence is \"get_weather\" with a confidence score of 0.7.\n\nNeo-Davidsonian AMR:  \n(get_weather  \n  :location \"New York\"  \n  :temperature  \n    (range  \n      :high 47  \n      :unit \"F\"  \n      :below true))", "key_phrase": "below 47, New York, F, today, get_weather", "slot_type": "New York, location\nbelow 47, weather_temperature_unit\nF, weather_temperature_unit", "pred_lf": "[IN:get_weather [SL:location New York] [SL:weather_temperature_unit below 47] [SL:weather_temperature_unit F]]", "gold_lf": "[IN:GET_WEATHER [SL:WEATHER_ATTRIBUTE below ] [SL:WEATHER_ATTRIBUTE 47 ] [SL:WEATHER_TEMPERATURE_UNIT F ] [SL:LOCATION New York ] [SL:DATE_TIME today ] ]"}
{"utterance": "Did my Mom send me a message this week?", "intent": "get_message, get_message_contact, get_date_time_event\nConfidence scores: 0.7, 0.6, 0.4", "AMR Graph": "(get_message\n      :ARG0 (I)\n      :ARG1 (message\n             :ARG0 (Mom)\n             :ARG1 (I)\n             :time (week)))", "key_phrase": "Mom, send, message, week", "slot_type": "Mom, contact_related\nmessage, O\nweek, date_time", "pred_lf": "[IN:get_message_contact [SL:Mom Mom] [SL:message O] [SL:week this week]]", "gold_lf": "[IN:GET_MESSAGE [SL:SENDER my Mom ] [SL:RECIPIENT me ] [SL:DATE_TIME this week ] ]"}
{"utterance": "What kind of event is Pumpkin Run?", "intent": "get_event, get_details_news, question_news\nNumeric confidence scores: 0.8, 0.7, 0.6", "AMR Graph": "(get_event\n      :ARG1 (event\n                :name \"Pumpkin Run\"))", "key_phrase": "event, kind, Pumpkin Run", "slot_type": "(Pumpkin Run, title_event)", "pred_lf": "[IN:get_details_news [SL:title_event Pumpkin Run]]", "gold_lf": "[IN:GET_CATEGORY_EVENT [SL:TITLE_EVENT Pumpkin Run ] ]"}
{"utterance": "reset alarm for 7am on Sunday morning", "intent": "create_alarm (0.8), update_alarm (0.7), delete_alarm (0.6)", "AMR Graph": "(reset :op1 (alarm :time 7am :date Sunday morning))", "key_phrase": "reset alarm, 7am, Sunday morning", "slot_type": "reset, method_retrieval_reminder\nalarm, alarm_name\n7am, time\nSunday morning, date_time", "pred_lf": "[IN:create_alarm [SL:method_retrieval_reminder reset] [SL:alarm_name alarm] [SL:time 7am] [SL:date_time Sunday morning]]", "gold_lf": "[IN:CREATE_ALARM [SL:DATE_TIME for 7 am on Sunday morning ] ]"}
{"utterance": "Find a recipe for jerk chicken", "intent": "get_info_recipes (0.90), question_news (0.75), is_true_recipes (0.70)", "AMR Graph": "(get_info\n      :ARG1 (recipe\n               :name \"jerk chicken\")\n      :ARG2 (a))", "key_phrase": "recipe, jerk chicken", "slot_type": "(recipe, recipes_type), (jerk chicken, recipes_dish)", "pred_lf": "[IN:get_info_recipes [SL:recipes_type recipe] [SL:recipes_dish jerk chicken]]", "gold_lf": "[IN:GET_RECIPES [SL:RECIPES_DISH jerk chicken ] ]"}
{"utterance": "play destiny's child", "intent": "play_music, 0.95, loop_music, 0.65, question_music, 0.52", "AMR Graph": "(play_music :action (play_event :object (destiny's_child)))", "key_phrase": "play, Destiny's Child", "slot_type": "(destiny's child, music_artist_name)", "pred_lf": "[IN:play_music [SL:music_artist_name destiny's child]]", "gold_lf": "[IN:PLAY_MUSIC [SL:MUSIC_ARTIST_NAME destiny 's child ] ]"}
{"utterance": "make an alarm for the 5th", "intent": "create_alarm,create_reminder,get_date_time_event\nConfidence scores: 0.8, 0.7, 0.6", "AMR Graph": "(create_alarm\n     :event (alarm\n               :time (date-entity\n                        :month 11\n                        :day 5)))", "key_phrase": "make an alarm, 5th, create_alarm, alarm, time, date-entity, month, day", "slot_type": "(5th, date_time), (alarm, todo)", "pred_lf": "[IN:create_alarm [SL:todo alarm] [SL:date_time 5th]]", "gold_lf": "[IN:CREATE_ALARM [SL:DATE_TIME for the 5th ] ]"}
{"utterance": "Set an alarm for Monday at 5pm", "intent": "create_alarm,update_alarm,get_date_time_event\nConfidence scores: \n0.9,0.8,0.7", "AMR Graph": "(create_alarm\n      :event (alarm\n                :date (date-entity :weekday \"Monday\")\n                :time (time-entity :hour 17 :minute 0)))", "key_phrase": "Set alarm, Monday, 5pm", "slot_type": "(Monday, date_time), (5pm, date_time), (alarm, todo)", "pred_lf": "[IN:create_alarm [SL:date_time (Monday, date_time)] [SL:date_time (5pm, date_time)] [SL:todo (alarm, todo)]]", "gold_lf": "[IN:CREATE_ALARM [SL:DATE_TIME for Monday at 5 pm ] ]"}
{"utterance": "When did Lisa's employment at Publix finish?", "intent": "get_employment_time, get_details_news, get_contact\nConfidence score: 0.8, 0.6, 0.5", "AMR Graph": "(get_employment_time\n    :time (finish \n            :entity (employment \n                      :person (name  \"Lisa\")\n                      :company (name \"Publix\")))))", "key_phrase": "Lisa's employment, Publix, finish, time.", "slot_type": "Lisa, person_reminded\nemployment, job\nPublix, employer\nfinish, O", "pred_lf": "[IN:get_employment_time [SL:person_reminded Lisa]] [SL:job employment] [SL:employer Publix]", "gold_lf": "[IN:GET_EMPLOYMENT_TIME [SL:CONTACT Lisa ] [SL:EMPLOYER Publix ] ]"}
{"utterance": "What's Larry's work address?", "intent": "get_location, get_contact, get_details_news\nConfidence scores:\n0.8, 0.6, 0.3", "AMR Graph": "(get_location\n    :query (work_address\n              :person (name :op \"Larry\"))))", "key_phrase": "Larry, work address", "slot_type": "Larry, contact_person\nwork address, location", "pred_lf": "[IN:get_location [SL:contact_person Larry]] [SL:location work address]", "gold_lf": "[IN:GET_LOCATION [SL:CONTACT Larry ] ]"}
{"utterance": "Does Rachel live in Avon?", "intent": "get_location,question\nConfidence scores: 0.8, 0.6, 0.5", "AMR Graph": "(get_location\n      :arg1 (person :name \"Rachel\")\n      :location (city :name \"Avon\"))\n      \nor\n      \n(question\n      :query (person :name \"Rachel\")\n      :predicate (live-in\n            :location (city :name \"Avon\")))", "key_phrase": "Rachel, live, Avon, location, city", "slot_type": "Rachel, O\nlive in, O\nAvon, location", "pred_lf": "[IN:get_location [SL:person Rachel]] [SL:location Avon]", "gold_lf": "[IN:GET_LOCATION [SL:CONTACT Rachel ] [SL:LOCATION Avon ] ]"}
{"utterance": "What method of cooking is better", "intent": "get_info_recipes,question_recipes,preference_recipes\nConfidence Score:\n0.8,0.7,0.5", "AMR Graph": "(get_info\n        :topic (recipe\n                   :method (cook\n                              :better-of ?x)))))\n                              \nNote: Since there are multiple potential intent types with varying confidence scores, I have chosen to represent the sentence in a more general way by using the get_info intent type and a question structure in the AMR graph. The graph represents the intent of the sentence to inquire about the better method of cooking for a recipe.", "key_phrase": "method of cooking, better method of cooking, recipe, cook", "slot_type": "(method_of_cooking, recipes_cooking_method)", "pred_lf": "[IN:question_recipes [SL:recipes_cooking_method method_of_cooking]]", "gold_lf": "[IN:GET_INFO_RECIPES ]"}
{"utterance": "what is the weather in New York today?", "intent": "get_weather,question_weather,get_location\nConfidence Scores: 0.9, 0.7, 0.6", "AMR Graph": "(get_weather\n      :time (today)\n      :location (location-entity\n                    :name (New York)))", "key_phrase": "weather, New York, today", "slot_type": "(New York, location), (weather, weather_attribute), (today, date_time)", "pred_lf": "[IN:get_weather [SL:location New York] [SL:weather_attribute weather] [SL:date_time today]]", "gold_lf": "[IN:GET_WEATHER [SL:LOCATION New York ] [SL:DATE_TIME today ] ]"}
{"utterance": "add camille to call", "intent": "create_call,add_call_contact,get_call_contact\nNumeric confidence scores: 0.8, 0.7, 0.6", "AMR Graph": "(create_call\n    :add (\n        add_call_contact\n            :name \"camille\"\n            :to (\n                get_call_contact\n                    :name \"call\"\n            )\n    )\n)", "key_phrase": "add, camille, call", "slot_type": "(camille, O), (call, category_event)", "pred_lf": "[IN:create_call [SL:category_event call] [SL:O camille]]", "gold_lf": "[IN:UPDATE_CALL [SL:CONTACT_ADDED camille ] ]"}
{"utterance": "How to make gluten free pancakes", "intent": "get_info_recipes, is_true_recipes, question_news\nNumeric confidence scores:0.7, 0.5, 0.3", "AMR Graph": "(get_info_recipes / recipe\n      :dish (pancakes)\n      :restriction (gluten-free))", "key_phrase": "make, gluten free, pancakes", "slot_type": "gluten free pancakes, recipes_dish", "pred_lf": "[IN:get_info_recipes [SL:recipes_dish gluten free pancakes]]", "gold_lf": "[IN:GET_RECIPES [SL:RECIPES_TYPE gluten free ] [SL:RECIPES_DISH pancakes ] ]"}
{"utterance": "Pause the timer.", "intent": "pause_timer,stop_timer,resume_timer\nConfidence scores: 0.9,0.8,0.7", "AMR Graph": "(pause_timer\n   :ARG0 (pronoun :name \"you\")\n   :ARG1 (timer))", "key_phrase": "Pause, timer.", "slot_type": "(timer_name, method_timer)", "pred_lf": "[IN:pause_timer [SL:method_timer pause] [SL:timer_name the timer]]", "gold_lf": "[IN:PAUSE_TIMER [SL:METHOD_TIMER timer ] ]"}
{"utterance": "remind rex to set up the meeting time", "intent": "create_reminder,create_call,get_info_contact\nConfidence score: 0.7, 0.2, 0.1", "AMR Graph": "(s / remind\n       :ARG0 (u / you)\n       :purpose (s2 / set-up\n                  :ARG0 (p / person :name \"Rex\")\n                  :ARG1 (m / meeting :time-of-meeting (t / time))) )", "key_phrase": "remind rex, set up meeting time", "slot_type": "(rex, person_reminded), (meeting time, title_event)", "pred_lf": "[IN:create_reminder [SL:person_reminded rex] [SL:title_event meeting time]]", "gold_lf": "[IN:CREATE_REMINDER [SL:PERSON_REMINDED rex ] [SL:TODO set up the meeting time ] ]"}
{"utterance": "Can I wear sandals today?", "intent": "get_weather (0.7), get_location (0.5), question_news (0.3)", "AMR Graph": "(get_weather\n  :arg0 (you)\n  :location (today)\n  :arg1 (sandals))", "key_phrase": "wear sandals, today", "slot_type": "sandals, O\ntoday, date_time\nget_weather, type_relation", "pred_lf": "[IN:get_weather [SL:type_relation, weather] [SL:O, sandals] [SL:date_time, today]]", "gold_lf": "[IN:GET_WEATHER [SL:WEATHER_ATTRIBUTE sandals ] [SL:DATE_TIME today ] ]"}
{"utterance": "Add aunties to current call", "intent": "create_call (0.8), add_call_contact (0.7), merge_call (0.6)", "AMR Graph": "(create-call \n   :action (add-call-contact \n             :object (aunties)\n             :to (current-call)))", "key_phrase": "Add aunties, current call, call contact", "slot_type": "aunties, attendee \ncurrent call, group", "pred_lf": "[IN:create_call [SL:attendee aunties] [SL:group current call]]", "gold_lf": "[IN:UPDATE_CALL [SL:CONTACT_ADDED aunties ] ]"}
{"utterance": "where will american federal aid be sent to", "intent": "get_location,question_news,get_details_news\nConfidence scores: 0.8,0.7,0.6", "AMR Graph": "(get_details_news\n    :op1 (question_news\n              :op1 (get_location\n                       :op1 (send\n                                :op1 american_federal_aid\n                                :op2 ? where))))", "key_phrase": "american federal aid, send, location, where", "slot_type": "american, O\nfederal aid, O\nsent, O\nlocation, location", "pred_lf": "[IN:get_location [SL:location] [SL:american O] [SL:federal aid O] [SL:sent O]]", "gold_lf": "[IN:QUESTION_NEWS [SL:NEWS_TOPIC where will american federal aid be sent to ] ]"}
{"utterance": "get me messages from Angela", "intent": "get_message, get_message_contact, get_info_contact  \nConfidence score: 0.9, 0.8, 0.6", "AMR Graph": "(get_message\n    :ARG0 (you)\n    :ARG1 (message\n        :mod (from \n            :name (Angela))))", "key_phrase": "get messages, Angela", "slot_type": "(get me messages, O), (Angela, person_reminded)", "pred_lf": "[IN:get_message_contact [SL:contact_name Angela] [SL:request_type messages]]", "gold_lf": "[IN:GET_MESSAGE [SL:SENDER Angela ] ]"}
{"utterance": "Temperature this weekend new york fahrenheit", "intent": "get_weather, get_location, get_temperature_event\nNumeric Confidence Scores: 0.8, 0.7, 0.5", "AMR Graph": "(get_temperature_event\n      :event (temperature \n                  :quant 1 \n                  :unit (fahrenheit))\n      :location (place \n                     :name (name \n                               :op1 \"new york\")))", "key_phrase": "Temperature, this weekend, New York, Fahrenheit", "slot_type": "Temperature, weather_temperature_unit\nthis weekend, date_time\nnew york, location\nfahrenheit, weather_temperature_unit", "pred_lf": "[IN:get_temperature_event [SL:Temperature this weekend date_time] [SL:location new york] [SL:weather_temperature_unit fahrenheit]]", "gold_lf": "[IN:GET_WEATHER [SL:DATE_TIME this weekend ] [SL:LOCATION new york ] [SL:WEATHER_TEMPERATURE_UNIT fahrenheit ] ]"}
{"utterance": "How many kids got arrested", "intent": "get_details_news,question_news,get_info_recipes\nConfidence scores: 0.8, 0.7, 0.6", "AMR Graph": "(get_details_news\n :ARG0 (how)\n :ARG1 (arrest \n        :ARG1-of (kids)))", "key_phrase": "kids, arrested, how many", "slot_type": "(kids, ordinal), (arrested, news_type)", "pred_lf": "[IN:get_details_news [SL:kids ordinal] [SL:arrested news_type]]", "gold_lf": "[IN:QUESTION_NEWS [SL:NEWS_TOPIC kids got arrested ] ]"}
{"utterance": "Show new messages", "intent": "get_message,question_news,help_reminder\nNumeric confidence scores: 0.8,0.6,0.5", "AMR Graph": "(r / show\n  :ARG0 (u / you)\n  :ARG1 (m / message\n          :mod (n / new)))", "key_phrase": "Show, new messages", "slot_type": "(\"new messages\", O)", "pred_lf": "[IN:get_message [SL:O new messages]]", "gold_lf": "[IN:GET_MESSAGE ]"}
{"utterance": "Remind me to take dinner to Lori on Friday.", "intent": "create_reminder (0.8), update_reminder_date_time (0.6), update_reminder_location (0.5)", "AMR Graph": "(create_reminder\n      :reminded \"me\"\n      :reminder \"take dinner to Lori on Friday\"\n)", "key_phrase": "Remind me, take dinner, Lori, Friday.", "slot_type": "(dinner, recipes_dish), (Lori, recipient), (Friday, date_time)", "pred_lf": "[IN:create_reminder [SL:recipes_dish dinner] [SL:recipient Lori] [SL:date_time Friday]]", "gold_lf": "[IN:CREATE_REMINDER [SL:PERSON_REMINDED me ] [SL:TODO take dinner to Lori ] [SL:DATE_TIME on Friday ] ]"}
{"utterance": "Show my spa reminders with my mom next month.", "intent": "get_reminder, get_date_time_event, get_attendee_event\nConfidence scores: 0.8, 0.7, 0.6", "AMR Graph": "(get_reminder\n   :subject (person :name \"I\")\n   :object (reminder-entity :type spa :modifiers (possessive :specifier \"my\"))\n   :time (temporal-quantity :operator next :unit month)\n   :co-agent (person :name \"mom\")\n)", "key_phrase": "spa reminders, my mom, next month", "slot_type": "spa reminders, method_retrieval_reminder\nmy mom, attendee\nnext month, date_time", "pred_lf": "[IN:get_reminder [SL:method_retrieval_reminder spa reminders] [SL:attendee my mom] [IN:get_date_time_event [SL:date_time next month]]]", "gold_lf": "[IN:GET_REMINDER [SL:METHOD_RETRIEVAL_REMINDER Show ] [SL:PERSON_REMINDED my ] [SL:TODO spa ] [SL:TODO with my mom ] [SL:DATE_TIME next month ] ]"}
{"utterance": "Michigan crime reports", "intent": "get_details_news,question_news,get_stories_news\nConfidence scores: \n0.8,0.6,0.5", "AMR Graph": "(get_details_news\n   :topic (michigan\n            :domain crime\n            :mod (report)))\nOR\n(question_news\n   :topic (michigan\n            :domain crime\n            :mod (report)))\nOR\n(get_stories_news\n   :topic (michigan\n            :domain crime\n            :mod (report)))", "key_phrase": "Michigan, crime, reports", "slot_type": "Michigan, location \ncrime reports, news_category", "pred_lf": "[IN:get_details_news [SL:location Michigan]]\n[IN:question_news [SL:news_category crime reports]]", "gold_lf": "[IN:GET_STORIES_NEWS [SL:NEWS_TOPIC Michigan crime ] [SL:NEWS_TYPE reports ] ]"}
{"utterance": "What's the biggest story today?", "intent": "get_stories_news (0.9), question_news (0.7), get_details_news (0.6)", "AMR Graph": "(get_stories_news\n      :ARG1 (today)\n      :mod (biggest)\n      :ARG2 (story))\n\nExplanation: The sentence is asking for the biggest news story of the day. The intent type with the highest score is get_stories_news, which implies that the sentence is intended to retrieve news stories based on a certain criterion (in this case, the biggest). The AMR graph represents the root with the get_stories_news relation and three arguments: the first argument (ARG1) is the time period (today), the second argument (mod) is the modifier of the second argument (biggest) and the third argument (ARG2) represents the object of the action, which is the story.", "key_phrase": "biggest story, today", "slot_type": "(biggest story, news_topic)", "pred_lf": "[IN:get_stories_news [SL:biggest story news_topic]]", "gold_lf": "[IN:GET_STORIES_NEWS [SL:NEWS_REFERENCE biggest ] [SL:NEWS_TYPE story ] [SL:DATE_TIME today ] ]"}
{"utterance": "please record a video message for Gina and Sparks", "intent": "create_message_contact,create_video,create_video_message\n0.8,0.75,0.7", "AMR Graph": "(create_video_message\n      :receiver (person :name \"Gina and Sparks\")\n      :content (record :medium (video)))", "key_phrase": "record, video message, Gina, Sparks", "slot_type": "Gina, contact_person\nSparks, contact_person\nrecord, O\nvideo message, type_content", "pred_lf": "[IN:create_video_message [SL:type_content video message] [SL:contact_person Gina] [SL:contact_person Sparks]]", "gold_lf": "[IN:SEND_MESSAGE [SL:TYPE_CONTENT video ] [SL:RECIPIENT Gina ] [SL:RECIPIENT Sparks ] ]"}
{"utterance": "What is the temperature going to be today?", "intent": "get_weather,question_news,get_details_news\nConfidence scores: \n0.8,0.1,0.1", "AMR Graph": "(get_weather\n    :query (temperature\n              :time (today))))\nNote: This AMR representation assumes that the intent type \"get_weather\" best captures the intended meaning of the sentence.", "key_phrase": "temperature, today", "slot_type": "temperature, weather_temperature_unit", "pred_lf": "[IN:get_weather [SL:temperature_unit CELSIUS]]", "gold_lf": "[IN:GET_WEATHER [SL:DATE_TIME today ] ]"}
{"utterance": "Do you have any reminders for me?", "intent": "get_reminder, get_reminder_date_time, get_reminder_location\nNumeric confidence scores: 0.8, 0.4, 0.2", "AMR Graph": "(get_reminder\n  :arg0 (person :name \"you\")\n  :arg1 (reminders-for\n          :entity (person :name \"me\")\n          :reminders (reminder-list)))\n)", "key_phrase": "reminders, you, me", "slot_type": "(reminders, todo)", "pred_lf": "[IN:get_reminder [SL:reminders todo]]", "gold_lf": "[IN:GET_REMINDER [SL:PERSON_REMINDED me ] ]"}
{"utterance": "I have a video message I need sent to my dad.", "intent": "get_message, send_message, get_message_contact\nConfidence scores: 0.6, 0.5, 0.4", "AMR Graph": "(get_message\n  :agent (speaker)\n  :theme (video_message\n           :where (father)))\n          \nNote: The intent type with the highest confidence score was chosen. The speaker is assumed to be the first-person singular subject of the sentence. The video message is the theme of the get_message action, and the where attribute specifies that it needs to be sent to the speaker's father.", "key_phrase": "video message, send, dad", "slot_type": "(video message, O), (dad, contact_related)", "pred_lf": "[IN:get_message_contact [SL:video message O] [SL:dad contact_related]]", "gold_lf": "[IN:SEND_MESSAGE [SL:TYPE_CONTENT video ] [SL:RECIPIENT my dad ] ]"}
{"utterance": "Any celebrity news stories?", "intent": "get_stories_news,question_news,get_details_news\nConfidence scores: \n0.90,0.07,0.03", "AMR Graph": "(get_stories_news\n      :topic (celebrity)\n      :type (stories))\n      \n(Note: The confidence score for \"get_stories_news\" is significantly higher than the other two intent types, so it is the most likely interpretation of the sentence.)", "key_phrase": "celebrity news, stories", "slot_type": "celebrity news, news_topic", "pred_lf": "[IN:get_stories_news [SL:news_topic celebrity news]]", "gold_lf": "[IN:GET_STORIES_NEWS [SL:NEWS_CATEGORY celebrity ] [SL:NEWS_TYPE news stories ] ]"}
{"utterance": "put up my blink timer", "intent": "create_timer,add_time_timer,start_timer\nConfidence scores: 0.8,0.7,0.5", "AMR Graph": "(Assuming that the intent type is \"create_timer\" with a confidence score of 0.8)\n\n[did\n  :arg0 I\n  :arg1 [create-01\n           :ARG1-of [put-01\n                       :ARG0 I\n                       :ARG1 [blink-02\n                                 :mod my]]]\n  :time (now)]", "key_phrase": "put up, blink timer, my", "slot_type": "(blink timer, timer_name)", "pred_lf": "[IN:create_timer [SL:timer_name blink timer]]", "gold_lf": "[IN:GET_TIMER [SL:TIMER_NAME blink ] [SL:METHOD_TIMER timer ] ]"}
{"utterance": "how do you cook steak in a pan", "intent": "get_info_recipes,question_news,get_recipes \nConfidence scores: 0.8, 0.6, 0.3 (in any order)", "AMR Graph": "(S\n  :GET_INFO_RECIPES \n  (QUERY \n    :polarity - \n    :ARG0 (PERSON :ARG0-of (ASK-QUESTION))\n    :QUERY-TYPE (COOKING-METHOD :ARG1 (FOOD :steak))\n    :ARG2 (COOKING-UTENSIL :pan)))", "key_phrase": "cook steak, in a pan, how to", "slot_type": "cook, recipes_cooking_method\nsteak, recipes_dish\npan, recipes_unit_measurement", "pred_lf": "[IN:get_recipes [SL:recipes_dish steak] [SL:recipes_cooking_method cook] [SL:recipes_unit_measurement pan]]", "gold_lf": "[IN:GET_INFO_RECIPES [SL:RECIPES_INCLUDED_INGREDIENT steak ] ]"}
{"utterance": "how long should i cook ribs", "intent": "get_recipes,question_music,get_details_news\nConfidence score: 0.8, 0.6, 0.4", "AMR Graph": "(s / cook\n      :arg0 (i / i)\n      :arg1 (r / rib)\n      :duration-of (:arg1)\n      :polarity -))\n\nExplanation: \nThe sentence is a question asking about the duration of the cooking process for ribs. The intent type is most likely related to cooking, which fits with the given sentence. The AMR represents the sentence as a cooking event, with the subject 'I' and the object 'rib'. The attribute :duration-of is introduced to indicate that the sentence is asking about the duration of the event. The polarity is negative, which indicates a lack of implicit positive or negative sentiment.", "key_phrase": "cook ribs, how long, duration", "slot_type": "ribs, recipes_dish\ncook, recipes_cooking_method \nhow long, O", "pred_lf": "[IN:get_recipes [SL:ribs recipes_dish] [SL:cook recipes_cooking_method]]", "gold_lf": "[IN:GET_INFO_RECIPES [SL:RECIPES_ATTRIBUTE how long ] [SL:RECIPES_INCLUDED_INGREDIENT ribs ] ]"}
{"utterance": "End my call", "intent": "end_call, cancel_call, resume_call, with confidence scores: 0.8, 0.15, 0.05", "AMR Graph": "(end-call \n      :ARG0 (speaker) \n      :ARG1 (phone-call))\n      \nNote: This AMR represents the intent type \"end_call\" with the highest confidence score. The speaker is the AGENT, and the phone call is the THEME.", "key_phrase": "End call, Speaker, Phone call", "slot_type": "End, O\ncall, O", "pred_lf": "[IN:end_call [SL:End O] [SL:call O]]", "gold_lf": "[IN:END_CALL ]"}
{"utterance": "Savannah Georgia events for next weekend", "intent": "get_event, get_location, get_date_time_event\nConfidence scores: 0.7, 0.6, 0.5", "AMR Graph": "(a / and\n      :op1 (e / event\n                  :when (t / temporal-quantity\n                              :unit \"day\"\n                              :quant 7\n                              :ref-event-of (w2 / weekend))\n                  :location (l / location\n                                  :name \"Savannah Georgia\"))\n      :op2 (w2 / weekend\n                  :day \"next\"))", "key_phrase": "Savannah Georgia, events, next weekend", "slot_type": "(Savannah Georgia, location), (events, title_event), (next weekend, date_time)", "pred_lf": "[IN:get_event [SL:title_event events] [SL:date_time next weekend] [SL:location Savannah Georgia]]", "gold_lf": "[IN:GET_EVENT [SL:LOCATION Savannah Georgia ] [SL:DATE_TIME for next weekend ] ]"}
{"utterance": "what's the temperature supposed to be tomorrow?", "intent": "get_weather,question_weather,question_temperature\nConfidence scores: 0.9, 0.8, 0.7", "AMR Graph": "(get_weather\n     :query (temperature\n                :time (tomorrow)))", "key_phrase": "temperature, tomorrow", "slot_type": "(temperature, weather_temperature_unit), (tomorrow, date_time)", "pred_lf": "[IN:get_weather [SL:question_temperature weather_temperature_unit] [SL:tomorrow date_time]]", "gold_lf": "[IN:GET_WEATHER [SL:DATE_TIME tomorrow ] ]"}
{"utterance": "Did someone just graduate from CU Denver?", "intent": "get_education_degree, get_education_time, get_major, get_location, get_life_event, question_news\n\nConfidence scores: 0.65, 0.60, 0.55, 0.50, 0.40, 0.35", "AMR Graph": "(get_education_degree \n     :arg1 (someone) \n     :degree-of (graduate-01) \n     :from \n         (univ-institution \n             :name (CU Denver)))", "key_phrase": "someone, graduate from CU Denver", "slot_type": "graduated, education_degree \nCU Denver, location", "pred_lf": "[IN:question_news] [SL:graduated education_degree] [SL:location CU Denver]", "gold_lf": "[IN:GET_CONTACT [SL:SCHOOL CU Denver ] ]"}
{"utterance": "which whole food karen used to work at", "intent": "get_job, get_employer, get_info_contact\nNumeric confidence scores: 0.8, 0.7, 0.6", "AMR Graph": "(get_job\n        :ARG0 (which\n                    :op1 (food\n                            :quant (whole)))\n        :ARG1 (person\n                    :name (karen)))\n\nExplanation:\nThe intent type is \"get_job\", with a confidence score of 0.8. The sentence is asking about the type of job that Karen used to work at, specifically in the context of \"whole food\". Therefore, the AMR graph contains a \"which\" node that specifies that the search is for a certain type of food, \"whole food\" in this case. The \"food\" node has an \"op1\" edge that specifies that it's a \"quant\" (quantifier) for \"whole\", indicating that Karen worked at a job involving whole food. The ARG1 is \"person\" with the \"name\" attribute as \"karen\".", "key_phrase": "whole food, Karen, job", "slot_type": "(karen, person_reminded), (whole food, recipes_source), (work, method_recipes)", "pred_lf": "[IN:get_employer [SL:person_reminded karen]] [IN:get_job [SL:method_recipes work] [SL:recipes_source whole food]]", "gold_lf": "[IN:GET_EMPLOYER [SL:EMPLOYER whole food ] [SL:CONTACT karen ] ]"}
{"utterance": "Healthy dinner recipes", "intent": "get_info_recipes, get_recipes, is_true_recipes\nConfidence score:\n0.85, 0.82, 0.75", "AMR Graph": "(get_info_recipes\n  :topic (healthy_dinner_recipes))\n  \nNote: the AMR graph is only one possible representation and there could be other valid representations based on different interpretations of the sentence and intents.", "key_phrase": "healthy, dinner recipes", "slot_type": "recipes_diet, recipes_type_nutrition, recipes_type", "pred_lf": "[IN:get_info_recipes [SL:recipes_diet healthy] [SL:recipes_type_nutrition dinner]]", "gold_lf": "[IN:GET_RECIPES [SL:RECIPES_ATTRIBUTE Healthy ] [SL:RECIPES_MEAL dinner ] ]"}
{"utterance": "Message Jason and ask him to send a photo of his damaged car.", "intent": "get_message_contact,send_message,get_details_contact\nConfidence scores: 0.75, 0.6, 0.55", "AMR Graph": "(get_details_contact\n    :recipient (person :name \"Jason\")\n    :action (request\n                :theme (photo :description \"of his damaged car\")\n            )\n)", "key_phrase": "Message Jason, ask him, send a photo, damaged car.", "slot_type": "(Jason, attendee), (send a photo, method_recipes), (damaged car, recipes_dish)", "pred_lf": "[IN:get_details_contact [SL:attendee Jason]]\n[IN:get_message_contact [SL:method_recipes send a photo] [SL:recipes_dish damaged car]]", "gold_lf": "[IN:SEND_MESSAGE [SL:RECIPIENT Jason ] [SL:CONTENT_EXACT send a photo of his damaged car ] ]"}
{"utterance": "What temp for the cherry pies", "intent": "1. get_temperature\n2. get_recipe\n3. question_food\nConfidence scores: 0.6, 0.4, 0.3", "AMR Graph": "(get_temperature\n      :action (question\n                  :thing (food\n                              :name \"cherry pies\")))", "key_phrase": "temperature, cherry pies", "slot_type": "cherry pies, recipes_dish\ntemp, weather_temperature_unit", "pred_lf": "[IN:get_temperature [SL:cherry pies recipes_dish] [SL:temp weather_temperature_unit]]", "gold_lf": "[IN:GET_INFO_RECIPES [SL:RECIPES_ATTRIBUTE temp ] [SL:RECIPES_DISH cherry pies ] ]"}
{"utterance": "Add more minutes to my timer.", "intent": "add_time_timer,add_to_playlist_music,create_timer\nNumeric confidence scores: 0.95, 0.85, 0.82", "AMR Graph": "(add-time-rel\n        :ARG1 (timer-entity :possessive (I-entity))\n        :quant (more-quant\n                    :op (minute-entity))\n)", "key_phrase": "minutes, timer, add, more", "slot_type": "(minutes, amount), (timer, todo)", "pred_lf": "[IN:add_time_timer [SL:amount minutes] [SL:todo timer]]", "gold_lf": "[IN:ADD_TIME_TIMER [SL:DATE_TIME minutes ] [SL:METHOD_TIMER timer ] ]"}
{"utterance": "What is the hottest that it will get all week?", "intent": "get_weather,question_news,get_stories_news\nConfidence score:\n0.8,0.7,0.6", "AMR Graph": "(get_weather\n    :query (get_max_temperature\n              :time (get_week))\n    :target (it))", "key_phrase": "hottest, get, all week", "slot_type": "hottest, weather_temperature_unit", "pred_lf": "[IN:get_weather [SL:time_range all_week] [SL:temperature_type hottest] [SL:temperature_unit weather_temperature_unit]]", "gold_lf": "[IN:GET_WEATHER [SL:WEATHER_ATTRIBUTE hottest ] [SL:DATE_TIME all week ] ]"}
{"utterance": "set alarm for 7:30 am", "intent": "create_alarm,update_alarm,get_alarm\nConfidence scores: 0.9, 0.08, 0.02", "AMR Graph": "(set :ARG0 (alarm :time \"7:30 am\") :purpose (create :ARG0 (alarm)))", "key_phrase": "set alarm, 7:30 am", "slot_type": "(alarm_name, create_alarm),(date_time, create_alarm)", "pred_lf": "[IN:create_alarm [SL:date_time 7:30 am] [SL:alarm_name null]]", "gold_lf": "[IN:CREATE_ALARM [SL:DATE_TIME for 7 : 30 am ] ]"}
{"utterance": "How much is it going to rain tomorrow?", "intent": "get_weather,question_news,get_details_news\nConfidence Score: 0.8,0.7,0.5", "AMR Graph": "(get_weather\n :arg1 (rain\n        :mod (tomorrow))\n :mod (much)\n :polarity positive)\n\nNote: This AMR represents the intention of the sentence to obtain information about the expected amount of rain on the following day.", "key_phrase": "rain, tomorrow, amount, expected", "slot_type": "tomorrow, date_time\nrain, weather_attribute", "pred_lf": "[IN:get_weather [SL:date_time tomorrow]] [SL:weather_attribute rain]", "gold_lf": "[IN:GET_WEATHER [SL:WEATHER_ATTRIBUTE rain ] [SL:DATE_TIME tomorrow ] ]"}
{"utterance": "start music on pandora", "intent": "play_music,play_media,add_to_playlist_music\nConfidence score: 0.8, 0.1, 0.09", "AMR Graph": "(play_music\n    :action (start\n                :object (music\n                            :platform (pandora))))", "key_phrase": "start music, pandora", "slot_type": "(start, O), (music, music_type), (pandora, music_provider_name)", "pred_lf": "[IN:play_music [SL:music_type music] [SL:music_provider_name pandora]]", "gold_lf": "[IN:PLAY_MUSIC [SL:MUSIC_TYPE music ] [SL:MUSIC_PROVIDER_NAME pandora ] ]"}
{"utterance": "when are the next elections", "intent": "get_event, get_date_time_event, get_details_news\nConfidence scores: 0.75, 0.70, 0.60", "AMR Graph": "(get_event :op1 (election :quant next) :op2 (time :op1 when))", "key_phrase": "next elections, when", "slot_type": "(next elections, title_event)", "pred_lf": "[IN:get_date_time_event [SL:title_event next elections]]", "gold_lf": "[IN:QUESTION_NEWS [SL:NEWS_REFERENCE next ] [SL:NEWS_TOPIC elections ] ]"}
{"utterance": "Find me the latest Linkin Park album", "intent": "get_track_info_music,0.9, get_music_album,0.8, question_music,0.7", "AMR Graph": "(get_music_album\n  :ARG0 (speaker)\n  :ARG1 (album\n           :mod (latest)\n           :topic (Linkin Park)))", "key_phrase": "find, latest, Linkin Park album", "slot_type": "(Linkin Park, music_artist_name), (album, music_album_title), (latest, O)", "pred_lf": "[IN:get_music_album [SL:music_artist_name Linkin Park] [SL:music_album_title latest]]", "gold_lf": "[IN:PLAY_MUSIC [SL:MUSIC_ARTIST_NAME Linkin Park ] [SL:MUSIC_TYPE album ] ]"}
{"utterance": "Easy salad recipes", "intent": "get_info_recipes (0.95), is_true_recipes (0.85), question_news (0.74)", "AMR Graph": "(get_info_recipes :topic \"Easy salad recipes\")", "key_phrase": "Easy, salad recipes", "slot_type": "(salad recipes,recipes_dish),(easy,attribute_event)", "pred_lf": "[IN:get_info_recipes [SL:recipes_dish easy] [SL:attribute_event salad recipes]]", "gold_lf": "[IN:GET_RECIPES [SL:RECIPES_ATTRIBUTE Easy ] [SL:RECIPES_DISH salad ] ]"}
{"utterance": "call India Cortez and Vivian Hamilton", "intent": "get_call_contact,create_call,get_contact\nConfidence scores: 0.95, 0.85, 0.70", "AMR Graph": "(input / call :intent get_call_contact\n               :receiver (person / and\n                            :first (name / India)\n                            :last (name / Cortez))\n               :caller (person / and\n                            :first (name / Vivian)\n                            :last (name / Hamilton)))", "key_phrase": "call India Cortez, Vivian Hamilton", "slot_type": "call India Cortez, contact_method  \nVivian Hamilton, person_reminded", "pred_lf": "[IN:get_call_contact [SL:contact_method call India Cortez] [SL:person_reminded Vivian Hamilton]]", "gold_lf": "[IN:CREATE_CALL [SL:CONTACT India Cortez ] [SL:CONTACT Vivian Hamilton ] ]"}
{"utterance": "Where does Paula Carlton work?", "intent": "get_employer, get_job, get_info_contact\nConfidence score: 0.9,0.8,0.7", "AMR Graph": "(get_employer\n        :ARG0 (person :name (name :op \"Paula Carlton\"))\n        :ARG1 (company :name (name :op \"work\")))", "key_phrase": "Paula Carlton, work", "slot_type": "(Paula Carlton, person_reminded), (work, job)", "pred_lf": "[IN:get_employer [SL:person_reminded Paula Carlton] [SL:job work]]", "gold_lf": "[IN:GET_EMPLOYER [SL:CONTACT Paula Carlton ] ]"}
{"utterance": "Will there be a lot of rain this weekend?", "intent": "get_weather,question_weather,question_forecast  confidence scores: 0.95, 0.8, 0.7", "AMR Graph": "(get_weather\n    :time (time :time-of (weekend))\n    :quantity (quantity :amount (lot))\n    :weather (rain)\n    :polarity +)", "key_phrase": "rain, lot, weekend", "slot_type": "rain, weather_attribute\nweekend, date_time", "pred_lf": "[IN:get_weather [SL:rain weather_attribute] [SL:weekend date_time]]", "gold_lf": "[IN:GET_WEATHER [SL:WEATHER_ATTRIBUTE rain ] [SL:DATE_TIME this weekend ] ]"}
{"utterance": "set an alarm for one hour", "intent": "create_alarm (0.9), add_time_timer (0.8), update_alarm (0.6)", "AMR Graph": "(create_alarm \n      :entity (timer \n                  :time \"1 hour\"))", "key_phrase": "set alarm, one hour, timer, time.", "slot_type": "(alarm_name, alarm_name), (method_timer, method_timer), (amount, amount)", "pred_lf": "[IN:create_alarm [SL:alarm_name one hour] [SL:method_timer set]]", "gold_lf": "[IN:CREATE_ALARM [SL:DATE_TIME for one hour ] ]"}
{"utterance": "Give me news regarding the Senate Russia hearings.", "intent": "get_details_news,question_news,get_stories_news\nAccuracy score: 0.8,0.75,0.65", "AMR Graph": "(get_details_news\n      :ARG0 (I)\n      :ARG1 (news \n                :topic (hearings \n                            :organization (Senate)\n                            :location (Russia))))\n     \n(question_news\n      :ARG0 (I)\n      :ARG1 (news \n                :topic (hearings \n                            :organization (Senate)\n                            :location (Russia))))\n     \n(get_stories_news\n      :ARG0 (I)\n      :ARG1 (news \n                :topic (hearings \n                            :organization (Senate)\n                            :location (Russia))))", "key_phrase": "news, Senate, Russia hearings", "slot_type": "(Senate Russia hearings, news_topic)", "pred_lf": "[IN:get_details_news [SL:news_topic Senate Russia hearings]]", "gold_lf": "[IN:GET_STORIES_NEWS [SL:NEWS_TYPE news ] [SL:NEWS_TOPIC Senate Russia hearings ] ]"}
{"utterance": "Is there lightning reported in the current thunderstorm?", "intent": "get_weather,question_news,get_location\nConfidence score: 0.9,0.8,0.7", "AMR Graph": "(get_weather\n\t:query (report\n\t\t:thing (lightning)\n\t\t:location-in (thunderstorm\n\t\t\t:current true)))", "key_phrase": "lightning, reported, thunderstorm, current", "slot_type": "lightning, weather_attribute\nthunderstorm, location", "pred_lf": "[IN:get_weather [SL:weather_attribute lightning] [SL:location current]]", "gold_lf": "[IN:GET_WEATHER [SL:WEATHER_ATTRIBUTE lightning ] [SL:WEATHER_ATTRIBUTE thunderstorm ] ]"}
{"utterance": "Ask Ryan if he wants to go to an FSU football game this fall.", "intent": "get_call_contact, get_details_news, get_event\nConfidence scores: \n0.8, 0.6, 0.5", "AMR Graph": "(get_event \n    :event \n        (go-01 \n            :agent (person :name \"you\")\n            :theme (football-game :name \"FSU football game\")\n            :time (season :name \"fall\"))\n    :recipient (person :name \"Ryan\"))", "key_phrase": "Ryan, FSU football game, fall, go to", "slot_type": "Ryan, person_reminded\nFSU football game, title_event", "pred_lf": "[IN:get_details_news] [SL:person_reminded Ryan] [SL:title_event FSU football game]", "gold_lf": "[IN:SEND_MESSAGE [SL:RECIPIENT Ryan ] [SL:CONTENT_EXACT he wants to go to an FSU football game this fall ] ]"}
{"utterance": "Cancel my reminder for juice.", "intent": "delete_reminder (0.95), cancel_message (0.65), update_reminder_todo (0.54)", "AMR Graph": "(delete_reminder\n      :remind(add\n            :reminder(juice))\n      :cancel(me)\n)", "key_phrase": "Cancel, reminder, juice.", "slot_type": "reminder, todo", "pred_lf": "[IN: delete_reminder [SL: reminder juice]]", "gold_lf": "[IN:DELETE_REMINDER [SL:PERSON_REMINDED my ] [SL:TODO juice ] ]"}
{"utterance": "how to make pancakes from scratch", "intent": "get_info_recipes, 0.8", "AMR Graph": "(get_info_recipes\n  :topic (pancakes)\n  :method (make)\n  :source (scratch))", "key_phrase": "make pancakes, from scratch", "slot_type": "make, method_recipes\npancakes, recipes_dish\nscratch, N/A (no matching slot type)", "pred_lf": "[IN:get_info_recipes [SL:method_recipes make] [SL:recipes_dish pancakes]]", "gold_lf": "[IN:GET_RECIPES [SL:RECIPES_DISH pancakes ] [SL:RECIPES_COOKING_METHOD from scratch ] ]"}
{"utterance": "delete the wedding reminder for sunday", "intent": "delete_reminder,delete_alarm,get_reminder_date_time\nNumeric confidence scores: 0.8, 0.7, 0.6", "AMR Graph": "(delete-01\n   :arg1 (wedding-reminder\n            :quant (one)\n            :date (sunday)))", "key_phrase": "delete, wedding reminder, Sunday", "slot_type": "(wedding reminder, todo), (sunday, date_time)", "pred_lf": "[IN: delete_reminder [SL: todo wedding reminder] [SL: date_time sunday]]", "gold_lf": "[IN:DELETE_REMINDER [SL:TODO wedding ] [SL:DATE_TIME for sunday ] ]"}
{"utterance": "show me who is available please", "intent": "get_availability,help_reminder,play_music\nConfidence scores: 0.75, 0.6, 0.4", "AMR Graph": "(get_availability :intent (me :arg0) \n                   (person :arg1 - potential))", "key_phrase": "show, available, who, please", "slot_type": "(show, O), (available, O)", "pred_lf": "[IN:get_availability [SL:show O] [SL:available O]]", "gold_lf": "[IN:GET_AVAILABILITY ]"}
{"utterance": "Turn on the radio please", "intent": "play_music,question_music,get_track_info_music\nConfidence scores: \n0.8,0.6,0.4", "AMR Graph": "(turn-on \n      :ARG0 (you) \n      :ARG1 (radio) \n      :mode imperative \n      :polarity positive \n      :intent play_music)", "key_phrase": "Turn on, radio, please", "slot_type": "radio, music_radio_id", "pred_lf": "[IN:play_music [SL:radio radio]]", "gold_lf": "[IN:PLAY_MUSIC [SL:MUSIC_TYPE radio ] ]"}
{"utterance": "let's start recording a video message for Nobuko Falconeri", "intent": "create_message, create_video_message, get_contact_message\nNumeric confidence scores: 0.8, 0.7, 0.5", "AMR Graph": "(create_video_message\n      :agent (you)\n      :theme (message\n                :medium video\n                :content (record\n                            :topic Nobuko_Falconeri)))", "key_phrase": "start recording, video message, Nobuko Falconeri", "slot_type": "Nobuko Falconeri, contact_person", "pred_lf": "[IN:create_video_message [SL:contact_person Nobuko Falconeri]]", "gold_lf": "[IN:SEND_MESSAGE [SL:TYPE_CONTENT video ] [SL:RECIPIENT Nobuko Falconeri ] ]"}
{"utterance": "Play Eminem's newest hit", "intent": "play_music, question_music, get_track_info_music\nConfidence scores: 0.8, 0.7, 0.6", "AMR Graph": "(play_music \n\t :player (player :name \"Eminem\") \n\t :track (track :name \"newest hit\"))", "key_phrase": "play, Eminem, newest hit", "slot_type": "('Eminem', 'music_artist_name'), ('newest hit', 'music_track_title')", "pred_lf": "[IN:play_music [SL:music_artist_name Eminem] [SL:music_track_title newest hit]]", "gold_lf": "[IN:PLAY_MUSIC [SL:MUSIC_ARTIST_NAME Eminem ] [SL:MUSIC_TYPE hit ] ]"}
{"utterance": "Message Riley to say I am going to be late", "intent": "get_message_contact,create_message\nConfidence scores: 0.8, 0.5", "AMR Graph": "(get_message_contact\n    :message (create_message\n                :sender (I)\n                :receiver (Riley)\n                :content \"I am going to be late\"))", "key_phrase": "Message, Riley, I, late", "slot_type": "Riley, attendee_contact", "pred_lf": "[IN:get_message_contact] [SL:message_receiver attendee_contact Riley] [IN:create_message] [SL:message_text \"I am going to be late\"]", "gold_lf": "[IN:SEND_MESSAGE [SL:RECIPIENT Riley ] [SL:CONTENT_EXACT I am going to be late ] ]"}
{"utterance": "What's happening in Dallas", "intent": "get_news_details,question_news,get_location\nConfidence scores: 0.8, 0.7, 0.5", "AMR Graph": "(get_news_details\n     :topic (in\n               :city \"Dallas\"))\n     \nExplanation: The intent type with the highest confidence score is \"get_news_details\" which indicates that the user is looking for news details about a particular topic. Under this intent type, the AMR graph representation shows that the user is interested in events happening in Dallas.", "key_phrase": "happening, Dallas, news details, events", "slot_type": "Dallas, location", "pred_lf": "[IN:get_news_details [SL:location Dallas]]", "gold_lf": "[IN:GET_EVENT [SL:LOCATION Dallas ] ]"}
{"utterance": "Update reminder for today's staff meeting from 1 pm to 2 pm.", "intent": "update_reminder (0.8), get_event (0.6), get_date_time_event (0.6)", "AMR Graph": "(update-reminder\n  :remind (staff-meeting\n            :on today\n            :start-time 1pm\n            :end-time 2pm)))", "key_phrase": "Update reminder, staff meeting, today, 1 pm, 2 pm.", "slot_type": "today's staff meeting, title_event\n1 pm, date_time\n2 pm, date_time", "pred_lf": "[IN:update_reminder [SL:title_event:today's staff meeting] [SL:date_time:1 pm] [SL:date_time:2 pm]]", "gold_lf": "[IN:UPDATE_REMINDER_DATE_TIME [SL:TODO today 's staff meeting ] [SL:DATE_TIME 1 pm ] [SL:DATE_TIME 2 pm ] ]"}
{"utterance": "Remind me to get tacos for dinner", "intent": "create_reminder,create_timer,help_reminder \nConfidence scores: 0.8, 0.6, 0.4", "AMR Graph": "(c / remind-01\n    :purpose (a / acquire-01\n              :object (t / taco)\n              :time (d / dinner)))\n\nExplanation: The sentence is represented by a single clause with the predicate \"remind-01\". The purpose of the reminder is to acquire tacos for dinner, represented by the subgraph starting with \"acquire-01\" and including the object \"taco\" and the time \"dinner\". Since the potential intent type with the highest confidence score is \"create_reminder\", this is the interpretation chosen.", "key_phrase": "get tacos, dinner, remind me", "slot_type": "(tacos, recipes_dish), (dinner, recipes_meal)", "pred_lf": "[IN:create_reminder [SL:tacos recipes_dish] [SL:dinner recipes_meal]]", "gold_lf": "[IN:CREATE_REMINDER [SL:PERSON_REMINDED me ] [SL:TODO get tacos for dinner ] ]"}
{"utterance": "Start the timer at 8:30", "intent": "create_timer (0.8), add_time_timer (0.6), update_timer (0.5)", "AMR Graph": "(create_timer\n      :event (start-01\n               :time (time-of-day :hour 8\n                                   :minute 30)\n               :object (timer)))", "key_phrase": "Start timer, 8:30", "slot_type": "(timer_name, method_timer), (8:30, date_time)", "pred_lf": "[IN:create_timer [SL:method_timer 8:30 date_time]]", "gold_lf": "[IN:CREATE_TIMER [SL:METHOD_TIMER timer ] [SL:DATE_TIME at 8 : 30 ] ]"}
{"utterance": "How many calories are in a Big Mac from McDonald's", "intent": "get_details_news,question_news,get_recipes\nConfidence scores: 0.8,0.7,0.5", "AMR Graph": "(get_details_news\n   /have-quantities\n     :quant 1\n     :quant-of\n       (food\n         :cardinality \"one\"\n         :name (name\n                 :op1 \"a\"\n                 :op2 \"Big Mac\"\n                 :op3 \"from McDonald's\")\n         :calorie  (calorie\n                     :quant \n                        (number\n                           :quant 1\n                           :unit \n                              (unit\n                                :name \"calorie\")))\n         :food-from (establishment\n                       :name \"McDonald's\")))", "key_phrase": "calories, Big Mac, McDonald's", "slot_type": "calories, recipes_unit_nutrition \nBig Mac, recipes_dish \nMcDonald's, recipes_source", "pred_lf": "[IN:get_details_news [SL:calories Big Mac] [SL:recipes_source McDonald's]]", "gold_lf": "[IN:GET_INFO_RECIPES [SL:RECIPES_UNIT_NUTRITION calories ] [SL:RECIPES_DISH Big Mac ] ]"}
{"utterance": "What is the correct temperature for medium rare steak", "intent": "get_temperature_food,question_cooking\nConfidence Scores: 0.7, 0.3", "AMR Graph": "(get_temperature \n   :topic medium_rare_steak \n   :correct true)", "key_phrase": "correct temperature, medium rare steak", "slot_type": "(temperature, weather_temperature_unit), (medium rare steak, recipes_dish)", "pred_lf": "[IN:get_temperature_food [SL:temperature weather_temperature_unit]] [IN:question_cooking [SL:medium rare steak recipes_dish]]", "gold_lf": "[IN:GET_INFO_RECIPES [SL:RECIPES_ATTRIBUTE temperature ] [SL:RECIPES_ATTRIBUTE medium rare ] [SL:RECIPES_DISH steak ] ]"}
{"utterance": "where does ali live?", "intent": "get_location, get_contact, get_info_contact\nConfidence scores: 0.9, 0.8, 0.7", "AMR Graph": "(get_location\n      :arg0 (person\n                :name (name :op \"ali\")))", "key_phrase": "ali, live, location", "slot_type": "(ali, person_reminded), (live, location)", "pred_lf": "[IN:get_location [SL:ali person_reminded] [SL:live location]]", "gold_lf": "[IN:GET_LOCATION [SL:CONTACT ali ] ]"}
{"utterance": "make a call to Xander Brown's mom", "intent": "create_call (0.85), get_call_contact (0.75), get_call (0.6)", "AMR Graph": "(create_call\n     :ARG0 (you)\n     :ARG1 (call\n              :ARG0 (you)\n              :ARG1 (Xander Brown's mom)))", "key_phrase": "make a call, Xander Brown's mom", "slot_type": "Xander Brown's mom, contact_related", "pred_lf": "[IN:create_call] [SL:contact_related Xander Brown's mom]", "gold_lf": "[IN:CREATE_CALL [SL:CONTACT Xander Brown 's mom ] ]"}
{"utterance": "remind me about dinner tonight at 5", "intent": "create_reminder (0.8), get_reminder_date_time (0.7), get_reminder_location (0.5)", "AMR Graph": "(create_reminder \n    :ARG0 (you)\n    :reminder (event \n                :event \"dinner tonight\"\n                :time (time-interval\n                            :op1 (date-entity :month 10 :day 15 :year 2021)\n                            :op2 (date-entity :hour 17 :minute 0 :second 0)))\n)", "key_phrase": "remind, me, dinner tonight, 5", "slot_type": "(dinner tonight, recipes_meal), (5, date_time)", "pred_lf": "[IN:create_reminder [SL:recipes_meal dinner tonight] [SL:date_time 5]]", "gold_lf": "[IN:CREATE_REMINDER [SL:PERSON_REMINDED me ] [SL:TODO dinner ] [SL:DATE_TIME tonight at 5 ] ]"}
{"utterance": "Find me a recipe for curry chicken", "intent": "get_info_recipes (0.95), question_news (0.4), is_true_recipes (0.35)", "AMR Graph": "(get_info\n      :query (recipe\n                :dish (curry-chicken))\n      :requester (person\n                    :role qualifier))", "key_phrase": "recipe, curry chicken", "slot_type": "(recipe, recipes_type), (curry chicken, recipes_dish)", "pred_lf": "[IN:get_info_recipes [SL: recipes_type recipe] [SL: recipes_dish curry chicken]]", "gold_lf": "[IN:GET_RECIPES [SL:RECIPES_DISH curry chicken ] ]"}
{"utterance": "theater events in los angeles this week", "intent": "get_event, get_location, get_date_time_event\nConfidence scores: 0.95, 0.85, 0.7", "AMR Graph": "(get_event\n    :event (event / theater-entertainment-event\n                :location (location / los-angeles)\n                :time (time / this-week)))", "key_phrase": "theater events, los angeles, this week", "slot_type": "theater events, title_event\nlos angeles, location\nthis week, date_time", "pred_lf": "[IN:get_event [SL:title_event:theater events] [SL:location:los angeles] [SL:date_time:this week]]", "gold_lf": "[IN:GET_EVENT [SL:CATEGORY_EVENT theater ] [SL:LOCATION los angeles ] [SL:DATE_TIME this week ] ]"}
{"utterance": "What do I need to make a chicken noodle soup", "intent": "get_info_recipes,question_news,get_recipes\nConfidence scores: \n0.85,0.7,0.6", "AMR Graph": "(get_info\n    :action \"need\"\n    :experiencer (i)\n    :theme \n      (make \n        :food.noodle \n        :quant 1 \n        :mod \n          (make \n            :food.chicken \n            :quant 1))))", "key_phrase": "I, need, chicken noodle soup.", "slot_type": "chicken noodle soup, recipes_dish", "pred_lf": "[IN:get_recipes [SL:recipes_dish chicken noodle soup]]", "gold_lf": "[IN:GET_INFO_RECIPES [SL:RECIPES_DISH chicken noodle soup ] ]"}
{"utterance": "What is the temperature in London?", "intent": "get_weather, 0.95; get_location, 0.8; get_details_news, 0.75", "AMR Graph": "(get_weather\n    :query (temperature\n        :location (city :name \"London\"))))", "key_phrase": "temperature, London", "slot_type": "temperature, weather_temperature_unit\nLondon, location", "pred_lf": "[IN:get_weather [SL:temperature Unit:None] [SL:location London]]", "gold_lf": "[IN:GET_WEATHER [SL:LOCATION London ] ]"}
{"utterance": "Play a bunch of songs from musicals, please.", "intent": "1. create_playlist_music (0.95)\n2. play_music (0.94)\n3. question_music (0.70)", "AMR Graph": "(play-music\n      :performer (you)\n      :playlist (playlist\n                    :songs (bunch\n                             :type (music-from-musicals))))", "key_phrase": "Play, songs, musicals, bunch, please", "slot_type": "bunch of songs, music_type", "pred_lf": "[IN:play_music [SL:music_type musicals] [SL:bunch of songs none]]", "gold_lf": "[IN:PLAY_MUSIC [SL:MUSIC_TYPE songs ] ]"}
{"utterance": "Have Janie and Kyle Coleman messaged me today", "intent": "get_message_contact, get_message, get_contact_method\nConfidence scores: 0.8, 0.6, 0.5", "AMR Graph": "(get_message_contact\n      :recipient (person\n                     :name (name :op \"Janie\")\n                     :name (name :op \"Kyle Coleman\"))\n      :action (message\n                 :sender (person :pronoun \"me\")\n                 :time (day :op \"today\")))", "key_phrase": "Janie, Kyle Coleman, messaged, today, recipient, sender, person, name, message.", "slot_type": "Janie Coleman, attendee\nKyle Coleman, attendee\ntoday, date_time\nmessage, O", "pred_lf": "[IN:get_message_contact [SL:date_time today]]\n[SL:attendee Janie Coleman] \n[SL:attendee Kyle Coleman] \n[IN:get_message] [SL:O message]]", "gold_lf": "[IN:GET_MESSAGE [SL:SENDER Janie ] [SL:SENDER Kyle Coleman ] [SL:RECIPIENT me ] [SL:DATE_TIME today ] ]"}
{"utterance": "Show me family reminders from last week.", "intent": "get_reminder, get_reminder_date_time, get_reminder_location\nNumeric Confidence Scores: 0.9, 0.85, 0.8", "AMR Graph": "(get_reminder\n    :mod-reminder (family)\n    :time (last-week))", "key_phrase": "family reminders, last week", "slot_type": "last week, date_time  \nfamily reminders, todo", "pred_lf": "[IN:get_reminder_date_time [SL:date_time last week]]\n[IN:get_reminder [SL:todo family reminders]]", "gold_lf": "[IN:GET_REMINDER [SL:METHOD_RETRIEVAL_REMINDER Show ] [SL:PERSON_REMINDED me ] [SL:TODO family ] [SL:DATE_TIME from last week ] ]"}
{"utterance": "I'd like to video chat with my cousins Devan, Sharon, Katelynn, and Allyson on Messenger", "intent": "get_contact,create_call,play_media\nConfidence scores: 0.8, 0.7, 0.6", "AMR Graph": "(get_contact\n    :subject (I)\n    :object (person\n                :quant (some)\n                :name (Devan)\n                :name (Sharon)\n                :name (Katelynn)\n                :name (Allyson)\n            )\n    :action (like)\n)\n\nNote: The intent type chosen is get_contact because the sentence is mainly about getting in touch with specific people. The other potential intents could also be valid depending on the context.", "key_phrase": "video chat, cousins, Devan, Sharon, Katelynn, Allyson, Messenger", "slot_type": "cousins Devan, Sharon, Katelynn, Allyson, attendee", "pred_lf": "[IN:get_contact [SL:attendee cousins Devan, Sharon, Katelynn, and Allyson] [SL:media_type video] [SL:app Messenger]]", "gold_lf": "[IN:CREATE_CALL [SL:CONTACT my cousins Devan , Sharon , Katelynn , and Allyson ] [SL:NAME_APP Messenger ] ]"}
{"utterance": "Give me the weather for March 13th", "intent": "get_weather,question_news,get_date_time_event \nConfidence scores: \n0.8,0.6,0.5", "AMR Graph": "(get_weather\n     :arg1 (you)\n     :arg2 (date-entity\n            :month 3\n            :day 13))", "key_phrase": "weather, March 13th, give, me.", "slot_type": "(weather, location), (March 13th, date_time)", "pred_lf": "[IN:get_weather [SL:location weather]]\n[IN:get_date_time_event [SL:date_time March 13th]]", "gold_lf": "[IN:GET_WEATHER [SL:DATE_TIME for March 13th ] ]"}
{"utterance": "turn on spotify and play me some jazz music.", "intent": "1. play_music (0.8)\n2. create_playlist_music (0.6)\n3. get_track_info_music (0.4)", "AMR Graph": "(play_music\n   :entity (music_app\n              :name \"spotify\")\n   :playlist (playlist\n                 :genre \"jazz\"))", "key_phrase": "turn on, spotify, play, jazz music, me", "slot_type": "(spotify, music_provider_name), (play, O), (jazz music, music_type)", "pred_lf": "[IN:play_music [SL:music_provider_name spotify] [SL:music_type jazz music]]", "gold_lf": "[IN:PLAY_MUSIC [SL:MUSIC_PROVIDER_NAME spotify ] [SL:MUSIC_GENRE jazz ] [SL:MUSIC_TYPE music ] ]"}
{"utterance": "Any more bank robberies today", "intent": "get_details_news,question_news,get_stories_news\nConfidence scores: 0.8, 0.7, 0.6", "AMR Graph": "(get_details_news\n    :time (today)\n    :action (bank_robbery\n                :quantifier (some)\n            )\n)", "key_phrase": "bank robberies, today", "slot_type": "bank robberies, news_topic", "pred_lf": "[IN:get_details_news [SL:news_topic bank robberies]]", "gold_lf": "[IN:QUESTION_NEWS [SL:NEWS_TOPIC bank robberies ] [SL:DATE_TIME today ] ]"}
{"utterance": "what is the chance of rain", "intent": "get_weather,question_weather,question_generic\nConfidence scores: 0.85, 0.1, 0.05", "AMR Graph": "The intent type \"question_weather\" with a confidence score of 0.1 is the most applicable here. \n\nAMR graph:\n\n(q / question  \n    :polarity 0 \n    :domain (w / weather \n            :name (r / rain)))", "key_phrase": "chance of rain", "slot_type": "(chance of rain, weather_attribute)", "pred_lf": "[IN:get_weather [SL:weather_attribute chance of rain]]", "gold_lf": "[IN:GET_WEATHER [SL:WEATHER_ATTRIBUTE rain ] ]"}
{"utterance": "What is my first reminder today?", "intent": "get_reminder, get_reminder_date_time, get_reminder_location\nNumeric confidence scores: 0.9, 0.8, 0.7", "AMR Graph": "(get_reminder\n    :query (reminder-expr\n                :person (person :mod possessor)\n                :ordinal first\n                :time (temporal-expr\n                        :date (date-entity :today))))\n                        \nExplanation: The sentence is asking for a reminder, specifically the first one, for the speaker today. The intent type \"get_reminder\" has the highest confidence score, indicating that this is the most likely interpretation of the sentence. The intent types \"get_reminder_date_time\" and \"get_reminder_location\" have lower confidence scores and might not be relevant to the question at hand.", "key_phrase": "first reminder, today.", "slot_type": "(first, ordinal), (reminder, todo), (today, date_time)", "pred_lf": "[IN:get_reminder_date_time [SL:first ordinal] [SL:todo reminder] [SL:date_time today]]", "gold_lf": "[IN:GET_REMINDER [SL:PERSON_REMINDED my ] [SL:ORDINAL first ] [SL:DATE_TIME today ] ]"}
{"utterance": "Should I wear a raincoat tuesday", "intent": "get_weather, get_date_time_event, get_location\nConfidence score: 0.9, 0.8, 0.7", "AMR Graph": "(get_date_time_event\n      :op1 (should)\n      :op2 (wear\n            :op1 I\n            :op2 (raincoat)\n            :op3 (tuesday)))", "key_phrase": "wear a raincoat, Tuesday", "slot_type": "raincoat, O\ntuesday, date_time \nwear, O", "pred_lf": "[IN:get_weather [SL:raincoat O]] [IN:get_date_time_event [SL:date_time tuesday]] [IN:get_location]", "gold_lf": "[IN:GET_WEATHER [SL:WEATHER_ATTRIBUTE raincoat ] [SL:DATE_TIME tuesday ] ]"}
{"utterance": "How hot will it get this month?", "intent": "get_weather,question_news,question_music\nConfidence scores: 0.8,0.6,0.5", "AMR Graph": "(get_weather :time (month) :property (hot))", "key_phrase": "hot, this month, get", "slot_type": "hot, weather_attribute\nthis month, date_time", "pred_lf": "[IN:get_weather [SL:weather_attribute hot] [SL:date_time this month]]", "gold_lf": "[IN:GET_WEATHER [SL:WEATHER_ATTRIBUTE hot ] [SL:DATE_TIME this month ] ]"}
{"utterance": "show me video messages from my girlfriend Nathaniel", "intent": "get_message_contact, get_message, get_contact\nConfidence score: 0.8, 0.6, 0.5", "AMR Graph": "(get-message \n    :ARG0 (get-message-contact \n              :ARG0 (i) \n              :ARG1 (get-contact \n                        :ARG0 (i) \n                        :name \"Nathaniel\")) \n              :confidence 0.8) \n    :ARG1 (video-message) \n    :ARG2 (get-message-owner :ARG0 (i)))", "key_phrase": "video messages, girlfriend, Nathaniel", "slot_type": "(video messages, type_content), (girlfriend Nathaniel, contact)", "pred_lf": "[IN:get_message_contact [SL:type_content:video messages] [SL:contact:girlfriend Nathaniel]]", "gold_lf": "[IN:GET_MESSAGE [SL:TYPE_CONTENT video ] [SL:SENDER my girlfriend Nathaniel ] ]"}
{"utterance": "Where was Michael Jackson born?", "intent": "get_location,question_music,get_life_event\nConfidence scores: 0.6, 0.3, 0.1", "AMR Graph": "(get_location\n        :query (person\n                    :name \"Michael Jackson\")\n        :location-of-born)", "key_phrase": "Michael Jackson, born, location", "slot_type": "Michael Jackson, O\nborn, O\nwhere, location", "pred_lf": "[IN:get_location [SL:person Michael Jackson] [SL:event born] [SL:location where]]", "gold_lf": "[IN:GET_LOCATION [SL:CONTACT Michael Jackson ] ]"}
{"utterance": "What's going on in Cleveland next weekend", "intent": "get_event,question_news,get_location\nConfidence Score: 0.8, 0.15, 0.05", "AMR Graph": "(get_event\n    :query (location \n               :name \"Cleveland\"\n               :time \"next weekend\"\n           )\n)", "key_phrase": "Cleveland, next weekend, event", "slot_type": "Cleveland, location\nnext weekend, date_time", "pred_lf": "[IN:get_event [SL:date_time next weekend] [SL:location Cleveland]]", "gold_lf": "[IN:GET_EVENT [SL:LOCATION Cleveland ] [SL:DATE_TIME next weekend ] ]"}
{"utterance": "Call nephew", "intent": "create_call, get_call, get_call_contact \n\nConfidence scores: 0.4, 0.4, 0.2", "AMR Graph": "(S\n  :ARG0 (I/me)\n  :ARG1 \n    (nephew \n      :name (name :op \"nephew\"))\n  :instance-of \n    (call \n      :intent create_call\n      :confidence 0.4))", "key_phrase": "Call, Nephew", "slot_type": "(nephew, contact)", "pred_lf": "[IN:get_call_contact [SL:contact nephew]]", "gold_lf": "[IN:CREATE_CALL [SL:CONTACT nephew ] ]"}
{"utterance": "reply to the bowling team group with video message", "intent": "get_message_group,send_video_message,create_message\nConfidence Scores: 0.7, 0.6, 0.4", "AMR Graph": "(get_message_group\n   :receiver (bowling_team_group)\n   :content (send_video_message\n               :message (create_message)\n             )\n)", "key_phrase": "bowling team group, video message, reply", "slot_type": "(bowling team group, group), (video message, method_recipes)", "pred_lf": "[IN:create_message [SL:group (bowling team group, group)] [SL:method_recipes (video message, method_recipes)]] or \n[IN:get_message_group [SL:group (bowling team group, group)]] or \n[IN:send_video_message [SL:group (bowling team group, group)] [SL:method_recipes (video message, method_recipes)]]", "gold_lf": "[IN:SEND_MESSAGE [SL:GROUP bowling team ] [SL:TYPE_CONTENT video ] ]"}
{"utterance": "call Rima Markette 's cousin", "intent": "get_call_contact, get_contact\nConfidence score: 0.9, 0.8", "AMR Graph": "(get_contact\n      :ARG0 (person :wiki \"Rima Markette\")\n      :ARG1 (cousin)\n)", "key_phrase": "Rima Markette, cousin", "slot_type": "Rima Markette's cousin, contact", "pred_lf": "[IN:get_call_contact [SL:contact Rima Markette's cousin]]", "gold_lf": "[IN:CREATE_CALL [SL:CONTACT Rima Markette ' s cousin ] ]"}
{"utterance": "Play blink 182 last album", "intent": "play_music (0.95), question_music (0.85), get_track_info_music (0.80)", "AMR Graph": "(play_music\n  :action (play\n             :object (music\n                        :name \"blink 182 last album\")))", "key_phrase": "Play, blink 182 last album, music, name", "slot_type": "(blink 182, music_artist_name), (last album, music_album_title)", "pred_lf": "[IN:play_music [SL:music_artist_name blink 182] [SL:music_album_title last album]]", "gold_lf": "[IN:PLAY_MUSIC [SL:MUSIC_ARTIST_NAME blink 182 ] [SL:MUSIC_TYPE album ] ]"}
{"utterance": "stop calling kerry Brandon", "intent": "cancel_call,switch_call,update_call\nConfidence Scores: 0.7,0.6,0.5", "AMR Graph": "(cancel_call\n        :subject (you)\n        :object (call\n                   :callee (person\n                             :name \"kerry Brandon\")\n                   :action (stop-action))))\n    \nExplanation: The intent type with the highest confidence score is chosen. The intent type cancel_call is selected. The subject of the sentence is \"you\". The object of the sentence is a \"call\" action, where the \"callee\" is a person with the name \"kerry Brandon\" and the \"action\" is to stop. Therefore, the AMR graph above represents the given sentence and intent type.", "key_phrase": "stop calling, kerry Brandon", "slot_type": "kerry, person_reminded\nBrandon, person_reminded", "pred_lf": "[IN: cancel_call [SL: person_reminded Brandon] [SL: person_reminded kerry]]", "gold_lf": "[IN:END_CALL [SL:CONTACT kerry Brandon ] ]"}
{"utterance": "Set a meeting alarm for 9am Tuesday", "intent": "create_alarm,create_timer,update_alarm\nConfidence score: 0.9, 0.8, 0.7", "AMR Graph": "(create_alarm :time (day :weekday (named-entity :name \"Tuesday\") :time \"T09:00\"))", "key_phrase": "Set meeting alarm, 9am, Tuesday", "slot_type": "(meeting alarm, alarm_name), (9am Tuesday, date_time)", "pred_lf": "[IN:create_alarm [SL:alarm_name meeting alarm] [SL:date_time 9am Tuesday]]", "gold_lf": "[IN:CREATE_ALARM [SL:ALARM_NAME meeting ] [SL:DATE_TIME for 9 am Tuesday ] ]"}
{"utterance": "Invite stepfather to call", "intent": "get_call_contact,create_call,get_contact\nNumeric confidence scores: 0.8, 0.6, 0.4", "AMR Graph": "(get_call_contact :ARG1 (INVITE :ARG2 (CALL :ARG1 (STEPSON :mod (STEPFATHER)))) :conf 0.8)", "key_phrase": "Invite, stepfather, call", "slot_type": "(stepfather, contact)", "pred_lf": "[IN:get_call_contact [SL:contact stepfather]]", "gold_lf": "[IN:UPDATE_CALL [SL:CONTACT_ADDED stepfather ] ]"}
{"utterance": "Show me text messages from Liz via Facebook", "intent": "get_message_contact, get_message, get_contact\nConfidence scores: 0.6, 0.4, 0.2", "AMR Graph": "(get_message_contact\n    :subject (I)\n    :object (text_message\n                :mod (Facebook)\n                :sender (Liz)\n            )\n)", "key_phrase": "text messages, Liz, Facebook", "slot_type": "Liz, contact_method\nFacebook, contact_related", "pred_lf": "[IN:get_message_contact [SL:contact_method Facebook] [SL:person Liz]]", "gold_lf": "[IN:GET_MESSAGE [SL:RECIPIENT Liz ] [SL:NAME_APP Facebook ] ]"}
{"utterance": "Do I have any reminders on Monday?", "intent": "get_reminder,get_reminder_date_time,get_date_time_event\nNumeric confidence scores: 0.8, 0.7, 0.6", "AMR Graph": "(get-reminders\n     :date-time (date-entity\n                    :weekday \"Monday\")\n     :person (person-entity\n                 :referential-indicator (self-indicator)))", "key_phrase": "reminders, Monday, self-indicator", "slot_type": "Monday, date_time", "pred_lf": "[IN:get_reminder_date_time [SL:date_time Monday]]", "gold_lf": "[IN:GET_REMINDER [SL:PERSON_REMINDED I ] [SL:DATE_TIME on Monday ] ]"}
{"utterance": "list todays video calls", "intent": "get_call, get_call_time, get_date_time_event\nConfidence scores: 0.8, 0.7, 0.6", "AMR Graph": "(sent\n  :op1 (list\n         :op1 (today)\n         :op2 (video_call))\n  :pred (get))", "key_phrase": "today, video calls", "slot_type": "(todays, date_time), (video calls, category_event)", "pred_lf": "[IN:get_call_time [SL:date_time:today]] [IN:get_call [SL:category_event:video_calls]]", "gold_lf": "[IN:GET_CALL [SL:DATE_TIME todays ] ]"}
{"utterance": "What are the winning lotto numbers", "intent": "get_details_news,question_news,get_info_recipes\nConfidence score:\n0.6,0.3,0.1", "AMR Graph": "(get_details\n    :ARG0 (you)\n    :topic (winning_lotto_numbers))\n\nNote: The intent type \"get_details_news\" fits the sentence the most and has the highest confidence score. The AMR graph is a simple Neo-Davidsonian representation of the sentence where the intent is to ask for information about the winning lotto numbers.", "key_phrase": "winning lotto numbers, get details", "slot_type": "winning lotto numbers, O", "pred_lf": "[IN:get_details_news [SL:winning lotto numbers O]]", "gold_lf": "[IN:QUESTION_NEWS [SL:NEWS_TOPIC winning lotto numbers ] ]"}
{"utterance": "how much calories are present in 1 burger", "intent": "get_info_recipes (0.8), question_news (0.6), get_details_news (0.5)", "AMR Graph": "(get_info_recipes / want-01\n    :ARG0 (you)\n    :ARG1 (calories-quant-entity / calorie\n            :quant 1\n            :domain burger))", "key_phrase": "calories, 1 burger", "slot_type": "(calories, recipes_unit_nutrition), (burger, recipes_dish), (1, amount)", "pred_lf": "[IN:get_info_recipes [SL:recipes_unit_nutrition calories] [SL:recipes_dish burger] [SL:amount 1]]", "gold_lf": "[IN:GET_INFO_RECIPES [SL:RECIPES_ATTRIBUTE how much ] [SL:RECIPES_UNIT_NUTRITION calories ] [SL:RECIPES_DISH burger ] ]"}
{"utterance": "call Giovanni Heath using Messenger", "intent": "get_call_contact, get_call, create_call\nConfidence scores: 0.75, 0.2, 0.05", "AMR Graph": "(get_call_contact\n      :agent (name :op \"Giovanni Heath\")\n      :action (call\n                 :instrument (messenger)))", "key_phrase": "Giovanni Heath, call, Messenger", "slot_type": "Giovanni Heath, person_reminded \nMessenger, contact_method", "pred_lf": "[IN:get_call_contact [SL:person_reminded Giovanni Heath] [SL:contact_method Messenger]]", "gold_lf": "[IN:CREATE_CALL [SL:CONTACT Giovanni Heath ] [SL:NAME_APP Messenger ] ]"}
{"utterance": "Set alarms for Monday at 8am and 9am", "intent": "create_alarm,update_alarm,create_timer\nConfidence score: 0.8, 0.7, 0.6", "AMR Graph": "(create-alarm\n      :time (weekday-entity :weekday \"monday\")\n      :alarm (and \n               (alarm-entity :time \"8am\") \n               (alarm-entity :time \"9am\"))))", "key_phrase": "Set alarms, Monday, 8am, 9am", "slot_type": "(Monday, date_time), (8am, date_time), (9am, date_time), (alarms, todo)", "pred_lf": "[IN:create_alarm [SL:date_time Monday] [SL:date_time 8am] [SL:date_time 9am] [SL:todo alarms]]", "gold_lf": "[IN:CREATE_ALARM [SL:DATE_TIME for Monday at 8 am and 9 am ] ]"}
{"utterance": "Play music from the Top 100 charts", "intent": "play_music,question_music,get_track_info_music\nConfidence scores: 0.85, 0.8, 0.7", "AMR Graph": "(play_music\n      :ARG0 (you)\n      :instrument (music)\n      :location (Top_100_charts))", "key_phrase": "play music, Top 100 charts", "slot_type": "(Top 100 charts, music_radio_id) \n(Play music, method_recipes)", "pred_lf": "[IN:play_music [SL:method_recipes Play music] [SL:music_radio_id Top 100 charts]]", "gold_lf": "[IN:PLAY_MUSIC [SL:MUSIC_TYPE music ] ]"}
{"utterance": "Play Hozier", "intent": "play_music,question_music,get_track_info_music\nConfidence score: 0.6, 0.25, 0.1", "AMR Graph": "(play_music\n    :action (play\n                :artist \"Hozier\"))", "key_phrase": "Play Hozier, play music, artist Hozier", "slot_type": "(Hozier, music_artist_name)", "pred_lf": "[IN:play_music [SL:music_artist_name Hozier]]", "gold_lf": "[IN:PLAY_MUSIC [SL:MUSIC_ARTIST_NAME Hozier ] ]"}
{"utterance": "Remove the reminder about getting my toes done this weekend.", "intent": "delete_reminder,update_reminder,update_reminder_todo\nConfidence Scores: 0.7, 0.5, 0.4", "AMR Graph": "(remove_reminder\n  :remind\n    (todo\n      :description (get_my_toes_done_this_weekend)))", "key_phrase": "Remove reminder, getting my toes done, this weekend.", "slot_type": "(reminder, todo), (toes done, todo), (weekend, date_time)", "pred_lf": "[IN: delete_reminder [SL: reminder, getting my toes done] [SL: weekend, this weekend]]", "gold_lf": "[IN:DELETE_REMINDER [SL:TODO getting my toes done ] [SL:DATE_TIME this weekend ] ]"}
{"utterance": "Begin video chat with Eric", "intent": "create_call, get_call_contact, switch_call \nConfidence scores: \n0.8, 0.7, 0.5", "AMR Graph": "(create_call \n      :ARG1 (person :name \"I\")\n      :ARG2 (person :name \"Eric\")\n      :medium (video-chat))", "key_phrase": "video chat, Eric", "slot_type": "Eric, contact_related \nvideo chat, method_recipes", "pred_lf": "[IN:create_call [SL:method_recipes video chat] \n[SL:contact_related Eric]]", "gold_lf": "[IN:CREATE_CALL [SL:CONTACT Eric ] ]"}
{"utterance": "Do you know Tim's number?", "intent": "get_contact,question_contact,get_message_contact\nNumeric confidence scores: 0.8,0.5,0.4", "AMR Graph": "(get_contact\n      :subject (you)\n      :object (number\n                  :possessor (Tim)))", "key_phrase": "know, Tim's number, you", "slot_type": "(Tim, person_reminded), (number, phone_number)", "pred_lf": "[IN:get_contact [SL:person_reminded Tim] [SL:phone_number]]", "gold_lf": "[IN:GET_CONTACT_METHOD [SL:CONTACT Tim ] [SL:CONTACT_METHOD number ] ]"}
{"utterance": "Can you confirm with Stacy that she knows to be at the theater at 6 tonight?", "intent": "get_info_contact, get_contact, get_date_time_event\nNumeric confidence scores: 0.8, 0.7, 0.6", "AMR Graph": "(get_info_contact\n      :person (name \"you\")\n      :role-of (confirm\n                 :with (person-name \"Stacy\")\n                 :event (be-at\n                          :patient (place :theater)\n                          :time (date-entity :weekday \"today\"\n                                                     :hour 18))))", "key_phrase": "confirm with Stacy, she knows, theater, 6 tonight", "slot_type": "Stacy, person_reminded\ntheater, location\n6 tonight, date_time", "pred_lf": "[IN:get_info_contact [SL:person_reminded Stacy]]\nOR\n[IN:get_contact [SL:person_reminded Stacy]]\nOR\n[IN:get_date_time_event [SL:location theater] [SL:date_time 6 tonight]]", "gold_lf": "[IN:SEND_MESSAGE [SL:RECIPIENT Stacy ] [SL:CONTENT_EXACT she knows to be at the theater at 6 tonight ] ]"}
{"utterance": "How many alarms did I set", "intent": "get_alarm, get_alarm_amount, get_details_alarm - 0.9, 0.8, 0.7", "AMR Graph": "(get_alarm_amount\n    :quantified-entity (I)\n    :alarm-count (many)\n    :action (set))", "key_phrase": "alarms, set, how many", "slot_type": "alarms, alarm_name", "pred_lf": "[IN:get_alarm_amount] [SL:alarms]", "gold_lf": "[IN:GET_ALARM ]"}
{"utterance": "turn clock on for 7am", "intent": "create_timer (0.9), add_time_timer (0.8), update_timer (0.7)", "AMR Graph": "(S\n  /create_timer\n  :ARG0 (you)\n  :purpose (turn clock on)\n  :time \"7am\")", "key_phrase": "turn clock on, 7am", "slot_type": "clock, alarm_name \n7am, date_time", "pred_lf": "[IN:create_timer] [SL:clock 7am] [SL:alarm_name turn]", "gold_lf": "[IN:CREATE_ALARM [SL:DATE_TIME for 7 am ] ]"}
{"utterance": "please let me see the friends", "intent": "get_mutual_friends, get_info_contact, get_contact\nNumeric confidence scores:\n0.9, 0.8, 0.6", "AMR Graph": "( determine-purpose \n   :purpose (lambda \n               :polarity +\n               :domain (contact-information\n                          :contact (lambda\n                                     :polarity +\n                                     :person (pronoun :id \"me\")))) \n   :intent get_mutual_friends)\n \n\nNote: The AMR graph is based on the highest confidence score for the given intents.", "key_phrase": "see friends, let me, get mutual friends, contact information", "slot_type": "friends, group", "pred_lf": "[IN:get_mutual_friends [SL:friends friends]]", "gold_lf": "[IN:GET_CONTACT [SL:TYPE_RELATION friends ] ]"}
{"utterance": "how do you make baked mac and cheese", "intent": "get_info_recipes,0.95,get_recipes,0.90,question_news,0.85", "AMR Graph": "(get_info_recipes\n     :arg1 (you)\n     :action (make\n                :action-ingredient (baked mac and cheese)))", "key_phrase": "make, baked mac and cheese", "slot_type": "baked mac and cheese, recipes_dish\nmake, method_recipes", "pred_lf": "[IN:get_info_recipes [SL:recipes_dish baked mac and cheese] [SL:method_recipes make]]", "gold_lf": "[IN:GET_RECIPES [SL:RECIPES_COOKING_METHOD baked ] [SL:RECIPES_DISH mac and cheese ] ]"}
{"utterance": "Any late breaking news today", "intent": "get_details_news,question_news,get_stories_news\nConfidence scores: \n0.8,0.75,0.7", "AMR Graph": "(get_details_news\n :ARG1 (today)\n :mod (late breaking)\n :ARG2 (news))\n\nNote: The confidence scores provided do not have any relevance in creating an AMR graph representation. It is based solely on the sentence and its potential intents.", "key_phrase": "late breaking news, today", "slot_type": "(late breaking news, news_topic)", "pred_lf": "[IN:get_details_news [SL:news_topic late breaking news]]", "gold_lf": "[IN:GET_STORIES_NEWS [SL:NEWS_REFERENCE breaking ] [SL:NEWS_TYPE news ] [SL:DATE_TIME today ] ]"}
{"utterance": "When did Kevin start working at Michelin?", "intent": "get_job, get_employer, get_employment_time\nNumeric confidence scores: 0.85, 0.75, 0.7", "AMR Graph": "(get_job\n      :ARG1 (person :name \"Kevin\")\n      :ARG2 (org :name \"Michelin\")\n      :time (when \n              :op1 (start \n                      :ARG1 (job :name \"working\")\n                      :ARG2 (person :name \"Kevin\")\n                      :ARG3 (org :name \"Michelin\")))))", "key_phrase": "Kevin, working, Michelin, start", "slot_type": "Kevin, O\nworking, O\nMichelin, location\nstart, O\nemployment time, date_time\njob, job\nemployer, employer", "pred_lf": "[IN:get_employment_time [SL:Kevin Kevin] [SL:working working] [SL:Michelin location] [SL:start O]]", "gold_lf": "[IN:GET_EMPLOYMENT_TIME [SL:CONTACT Kevin ] [SL:EMPLOYER Michelin ] ]"}
{"utterance": "set timer for 60 min", "intent": "create_timer (0.95), add_time_timer (0.90), update_timer (0.85)", "AMR Graph": "(set-timer :duration 60 :time-unit \"minutes\")", "key_phrase": "set timer, 60 min", "slot_type": "(set timer, todo), (60 min, method_timer)", "pred_lf": "[IN:create_timer [SL:todo set timer] [SL:method_timer 60 min]]", "gold_lf": "[IN:CREATE_TIMER [SL:METHOD_TIMER timer ] [SL:DATE_TIME for 60 min ] ]"}
{"utterance": "Add my Mum to the current call", "intent": "create_call,add_call_contact,get_call_contact\nConfidence scores: 0.9, 0.8, 0.7", "AMR Graph": "(add \n    :arg0 (person :poss my :name Mum) \n    :arg1 (call :modification (current)))\nIntent type: create_call", "key_phrase": "my Mum, current call", "slot_type": "(Mum, attendee), (current call, group), (Add, O)", "pred_lf": "[IN:create_call [SL:group current call] [SL:attendee Mum]]", "gold_lf": "[IN:UPDATE_CALL [SL:CONTACT_ADDED my Mum ] ]"}
{"utterance": "Set alarms for Friday, Saturday and Sunday", "intent": "create_alarm (0.9), update_alarm (0.6), get_alarm (0.5)", "AMR Graph": "(create_alarm :time (list\n\t\t            :time \"Friday\"\n\t\t            :time \"Saturday\"\n\t\t            :time \"Sunday\")\n\t            :event \"set-alarm\"))", "key_phrase": "Set alarms, Friday, Saturday, Sunday, set-alarm", "slot_type": "(Friday, date_time), (Saturday, date_time), (Sunday, date_time), (alarms, alarm_name), (create, method_recipes)", "pred_lf": "[IN:create_alarm [SL:Friday date_time] [SL:Saturday date_time] [SL:Sunday date_time]] [SL:alarms alarm_name]", "gold_lf": "[IN:CREATE_ALARM [SL:DATE_TIME for Friday , Saturday and Sunday ] ]"}
{"utterance": "Search for pasta recipes", "intent": "get_info_recipes,question_news,get_recipes\nConfidence scores: 0.9, 0.8, 0.7", "AMR Graph": "(get_info\n      :topic (recipe\n                 :name (pasta)))\n                 \nNote: The AMR represents the intent type get_info_recipes, with high confidence score (0.9), by searching for information related to pasta recipes.", "key_phrase": "search, pasta recipes", "slot_type": "(pasta recipes, recipes_dish)", "pred_lf": "[IN:get_recipes [SL:recipes_dish pasta recipes]]", "gold_lf": "[IN:GET_RECIPES [SL:RECIPES_DISH pasta ] ]"}
{"utterance": "Where does Joan live?", "intent": "get_location, get_contact, get_info_contact\nConfidence scores: 0.8, 0.7, 0.6", "AMR Graph": "(get_location\n  :ARG1 (person\n          :wiki \"Joan\"\n          :name \"Joan\")\n  :location (place\n              :name \"live\"))", "key_phrase": "Joan, live, location", "slot_type": "(Joan, contact_person), (live, location)", "pred_lf": "[IN:get_location [SL:Joan contact_person] [SL:live location]]", "gold_lf": "[IN:GET_LOCATION [SL:CONTACT Joan ] ]"}
{"utterance": "What is the coolest temperature on record for San Antonio Texas in the month of December", "intent": "1. get_weather (0.9)\n2. get_location (0.8)\n3. question_news (0.6)", "AMR Graph": "(get-temperature\n      :location (location :name \"San Antonio Texas\")\n      :time (time :month \"December\")\n      :comparative (temperature :value \"coolest\" :unit \"degree\")\n)", "key_phrase": "coolest temperature, record, San Antonio Texas, December.", "slot_type": "coolest temperature, weather_attribute\nrecord, O\nSan Antonio, location\nTexas, O\nmonth, O\nDecember, date_time", "pred_lf": "[IN:get_weather [SL:coolest temperature 1] [SL:weather_attribute (record)]] [IN:get_location [SL:location (San Antonio)] [SL:O (Texas)]] [SL:date_time (December)]", "gold_lf": "[IN:GET_WEATHER [SL:WEATHER_ATTRIBUTE coolest ] [SL:LOCATION San Antonio Texas ] [SL:DATE_TIME in the month ] [SL:DATE_TIME December ] ]"}
{"utterance": "What will the temperature be in Orlando today", "intent": "get_weather,question_weather,question_temperature\nConfidence scores: 0.8,0.75,0.7", "AMR Graph": "(get_weather\n    :location (orlando)\n    :time (today))", "key_phrase": "temperature, Orlando, today", "slot_type": "Orlando, location\ntemperature, weather_temperature_unit\ntoday, date_time", "pred_lf": "[IN:get_weather [SL:location Orlando] [SL:date_time today] [SL:weather_temperature_unit temperature]]", "gold_lf": "[IN:GET_WEATHER [SL:LOCATION Orlando ] [SL:DATE_TIME today ] ]"}
{"utterance": "not available today", "intent": "get_availability,help_reminder,get_weather\nConfidence score: 0.9,0.6,0.5", "AMR Graph": "(get_availability\n  :arg1 (today\n            :polarity -\n            :time (today\n                    :quant today)))\n  \nOR\n\n(help_reminder\n  :polarity -\n  :condition (today\n               :polarity -\n               :time (today\n                       :quant today)))", "key_phrase": "not available, today", "slot_type": "not available, N/A", "pred_lf": "[IN:get_availability] [SL:not available, N/A]", "gold_lf": "[IN:SET_UNAVAILABLE ]"}
{"utterance": "Friends of Vinnie", "intent": "get_contact, get_mutual_friends, get_info_contact\nConfidence scores: 0.9, 0.8, 0.7", "AMR Graph": "Here's one possible AMR graph representation:\n\n(get_contact\n  :intent (friendship\n            :friend (person\n                      :name \"Vinnie\")\n            :contact ?contact))\n                      \nNote: This interpretation assumes that the intent behind the sentence is to get in touch with someone who is a friend of Vinnie. The confidence scores for the other potential intents suggest that this interpretation is the most likely.", "key_phrase": "Vinnie's friends, get in touch, friend, person named Vinnie, contact.", "slot_type": "(Friends, group), (Vinnie, contact)", "pred_lf": "[IN:get_contact [SL:contact Vinnie]] \nOR [IN:get_mutual_friends [SL:contact Vinnie] [SL:group Friends]] \nOR [IN:get_info_contact [SL:contact Vinnie]]", "gold_lf": "[IN:GET_CONTACT [SL:TYPE_RELATION Friends ] [SL:CONTACT_RELATED Vinnie ] ]"}
{"utterance": "any news updates?", "intent": "get_details_news (0.8), question_news (0.7), get_stories_news (0.6)", "AMR Graph": "(get_details_news\n    :ARG0 (you)\n    :topic (news))\n\nor\n\n(question_news\n    :ARG0 (you)\n    :topic (news))\n\nor\n\n(get_stories_news\n    :ARG0 (you)\n    :topic (news))", "key_phrase": "news updates, any news, you, topic", "slot_type": "news_updates, news_topic", "pred_lf": "[IN:get_details_news] [SL:news_updates any] [SL:news_topic updates]", "gold_lf": "[IN:GET_STORIES_NEWS [SL:NEWS_TYPE news ] ]"}
{"utterance": "Add a timer for 5pm", "intent": "create_timer,add_time_timer,update_timer\nConfidence score: \n0.95,0.90,0.85", "AMR Graph": "(create_timer / intention\n      :action (add-01 / add\n                  :quant (timer / timer\n                              :mod (for / for\n                                        :time (time-of-day / 5pm))))))", "key_phrase": "Add a timer, for 5pm, create_timer/intention, add-01/add, timer, for/time-of-day, 5pm", "slot_type": "(timer_name, method_timer), (5pm, date_time)", "pred_lf": "[IN:create_timer [SL:timer_name add_time_timer] [SL:5pm date_time]]", "gold_lf": "[IN:CREATE_TIMER [SL:METHOD_TIMER timer ] [SL:DATE_TIME for 5 pm ] ]"}
{"utterance": "call Whatsapp Gavin", "intent": "get_call,create_call,play_media\nConfidence scores: 0.8, 0.6, 0.4", "AMR Graph": "(call\n     :ARG0 (music_player :name \"Whatsapp\")\n     :ARG1 (person :name \"Gavin\"))", "key_phrase": "call, Whatsapp, Gavin", "slot_type": "(call, O), (Whatsapp, method_recipes), (Gavin, contact)", "pred_lf": "[IN:get_call [SL:contact Gavin] [SL:method_recipes Whatsapp] [SL:O call]]", "gold_lf": "[IN:CREATE_CALL [SL:NAME_APP Whatsapp ] [SL:CONTACT Gavin ] ]"}
{"utterance": "Set a reminder I have an interview this Thursday at 4 p.m.", "intent": "create_reminder (0.95), get_date_time_event (0.85), get_details_news (0.7)", "AMR Graph": "(create_reminder\n      :reminder (reminder\n                  :event (interview\n                            :time (time :quant 4\n                                       :unit (time-unit :name p.m.))\n                            :date (date-entity :weekday Thursday)))\n                  :action set))", "key_phrase": "Set a reminder, interview, Thursday, 4 p.m.", "slot_type": "reminder, todo\ninterview, job\nThursday, date_time\n4 p.m., date_time", "pred_lf": "[IN:create_reminder] [SL:reminder todo] [SL:interview job] [SL:date_time Thursday] [SL:date_time 4 p.m.]", "gold_lf": "[IN:CREATE_REMINDER [SL:PERSON_REMINDED I ] [SL:TODO an interview ] [SL:DATE_TIME this Thursday at 4 p.m ] ]"}
{"utterance": "How many grams of protein are in a glass of skim milk", "intent": "1) get_nutrition_info\n2) question_nutrition\n3) get_measurement_conversion\nConfidence scores: 0.8, 0.5, 0.4", "AMR Graph": "(get_nutrition_info\n\t  :food (skim :mod milk)\n\t  :nutrient protein\n\t  :quantity (number 1)\n\t  :unit gram)", "key_phrase": "grams of protein, glass of skim milk", "slot_type": "(grams, recipes_unit_measurement), (protein, recipes_type_nutrition), (skim milk, recipes_unit_nutrition)", "pred_lf": "[IN:get_nutrition_info [SL:grams recipes_unit_measurement] [SL:protein recipes_type_nutrition] [SL:skim milk recipes_unit_nutrition]]", "gold_lf": "[IN:GET_INFO_RECIPES [SL:RECIPES_ATTRIBUTE How many ] [SL:RECIPES_UNIT_NUTRITION grams ] [SL:RECIPES_TYPE_NUTRITION protein ] [SL:RECIPES_UNIT_MEASUREMENT glass ] [SL:RECIPES_DISH skim milk ] ]"}
{"utterance": "Set alarm to wake me in 30 minutes.", "intent": "1. create_alarm (0.90)\n2. add_time_timer (0.70)\n3. update_alarm (0.60)", "AMR Graph": "(c / create-01\n      :ARG1 (a / alarm\n                   :time (t / time-interval\n                                  :unit minute\n                                  :quant 30))\n      :ARG2 (m / me))", "key_phrase": "Set alarm, wake me, 30 minutes.", "slot_type": "(alarm_name, todo), (method_timer, method_timer), (amount, O)", "pred_lf": "[IN:create_alarm [SL:alarm_name Set] [SL:method_timer WakeMe] [SL:amount 30]]", "gold_lf": "[IN:CREATE_ALARM [SL:DATE_TIME in 30 minutes ] ]"}
{"utterance": "set a timer for an hour", "intent": "add_time_timer, create_timer, update_timer\nConfidence scores: 0.9, 0.75, 0.7", "AMR Graph": "(set \n      :mode imperative \n      :event (timer \n                  :action add \n                  :time (interval \n                              :quant 1 \n                              :unit hour)))", "key_phrase": "set a timer, add time, 1 hour, imperative mode", "slot_type": "(set, O), (timer, todo), (hour, amount)", "pred_lf": "[IN:add_time_timer [SL:todo timer] [SL:amount hour]]", "gold_lf": "[IN:CREATE_TIMER [SL:METHOD_TIMER timer ] [SL:DATE_TIME for an hour ] ]"}
{"utterance": "Show me reminders for tomorrow", "intent": "get_reminder, get_reminder_date_time, get_reminder_location\nConfidence scores: 0.9, 0.6, 0.4", "AMR Graph": "(get_reminder\n   :arg0 (person :name \"I\")\n   :arg1 (reminders\n           :time (date-entity :weekday \"tomorrow\")))", "key_phrase": "reminders, tomorrow", "slot_type": "(reminders, todo), (tomorrow, date_time)", "pred_lf": "[IN:get_reminder_date_time [SL:reminders todo] [SL:tomorrow date_time]]", "gold_lf": "[IN:GET_REMINDER [SL:METHOD_RETRIEVAL_REMINDER Show ] [SL:PERSON_REMINDED me ] [SL:DATE_TIME for tomorrow ] ]"}
{"utterance": "How many calories in a pickle", "intent": "get_info_recipes,0.8\nquestion_food,0.6\nget_nutrition_info,0.5", "AMR Graph": "(q / question\n      :intent (g / get_info_recipes)\n      :subject (p / pickle\n                    :mod (c / calorie)\n                    :quant (n / many)))", "key_phrase": "calories, pickle.", "slot_type": "(calories, recipes_unit_nutrition), (pickle, recipes_included_ingredient)", "pred_lf": "[IN:get_nutrition_info [SL:calories recipes_unit_nutrition] [SL:pickle recipes_included_ingredient]]", "gold_lf": "[IN:GET_INFO_RECIPES [SL:RECIPES_ATTRIBUTE How many ] [SL:METHOD_RECIPES calories ] [SL:RECIPES_INCLUDED_INGREDIENT pickle ] ]"}
{"utterance": "send a message to judy that i just arrived", "intent": "get_message_contact,send_message,get_contact\nNumerical confidence scores:\n0.9,0.7,0.6", "AMR Graph": "(send :ARG1 (message :ARG1 (contact :ARG1 \"judy\") :message-body \"i just arrived\"))", "key_phrase": "send a message, judy, just arrived", "slot_type": "send message, method_recipes \njudy, contact_person \njust arrived, attribute_event", "pred_lf": "[IN: send_message [SL: send message method_recipes] [SL: contact_person judy] [SL: attribute_event just arrived]]", "gold_lf": "[IN:SEND_MESSAGE [SL:RECIPIENT judy ] [SL:CONTENT_EXACT i just arrived ] ]"}
{"utterance": "Tell me what's going on in local news.", "intent": "get_details_news,question_news,get_stories_news\nConfidence scores: 0.9,0.7,0.5", "AMR Graph": "(get_details_news\n   :ARG0 (speaker)\n   :ARG1 (what's going on in local news))", "key_phrase": "Tell, what's going on, local news.", "slot_type": "(local news, location), (get going, method_recipes), (news, news_type)", "pred_lf": "[IN:get_details_news [SL:location local news]] [IN:question_news] [IN:get_stories_news [SL:news_type local news]]", "gold_lf": "[IN:GET_STORIES_NEWS [SL:NEWS_CATEGORY local ] [SL:NEWS_TYPE news ] ]"}
{"utterance": "Change my hair appointment reminder from 3 to 4", "intent": "update_reminder_date_time (0.85), update_reminder (0.75), update_reminder_todo (0.65)", "AMR Graph": "(update_reminder_date_time\n      :ARG0 (I)\n      :ARG1 (hair_appointment_reminder\n              :ARG0-of (change))\n      :ARG2 (4)\n      :ARG3 (3)\n)\n\nwhere \"I\" represents the speaker, and \"hair_appointment_reminder\" is a reminder for the speaker's hair appointment. The intent is to update the time of the reminder from 3 to 4.", "key_phrase": "hair appointment reminder, update reminder date time, 3, 4", "slot_type": "hair appointment reminder, todo\n3, ordinal\n4, ordinal", "pred_lf": "[IN:update_reminder_date_time] [SL:hair appointment reminder 3 ordinal] [SL:hair appointment reminder 4 ordinal]", "gold_lf": "[IN:UPDATE_REMINDER_DATE_TIME [SL:PERSON_REMINDED my ] [SL:TODO hair appointment ] [SL:DATE_TIME from 3 ] [SL:DATE_TIME to 4 ] ]"}
{"utterance": "play some garth brooks", "intent": "play_music,0.9,question_music,0.5,get_track_info_music,0.4", "AMR Graph": "(play_music :action (play :entity (some :artist (garth_brooks))))", "key_phrase": "play, garth brooks", "slot_type": "('play', O), ('garth brooks', music_artist_name)", "pred_lf": "[IN:play_music [SL:O] [SL:music_artist_name garth brooks]]", "gold_lf": "[IN:PLAY_MUSIC [SL:MUSIC_ARTIST_NAME garth brooks ] ]"}
{"utterance": "How many birthdays are on September 13th, 1973?", "intent": "get_date_time_event, get_age, get_event\nConfidence scores: 0.8, 0.7, 0.5", "AMR Graph": "(get_event\n      :event (count\n                :quant (date-entity\n                          :year 1973\n                          :month 9\n                          :day 13)\n                :arg \"birthdays\"))", "key_phrase": "birthdays, September 13th, 1973", "slot_type": "September 13th, 1973, date_time", "pred_lf": "[IN:get_date_time_event [SL:date_time September 13th, 1973]] [SL:event birthdays]", "gold_lf": "[IN:GET_CONTACT [SL:DATE_TIME on September 13th , 1973 ] ]"}
{"utterance": "fashion shows", "intent": "get_details_news, get_stories_news, question_news\nConfidence scores: 0.9, 0.8, 0.7", "AMR Graph": "(purpose / fashion-show\n      :intent get_details_news\n      :confidence 0.9)", "key_phrase": "fashion shows", "slot_type": "fashion shows, news_topic", "pred_lf": "[IN:get_details_news] [SL:news_topic fashion shows]", "gold_lf": "[IN:GET_EVENT [SL:CATEGORY_EVENT fashion shows ] ]"}
{"utterance": "Edit the reminder for the baby shower on the 17th to include the location, 45 baker street.", "intent": "1. update_reminder (0.8)\n2. get_reminder (0.7)\n3. create_reminder (0.6)", "AMR Graph": "(update-reminder\n      :remind (baby-shower\n                :date 17th)\n      :include (location \"45 baker street\"))", "key_phrase": "Edit reminder, baby shower, 17th, include location, 45 baker street", "slot_type": "(reminder, todo)\n(baby shower, title_event)\n(17th, date_time)\n(location, location) \n(45 baker street, address)", "pred_lf": "[IN:update_reminder [SL:reminder todo] [SL:title_event baby shower] [SL:date_time 17th] [SL:location location] [SL:address 45 baker street]]", "gold_lf": "[IN:UPDATE_REMINDER_LOCATION [SL:TODO the baby shower ] [SL:DATE_TIME on the 17th ] [SL:LOCATION 45 baker street ] ]"}
{"utterance": "call Lloyd Jesusa Curts 's husband", "intent": "get_call_contact (0.9), create_call (0.6), update_call (0.5)", "AMR Graph": "(get_call_contact\n      :callee (person :name \"Lloyd Jesusa Curts\" :role husband)\n    )", "key_phrase": "call, Lloyd Jesusa Curts, husband", "slot_type": "call, method_recipes\nLloyd Jesusa Curts, person_reminded\nhusband, type_relation", "pred_lf": "[IN:get_call_contact [SL:call call] [SL:person_reminded Lloyd Jesusa Curts] [SL:type_relation husband]]", "gold_lf": "[IN:CREATE_CALL [SL:CONTACT Lloyd Jesusa Curts ' s husband ] ]"}
{"utterance": "I would like to know the weather for Queensland", "intent": "get_weather,question_news,help_reminder\nConfidence scores: 0.9,0.7,0.5", "AMR Graph": "(get_weather\n  :arg0 (I)\n  :mod (would_like to know)\n  :arg1 (weather)\n  :location (Queensland))", "key_phrase": "I, know weather, Queensland", "slot_type": "(Queensland, location), (weather, type_content)", "pred_lf": "[IN:get_weather [SL:location Queensland] [SL:type_content weather]]", "gold_lf": "[IN:GET_WEATHER [SL:LOCATION Queensland ] ]"}
{"utterance": "I am ready for my family group call can you call now", "intent": "create_call, get_group, answer_call\nConfidence scores: 0.7, 0.6, 0.5", "AMR Graph": "(define\n  (s / create_call\n     :ARG0 (i / i)\n     :ARG1 (c / call\n            :ARG0 i\n            :ARG1 (g / group\n                   :part-of i)\n            :ARG2 (r / ready\n                   :polarity +\n                   :domain (f / family))))\n  )", "key_phrase": "I, family group call, ready, call now", "slot_type": "family group, group\ncall, O\ncan, O\nyou, O\nnow, O", "pred_lf": "[IN:create_call [SL:group family group]] [IN:answer_call]", "gold_lf": "[IN:CREATE_CALL [SL:CONTACT my family ] ]"}
{"utterance": "Play something slow", "intent": "play_music,question_music,previous_track_music\nNumeric confidence score: 0.8,0.75,0.6", "AMR Graph": "(play_music :action (slow :modify (something)))", "key_phrase": "play something slow, slow something, play music slow, play slow music, play something at a slow pace", "slot_type": "(something slow, music_type)", "pred_lf": "[IN:play_music [SL:music_type (something slow)]]", "gold_lf": "[IN:PLAY_MUSIC [SL:MUSIC_GENRE slow ] ]"}
{"utterance": "What is today's trending news", "intent": "get_details_news,question_news,get_stories_news\nConfidence scores: 0.9, 0.85, 0.8", "AMR Graph": "(get_details_news\n     :TOP (d / day :time (n / now))\n     :topic-of (n2 / news :trend (t / trend :degree (h / high))))\n\n\nNote: This AMR graph represents the intent type \"get_details_news\" where the user is asking for high trending news of the day.", "key_phrase": "today, trending news, high degree", "slot_type": "today, date_time\ntrending news, news_type", "pred_lf": "[IN:get_details_news [SL:today date_time] [SL:news_type trending news]]", "gold_lf": "[IN:GET_STORIES_NEWS [SL:DATE_TIME today ] [SL:NEWS_REFERENCE trending ] [SL:NEWS_TYPE news ] ]"}
{"utterance": "how much time before my next alarm", "intent": "get_time_alarm, get_timer, get_alarm\nConfidence scores: 0.9, 0.8, 0.7", "AMR Graph": "(get_time_alarm\n      :time_quantifier (how_much-of time)\n      :reference (the-next alarm)\n      :speaker (I))", "key_phrase": "time, next alarm, how much", "slot_type": "next alarm, alarm_name\ntime, O", "pred_lf": "[IN:get_time_alarm [SL:next alarm]] OR [IN:get_timer [SL:next alarm]] OR [IN:get_alarm [SL:next alarm]]", "gold_lf": "[IN:GET_ALARM [SL:ORDINAL next ] ]"}
{"utterance": "add john to current call", "intent": "create_call,update_call,merge_call\nConfidence scores: 0.9,0.8,0.7", "AMR Graph": "(establish-event\n      :event (create-rel :ARG0 (person :name \"john\")\n                         :ARG1 (call :status \"current\")))", "key_phrase": "add, john, current call", "slot_type": "(john, attendee), (current call, group)", "pred_lf": "[IN:create_call [SL:attendee john] [SL:group current call]]", "gold_lf": "[IN:UPDATE_CALL [SL:CONTACT_ADDED john ] ]"}
{"utterance": "let me see messages from my nephew", "intent": "get_message, get_message_contact, get_info_contact\nConfidence Scores: 0.8, 0.7, 0.6", "AMR Graph": "(s / see\n      :ARG0 (m / me)\n      :ARG1 (ms / messages\n            :mod (n / nephew)))", "key_phrase": "see, messages, nephew, me", "slot_type": "nephew, contact_related\nmessages, type_content \nget_message, method_recipes", "pred_lf": "[IN:get_message_contact [SL:type_content messages] [SL:contact_related nephew]]", "gold_lf": "[IN:GET_MESSAGE [SL:RECIPIENT my nephew ] ]"}
{"utterance": "I want to listen to r&b", "intent": "play_music (0.9), get_track_info_music (0.7), loop_music (0.4)", "AMR Graph": "(play_music\n      :ARG0 (I)\n      :ARG1 (listen\n            :ARG1 r&b))", "key_phrase": "listen to r&b, I want", "slot_type": "(r&b, music_genre)", "pred_lf": "[IN:play_music [SL:music_genre r&b]]", "gold_lf": "[IN:PLAY_MUSIC [SL:MUSIC_GENRE r & b ] ]"}
{"utterance": "Show me the birthday reminders for the month of September in my family", "intent": "get_reminder, get_reminder_date_time, get_reminder_location\nConfidence scores: 0.8, 0.7, 0.6", "AMR Graph": "(get_reminder\n   :location (family)\n   :date-of-reminder (month :name \"September\")\n   :type (reminder-entity)\n   :query (show\n            :query-entity (birthday-reminder)))", "key_phrase": "birthday reminders, September, family, show", "slot_type": "birthday reminders, todo\nSeptember, date_time\nfamily, group", "pred_lf": "[IN:get_reminder_date_time [SL:todo birthday reminders] [SL:date_time September] [SL:group family]]", "gold_lf": "[IN:GET_REMINDER [SL:METHOD_RETRIEVAL_REMINDER Show ] [SL:PERSON_REMINDED me ] [SL:TODO birthday ] [SL:DATE_TIME for the month of September ] [SL:TODO my family ] ]"}
{"utterance": "What's the weather right now?", "intent": "get_weather,question_news,get_details_news\nConfidence scores: 0.8, 0.6, 0.4", "AMR Graph": "(get_weather  \n      :ARG1 (I)  \n)", "key_phrase": "weather, right now", "slot_type": "weather, location\nright now, O", "pred_lf": "[IN:get_weather] [SL:weather right now O]", "gold_lf": "[IN:GET_WEATHER ]"}
{"utterance": "what ingredients do you need to bake a cake", "intent": "get_info_recipes,question_news,get_recipes\nConfidence scores: 0.8, 0.6, 0.5", "AMR Graph": "(get_info\n  :topic (bake-01 :ARG1 (cake :wiki \"Cake_(food)\"))\n  :info (need-01\n          :ARG1 you\n          :ARG2 (ingredient-list\n                  :op1 (bake-01 :ARG1 cake)))))", "key_phrase": "ingredients, bake a cake, need", "slot_type": "ingredients, recipes_included_ingredient\nbake a cake, recipes_dish", "pred_lf": "[IN:get_info_recipes [SL:recipes_dish bake a cake] [SL:recipes_included_ingredient None]]", "gold_lf": "[IN:GET_INFO_RECIPES [SL:RECIPES_ATTRIBUTE ingredients ] [SL:RECIPES_COOKING_METHOD bake ] [SL:RECIPES_DISH cake ] ]"}
{"utterance": "search for magic shows coming next week", "intent": "get_event,question_news,get_date_time_event\nNumeric confidence score: 0.7,0.6,0.5", "AMR Graph": "(get_event\n  :search (lambda\n            :arg1 (magic shows)\n            :time (next week)))", "key_phrase": "search, magic shows, next week", "slot_type": "magic shows, title_event\nnext week, date_time", "pred_lf": "[IN:get_event [SL:title_event magic shows] [SL:date_time next week]]", "gold_lf": "[IN:GET_EVENT [SL:CATEGORY_EVENT magic shows ] [SL:DATE_TIME next week ] ]"}
{"utterance": "Are any of the news outlets reporting updates on North Korea launching missiles?", "intent": "get_info_news,question_news,get_details_news\nConfidence scores: 0.8, 0.7, 0.5", "AMR Graph": "(get_info_news \n       :topic (launch \n                 :topic North_Korea \n                 :instrument missile) \n       :mod (update \n                :topic news_outlet) \n       :polarity -)", "key_phrase": "news outlets, updates, North Korea, launching missiles", "slot_type": "news_topic, category_event, news_reference, location", "pred_lf": "[IN:get_info_news [SL:news_topic North Korea] [SL:category_event missile launch]]", "gold_lf": "[IN:GET_STORIES_NEWS [SL:NEWS_TYPE news ] [SL:NEWS_TOPIC North Korea launching missiles ] ]"}
{"utterance": "play One Word", "intent": "play_music,question_music,get_track_info_music\nConfidence Scores: 0.9, 0.8, 0.7", "AMR Graph": "(play :event (music :name \"One Word\"))", "key_phrase": "play, One Word, music.", "slot_type": "One Word, music_track_title", "pred_lf": "[IN:play_music [SL:music_track_title One Word]]", "gold_lf": "[IN:PLAY_MUSIC [SL:MUSIC_TRACK_TITLE One Word ] ]"}
{"utterance": "Can you please record video message for Mcnail Trent", "intent": "get_message_contact (0.8), create_call (0.5), create_reminder (0.3)", "AMR Graph": "(get_message\n     :arg0 (you)\n     :purpose (contact\n                  :name (Mcnail Trent))\n     :mod (please)\n     :mod (video))", "key_phrase": "record, video message, Mcnail Trent.", "slot_type": "video message, type_content \nMcnail Trent, person_reminded", "pred_lf": "[IN:get_message_contact [SL:type_content video message] [SL:person_reminded Mcnail Trent]]", "gold_lf": "[IN:SEND_MESSAGE [SL:TYPE_CONTENT video ] [SL:RECIPIENT Mcnail Trent ] ]"}
{"utterance": "resume timer in 15 minutes", "intent": "create_timer,add_time_timer,resume_timer\nConfidence scores:\n0.85,0.81,0.80", "AMR Graph": "(resume_timer\n      :time_duration (15\n                          :unit minutes))", "key_phrase": "resume timer, 15 minutes", "slot_type": "(resume timer, method_timer), (15 minutes, timer_name)", "pred_lf": "[IN: resume_timer [SL: method_timer resume timer] [SL: timer_name 15 minutes]]", "gold_lf": "[IN:RESUME_TIMER [SL:METHOD_TIMER timer ] [SL:DATE_TIME in 15 minutes ] ]"}
{"utterance": "Let Johnny know that the traffic report shows an accident and to take a different way home", "intent": "get_traffic_info_news,send_message,get_location\nConfidence score: 0.8, 0.7, 0.6", "AMR Graph": "(get_traffic_info_news\n   :recipient (person\n                   :name \"Johnny\")\n   :traffic_info (traffic_report\n                     :show (accident)\n   )\n   :action (send_message\n               :message \"Take a different way home\"))", "key_phrase": "Johnny, traffic report, accident, different way home", "slot_type": "Johnny, attendee\ntraffic report, news_topic\naccident, news_type\ndifferent way home, location", "pred_lf": "[IN:get_traffic_info_news [SL:news_topic traffic report] [SL:news_type accident]]\n[IN:send_message [SL:attendee Johnny]]\n[IN:get_location [SL:location different way home]]", "gold_lf": "[IN:SEND_MESSAGE [SL:RECIPIENT Johnny ] [SL:CONTENT_EXACT the traffic report shows an accident ] [SL:CONTENT_EXACT take a different way home ] ]"}
{"utterance": "Cancel all of my timers, please.", "intent": "delete_timer, cancel_call, help_reminder\nConfidence scores: 0.8, 0.1, 0.05", "AMR Graph": "(delete_timer\n    :ARG0 (I)\n)", "key_phrase": "Cancel timers, my timers, delete timer, ARG0, I.", "slot_type": "(timers, method_timer)", "pred_lf": "[IN:delete_timer [SL:method_timer timers]]", "gold_lf": "[IN:DELETE_TIMER [SL:AMOUNT all ] [SL:METHOD_TIMER timers ] ]"}
{"utterance": "Find me a Cajun recipe", "intent": "get_info_recipes,0.9, get_recipes,0.8, question_food,0.7", "AMR Graph": "(get_info_recipes\n      :finder (i / i)\n      :recipe (r / recipe\n                :cuisine (c / cuisine\n                            :name \"Cajun\")) \n)", "key_phrase": "find, Cajun recipe", "slot_type": "(Cajun recipe, recipes_cuisine)", "pred_lf": "[IN:get_recipes [SL:recipes_cuisine Cajun recipe]]", "gold_lf": "[IN:GET_RECIPES [SL:RECIPES_TYPE Cajun ] ]"}
{"utterance": "read me the latest news update on germany?", "intent": "get_details_news,question_news,get_location\nConfidence scores: 0.9, 0.6, 0.5", "AMR Graph": "(get_details_news\n       :ARG0 (you)\n       :op1 (read\n             :ARG0 (I)\n             :ARG1 (latest\n                    :ARG1-of (news_update\n                               :ARG0-of (on\n                                         :ARG1 Germany))))))", "key_phrase": "read me, latest news update, Germany", "slot_type": "latest news update, news_topic\ngermany, location", "pred_lf": "[IN:get_details_news [SL:latest news update]]\n [SL:news_topic germany]\n  [SL:location]]", "gold_lf": "[IN:GET_STORIES_NEWS [SL:DATE_TIME latest ] [SL:NEWS_TYPE news ] [SL:NEWS_TOPIC germany ] ]"}
{"utterance": "Turn off reminder for 2 pm meds", "intent": "delete_reminder (0.8), update_reminder (0.5), help_reminder (0.3)", "AMR Graph": "(amr\n   :snt \"Turn off reminder for 2 pm meds\"\n   :intent delete_reminder\n   :ARG0 (you)\n   :ARG1 (reminder\n             :time \"2 pm\"\n             :meds (medication)))", "key_phrase": "Turn off reminder, 2 pm meds, delete reminder", "slot_type": "(reminder, todo)\n(2 pm, date_time)", "pred_lf": "[IN:delete_reminder] [SL:reminder todo] [SL:2 pm date_time]", "gold_lf": "[IN:DELETE_REMINDER [SL:TODO for 2 pm meds ] ]"}
{"utterance": "Remind me to buy Nancy a birthday card on Saturday", "intent": "create_reminder,create_alarm,get_reminder_date_time\nConfidence scores: \n0.75,0.65,0.6", "AMR Graph": "(create_reminder\n    :remind\n        (buy\n            :polarity -\n            :ARG1 me\n            :ARG2 (card :mod (birthday :mod Nancy))\n            :time (on Saturday)))", "key_phrase": "Remind me, buy Nancy a birthday card, Saturday", "slot_type": "(Nancy, contact), (birthday card, todo), (Saturday, date_time)", "pred_lf": "[IN:create_reminder [SL:contact Nancy] [SL:todo birthday card] [SL:date_time Saturday]]", "gold_lf": "[IN:CREATE_REMINDER [SL:PERSON_REMINDED me ] [SL:TODO buy Nancy a birthday card ] [SL:DATE_TIME on Saturday ] ]"}
{"utterance": "Can you please play some '80's pop music?", "intent": "play_music (0.9), question_music (0.8), get_track_info_music (0.6)", "AMR Graph": "(play_music\n      :ARG0 (you)\n      :ARG1 (music\n            :mod (pop\n                  :mod '80's)))\n                  \nAlternatively:\n\n(question_music\n      :ARG0 (you)\n      :ARG1 (music\n            :mod (pop\n                  :mod '80's)))", "key_phrase": "play, '80's pop music", "slot_type": "('80s pop music', music_genre)", "pred_lf": "[IN: play_music [SL: music_genre '80s pop music']]", "gold_lf": "[IN:PLAY_MUSIC [SL:MUSIC_GENRE 80 ] [SL:MUSIC_GENRE pop ] [SL:MUSIC_TYPE music ] ]"}
{"utterance": "Remind me to buy a birthday card for Marianne in the morning.", "intent": "create_reminder,create_todo,update_reminder\nConfidence score: 0.9,0.2,0.1", "AMR Graph": "(create_reminder\n    :remind\n        (buy\n            :object (birthday_card)\n            :destination (Marianne)\n        )\n    :time (in_the_morning)\n)", "key_phrase": "Remind me, buy a birthday card, Marianne, in the morning.", "slot_type": "(birthday card, todo), (Marianne, person_reminded), (morning, date_time)", "pred_lf": "[IN:create_todo [SL:todo birthday card] [SL:person_reminded Marianne] [SL:date_time morning]]", "gold_lf": "[IN:CREATE_REMINDER [SL:PERSON_REMINDED me ] [SL:TODO buy a birthday card for Marianne ] [SL:DATE_TIME in the morning ] ]"}
{"utterance": "What did the Nasdaq close at today", "intent": "get_stories_news,question_news,question_music\nConfidence score: 0.8, 0.6, 0.5", "AMR Graph": "(sentence / ask \n        :topic (stock-thing \n                    :name \"Nasdaq\") \n        :time (day-entity \n                    :day (today)))", "key_phrase": "Nasdaq, close, today.", "slot_type": "Nasdaq, news_topic\ntoday, date_time", "pred_lf": "[IN:get_stories_news [SL:Nasdaq news_topic] [SL:today date_time]]", "gold_lf": "[IN:QUESTION_NEWS [SL:NEWS_TOPIC Nasdaq ] [SL:NEWS_REFERENCE close ] [SL:DATE_TIME at today ] ]"}
{"utterance": "Can I see my missed calls from today?", "intent": "get_call, get_call_time, get_date_time_event\nConfidence scores: 0.85, 0.75, 0.65", "AMR Graph": "(get_call\n      :arg0 (n / i)\n      :arg1 (mc / missed_calls\n            :poss (p / me)\n            :time (t2 / today)))", "key_phrase": "missed calls, today, see, I,", "slot_type": "missed calls, type_contact \ntoday, date_time", "pred_lf": "[IN:get_call_time [SL:date_time today]] [IN:get_call [SL:type_contact missed calls]]", "gold_lf": "[IN:GET_CALL [SL:DATE_TIME today ] ]"}
{"utterance": "Add Bob to call", "intent": "create_call,add_call_contact,get_call_contact\nConfidence scores: \n0.8, 0.75, 0.72", "AMR Graph": "There are a few ways to interpret the given sentence and intent types, but based on the information provided, here is one potential AMR graph representation:\n\n```\n(add\n    :intent (create_call)\n    :value (call\n        :contact (person\n            :name \"Bob\")))\n```\n\nThis AMR graph represents an intent to create a call, with the value of the call being a contact person named \"Bob\". The \"add\" node represents adding this contact to the call. Note that this is just one of many possible interpretations, and the confidence scores provided for each intent type could also inform the specific structure and details of the AMR graph.", "key_phrase": "Add, Bob, call, create call, contact person, name", "slot_type": "(Bob, contact_added), (call, type_content)", "pred_lf": "[IN:create_call [SL:type_content call]]\n[IN:add_call_contact [SL:contact_added Bob]]", "gold_lf": "[IN:UPDATE_CALL [SL:CONTACT_ADDED Bob ] ]"}
{"utterance": "mark me as not going to The Boston Cup", "intent": "get_event, get_details_news, set_rsvp_no\nConfidence scores: 0.5, 0.3, 0.2", "AMR Graph": "(cancel \n  /event \n    :cause (mark \n             :person (i /speaker))\n    :event (go \n              :thing (Boston_Cup)\n              :polarity -))", "key_phrase": "mark me, not going, The Boston Cup", "slot_type": "The Boston Cup, title_event\nmark me as not going, O", "pred_lf": "[IN:get_event [SL:title_event The Boston Cup]] [IN:set_rsvp_no]", "gold_lf": "[IN:SET_RSVP_NO [SL:TITLE_EVENT The Boston Cup ] ]"}
{"utterance": "What time did I call Tesco?", "intent": "get_call_contact, get_call_time, get_info_contact\nConfidence scores: 0.6, 0.5, 0.4", "AMR Graph": "(c / call\n      :arg0 (i / I)\n      :arg1 (s / Tesco)\n      :time (w / when))", "key_phrase": "time, call, Tesco, I", "slot_type": "(Tesco, contact)", "pred_lf": "[IN:get_call_time [SL:contact Tesco]]", "gold_lf": "[IN:GET_CALL_TIME [SL:CONTACT Tesco ] ]"}
{"utterance": "Give me a list of my reminders with Chris.", "intent": "get_reminder (0.8), get_reminder_amount (0.6), get_info_contact (0.5)", "AMR Graph": "(get_reminder\n    :ARG0 (I)\n    :ARG1 \n        (list\n            :mod (my)\n            :mod (with Chris)\n            :ARG0-of (remind)))\n)", "key_phrase": "list of my reminders, Chris", "slot_type": "reminders, todo\nChris, attendee", "pred_lf": "[IN:get_reminder [SL:reminders my] [SL:attendee Chris]]", "gold_lf": "[IN:GET_REMINDER [SL:PERSON_REMINDED my ] [SL:TODO Chris ] ]"}
{"utterance": "should I wear a hat", "intent": "get_weather,question_music,help_reminder\nConfidence scores: 0.8, 0.7, 0.5", "AMR Graph": "(s / should \n      :ARG1 (i / wear \n                  :ARG0 i \n                  :ARG1 (h / hat)))", "key_phrase": "\"should wear\", \"hat\"", "slot_type": "(hat, O)", "pred_lf": "[IN:get_weather] [SL:hat O]", "gold_lf": "[IN:GET_WEATHER [SL:WEATHER_ATTRIBUTE hat ] ]"}
{"utterance": "Anything to do in Lexington tomorrow", "intent": "get_event, get_location, get_date_time_event\nConfidence score: 0.6, 0.4, 0.3", "AMR Graph": "(get_event\n  :op1 (lambda\n         :ARG0 (something\n                  :wiki -)\n         :ARG1 (schedule-01\n                  :ARG0 something\n                  :ARG1 (in \n                          :op1 Lexington)\n                  :time (date-entity\n                          :month 11\n                          :day 20\n                          :year 2021))))\n          \nThe potential intent type \"get_event\" has the highest confidence score, so the AMR graph represents the sentence as a request for a scheduled event in Lexington tomorrow. The \"something\" variable represents any type of event, while the \"in\" operator specifies that it should take place in Lexington. The \"date-entity\" operator specifies that the event should occur on November 20th, 2021.", "key_phrase": "Lexington tomorrow, scheduled event.", "slot_type": "(Lexington, location), (tomorrow, date_time)", "pred_lf": "[IN:get_event [SL:date_time tomorrow] [SL:location Lexington]]", "gold_lf": "[IN:GET_EVENT [SL:LOCATION Lexington ] [SL:DATE_TIME tomorrow ] ]"}
{"utterance": "set a timer for 25 minutes and eight seconds and one timer for 1 minute", "intent": "create_timer, add_time_timer, repeat_all_off_music \nNumeric confidence score: 0.95, 0.87, 0.72", "AMR Graph": "(create_timer\n      :time (and \n              :time-unit (unit-of-time :name \"25\" :unit \"minute\")\n              :time-unit (unit-of-time :name \"8\" :unit \"second\"))\n      :time (and\n              :time-unit (unit-of-time :name \"1\" :unit \"minute\")))", "key_phrase": "set a timer, 25 minutes, 8 seconds, 1 minute, one timer", "slot_type": "(\"timer\", \"todo\"), (\"25 minutes and eight seconds\", \"method_timer\"), (\"1 minute\", \"method_timer\")", "pred_lf": "[IN:create_timer [SL:todo]]\n[IN:add_time_timer [SL:method_timer \"25 minutes and eight seconds\"] [SL:method_timer \"1 minute\"]]", "gold_lf": "[IN:CREATE_TIMER [SL:METHOD_TIMER timer ] [SL:DATE_TIME for 25 minutes and eight seconds ] [SL:AMOUNT one ] [SL:METHOD_TIMER timer ] [SL:DATE_TIME for 1 minute ] ]"}
{"utterance": "Play my snowboarding playlist", "intent": "create_playlist_music, play_music, add_to_playlist_music\nConfidence scores: 0.9, 0.8, 0.7", "AMR Graph": "(play_music\n                     :agent (person :poss my)\n                     :theme (playlist :name \"snowboarding\")))", "key_phrase": "Play, snowboarding playlist, my playlist", "slot_type": "(snowboarding playlist, music_playlist_title)", "pred_lf": "[IN:create_playlist_music] [SL:music_playlist_title snowboarding playlist]", "gold_lf": "[IN:PLAY_MUSIC [SL:MUSIC_PLAYLIST_TITLE snowboarding ] [SL:MUSIC_TYPE playlist ] ]"}
{"utterance": "Is flour vegan", "intent": "get_info_recipes,question_food,question_vegan\nConfidence scores: 0.70, 0.60, 0.55", "AMR Graph": "(get_info \n      :query (food-ingredient :name \"flour\") \n      :property (vegan))", "key_phrase": "flour, vegan", "slot_type": "(flour, recipes_included_ingredient), (vegan, recipes_qualifier_nutrition)", "pred_lf": "[IN: question_vegan [SL: vegan recipes_qualifier_nutrition]] [IN: question_food [SL: flour recipes_included_ingredient]]", "gold_lf": "[IN:IS_TRUE_RECIPES [SL:RECIPES_INCLUDED_INGREDIENT flour ] [SL:RECIPES_DIET vegan ] ]"}
{"utterance": "Whats the news story on the Daily Show tonight", "intent": "get_details_news, question_news, get_stories_news\nConfidence score: 0.8, 0.7, 0.6", "AMR Graph": "(S\n      /question\n      :intent get_details_news\n      :confidence 0.8\n      (NP\n        (DT Whats)\n        (NN news)\n        (NN story))\n      (PP\n        (IN on)\n        (NP\n          (DT the)\n          (NNP Daily)\n          (NNP Show))\n        (NN tonight)))", "key_phrase": "news story, Daily Show, tonight", "slot_type": "(Daily Show, title_event), (news story, news_type)", "pred_lf": "[IN:get_details_news [SL:title_event Daily Show] [SL:news_type news story]]", "gold_lf": "[IN:GET_STORIES_NEWS [SL:NEWS_TYPE news story ] [SL:NEWS_SOURCE Daily Show ] [SL:DATE_TIME tonight ] ]"}
