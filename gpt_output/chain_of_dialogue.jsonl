{"utterance": "I need Pandora to play me a birthday song.", "intent": "play_music", "AMR Graph": "(I\n  :need\n    (play\n      :object (song :name \"birthday\")\n      :agent (Pandora))\n    :experiencer (me))", "key_phrase": "Pandora, play, birthday song, me", "slot_type": "(Pandora, music_radio_id), (play, method_timer), (birthday song, title_event), (me, O)", "pred_lf": "[IN:play_music [SL:service Pandora] [SL:song_name birthday song]]", "gold_lf": "[IN:PLAY_MUSIC [SL:MUSIC_PROVIDER_NAME Pandora ] [SL:MUSIC_GENRE birthday ] [SL:MUSIC_TYPE song ] ]"}
{"utterance": "Give me the Beatles top 10 hits", "intent": "question_music", "AMR Graph": "(c / give-01\n      :ARG0 (I)\n      :ARG1 (t / top\n            :ARG1-of (h / hit\n                  :ARG1-of (T / ten))\n            :ARG2 (b / beatles)))", "key_phrase": "Beatles top 10 hits, I.", "slot_type": "(\"Beatles top 10 hits\", music_album_title),\n(\"I\", O)", "pred_lf": "[IN: question_music [SL: artist Beatles] [SL: top_number 10] [SL: genre hits]]", "gold_lf": "[IN:PLAY_MUSIC [SL:MUSIC_ARTIST_NAME the Beatles ] ]"}
{"utterance": "ask ronnie if she is going to be late", "intent": "get_call_contact", "AMR Graph": "(f / ask-01\n      :ARG0 (p / person :name \"Ronnie\")\n      :ARG1 (g / go-01\n            :ARG0 p\n            :ARGM-TMP (l / late\n                  :polarity -\n                  :degree (++))))\n                  \n(Abstract Meaning Representation in Penman notation: \n((f / ask-01\n      :ARG0 (p / person\n            :name \"Ronnie\")\n      :ARG1 (g / go-01\n            :ARG0 p\n            :ARGM-TMP (l / late\n                  :polarity -\n                  :degree ++))))", "key_phrase": "Ronnie, late", "slot_type": "(Ronnie, attendee), (late, attribute_event)", "pred_lf": "[IN:get_call_contact [SL:contact_name Ronnie] [SL:call_reason being late]]", "gold_lf": "[IN:SEND_MESSAGE [SL:RECIPIENT ronnie ] [SL:CONTENT_EXACT she is going to be late ] ]"}
{"utterance": "All done, hang up", "intent": "end_call", "AMR Graph": "(c / communicate-01\n      :ARG0 (p / person :when (n / now))\n      :ARG1 (t / telephone\n            :part-of (h / hang-01\n                  :ARG1 p)))", "key_phrase": "All done, hang up, person, now, telephone", "slot_type": "All done, O\nhang up, contact_method", "pred_lf": "[IN:end_call]", "gold_lf": "[IN:END_CALL ]"}
{"utterance": "Find anyone I know in Sacramento.", "intent": "get_location", "AMR Graph": "(find \n    :ARG1 (person \n              :ARG0 (know \n                        :ARG0 (I))\n              :location (city \n                            :name \"Sacramento\")))", "key_phrase": "anyone I know, Sacramento.", "slot_type": "anyone I know, attendee\nSacramento, location", "pred_lf": "[IN:get_location [SL:person_name anyone] [SL:location Sacramento]]", "gold_lf": "[IN:GET_CONTACT [SL:CONTACT_RELATED I ] [SL:LOCATION Sacramento ] ]"}
{"utterance": "What's Amy's new address", "intent": "There is no matching intent type for this sentence in the given intent vocabulary. The intent vocabulary is focused on actions related to various domains such as music, calls, reminders, weather, and events, among others, whereas the given sentence is a general question about an individual's personal information.", "AMR Graph": "(c / inquire\n      :subject (p / person :name \"Amy\")\n      :topic (a / address\n              :location \"new\"))", "key_phrase": "Amy's new address", "slot_type": "(Amy, person_reminded), (new address, location)", "pred_lf": "[IN:UNKNOWN]", "gold_lf": "[IN:GET_LOCATION [SL:CONTACT Amy ] ]"}
{"utterance": "remove this track from favorite", "intent": "No intent type matches this sentence.", "AMR Graph": "(b / remove-01\n      :ARG0 (u / you)\n      :ARG1 (t / track\n            :mod (f / favorite)\n            :mod (d / demonstrative)))", "key_phrase": "remove track, favorite", "slot_type": "(remove track, music_track_title), (favorite, O)", "pred_lf": "[IN:N/A]", "gold_lf": "[IN:REMOVE_FROM_PLAYLIST_MUSIC [SL:MUSIC_TYPE track ] [SL:MUSIC_PLAYLIST_TITLE favorite ] ]"}
{"utterance": "Call my sons back.", "intent": "create_call", "AMR Graph": "(call :ARG0 (I)\n      :ARG1 (back :ARG0 (sons :poss I)))", "key_phrase": "call, my sons, back", "slot_type": "(\"call\", \"method_recipes\"), (\"my sons\", \"contact\"), (\"back\", \"attribute_event\")", "pred_lf": "[IN:create_call [SL:recipient (sons)] [SL:contact_type (phone)]]", "gold_lf": "[IN:CREATE_CALL [SL:CONTACT my sons ] ]"}
{"utterance": "Has Stevie sent me anything on Messenger", "intent": "get_message_contact", "AMR Graph": "( i / send-01\n      :ARG0 ( you )\n      :ARG1 ( anything )\n      :ARG2 ( messenger )\n      :time ( present )\n      :polarity ( have )\n      :agent ( stevie ) )", "key_phrase": "Stevie, sent, me, anything, Messenger.", "slot_type": "(Stevie, music_artist_name), (sent, O), (me, O), (anything, O), (Messenger, O)", "pred_lf": "[IN:get_message_contact [SL:contact_name Stevie] [SL:platform Messenger]]", "gold_lf": "[IN:GET_MESSAGE [SL:SENDER Stevie ] [SL:RECIPIENT me ] [SL:NAME_APP Messenger ] ]"}
{"utterance": "play dance music from the 80's", "intent": "play_music", "AMR Graph": "(play :action (dance :activity (music :genre \"80's\")))", "key_phrase": "play dance music, 80's music", "slot_type": "(play dance music, music_type), (80's music, music_genre)", "pred_lf": "[IN:play_music [SL:music_genre dance] [SL:year 80s]]", "gold_lf": "[IN:PLAY_MUSIC [SL:MUSIC_GENRE dance ] [SL:MUSIC_TYPE music ] [SL:MUSIC_GENRE 80 ] ]"}
{"utterance": "When did I receive that video call from John?", "intent": "get_call_time", "AMR Graph": "(time-of (receive\n          :ARG0 (pronoun :person))\n          :ARG1 (video-call\n                  :ARG0 John)))", "key_phrase": "receive, video call, John, when, I", "slot_type": "(John, contact_related), (receive, method_retrieval_reminder), (video call, type_content), (when, date_time), (I, O)", "pred_lf": "[IN:get_call_time [SL:receiver (I)] [SL:caller (John)]]", "gold_lf": "[IN:GET_CALL_TIME [SL:CONTACT John ] ]"}
{"utterance": "please make the timer longer by 4 hours and 10 minutes", "intent": "add_time_timer", "AMR Graph": "(f / make-01 \n      :ARG0 (u / you) \n      :ARG1 (t / timer \n                :mod (l / longer) \n                :quant  (u2 / unit \n                           :scale 4\n                           :unit (h / hour))\n                :quant  (u3 / unit \n                           :scale 10\n                           :unit (m / minute))))", "key_phrase": "timer, longer by, 4 hours, 10 minutes", "slot_type": "(timer, todo), (longer by, method_timer), (4 hours, amount), (10 minutes, amount)", "pred_lf": "[IN:add_time_timer [SL:time_type timer] [SL:time_duration 4 hours 10 minutes]]", "gold_lf": "[IN:ADD_TIME_TIMER [SL:METHOD_TIMER timer ] [SL:DATE_TIME by 4 hours and 10 minutes ] ]"}
{"utterance": "create a new timer", "intent": "create_timer", "AMR Graph": "(define \n  (create-01 \n    :ARG0 (timer \n            :mod (new)))\n)", "key_phrase": "create, new timer", "slot_type": "(create, method_timer), (new timer, timer_name)", "pred_lf": "[IN:create_timer]", "gold_lf": "[IN:CREATE_TIMER [SL:METHOD_TIMER timer ] ]"}
{"utterance": "Please read the reminder about my doctors appointment next week.", "intent": "get_reminder", "AMR Graph": "(relation / please-01\n    :ARG0 (pronoun / you)\n    :ARG1 (relation / read-01\n              :ARG0 (noun / reminder)\n              :ARG1 (relation / appointment-01\n                        :ARG0 (noun / doctor)\n                        :ARG1 (pronoun / my)\n                        :time (interval / next-week))))", "key_phrase": "reminder, doctors appointment, next week", "slot_type": "(reminder, method_retrieval_reminder), (doctors appointment, todo), (next week, date_time)", "pred_lf": "[IN:get_reminder [SL:reminder_type doctors appointment] [SL:date next week]]", "gold_lf": "[IN:GET_REMINDER [SL:METHOD_RETRIEVAL_REMINDER read ] [SL:PERSON_REMINDED my ] [SL:TODO doctors appointment ] [SL:DATE_TIME next week ] ]"}
{"utterance": "call Stefani Sauer 's grandmother", "intent": "create_call", "AMR Graph": "(call\n    :ARG0 (pronoun :op \"she\")\n    :ARG1 (person :op \"Stefani Sauer\")\n    :ARG2 (person :op \"grandmother\" :poss \"Stefani Sauer\"))", "key_phrase": "Stefani Sauer, grandmother", "slot_type": "(Stefani Sauer, contact), (grandmother, contact_related)", "pred_lf": "[IN:create_call [SL:contact_name Stefani Sauer] [SL:relation grandmother]]", "gold_lf": "[IN:CREATE_CALL [SL:CONTACT Stefani Sauer ' s grandmother ] ]"}
{"utterance": "what's the news from the White House today", "intent": "question_news", "AMR Graph": "(b / be :polarity positive \n    :ARG1 (n / news \n              :topic (h / house \n                          :name (n2 / name :value \"White\"))\n              :time (t / today)))", "key_phrase": "news, White House, today", "slot_type": "(news, news_topic), (White House, location), (today, date_time)", "pred_lf": "[IN: question_news [SL: source White House] [SL: date today]]", "gold_lf": "[IN:GET_STORIES_NEWS [SL:NEWS_TYPE news ] [SL:NEWS_TOPIC White House ] [SL:DATE_TIME today ] ]"}
{"utterance": "Bahamas weather", "intent": "get_weather", "AMR Graph": "(amr\n  :snt \"Bahamas weather\"\n  :time (time-entity)\n  :location (state-entity :name \"The Bahamas\"))", "key_phrase": "Bahamas, weather", "slot_type": "(Bahamas, location), (weather, weather_attribute)", "pred_lf": "[IN:get_weather [SL:location Bahamas]]", "gold_lf": "[IN:GET_WEATHER [SL:LOCATION Bahamas ] ]"}
{"utterance": "create alarm for 1250", "intent": "create_alarm", "AMR Graph": "(Sentence / create\n           :ARG1 (alarm / alarm-entity\n                           :time (time / interval\n                                           :unit minute\n                                           :quant 1250)))", "key_phrase": "create alarm, 1250, alarm-entity, time, interval, minute, quant", "slot_type": "(create alarm, method_timer), (1250, alarm_name)", "pred_lf": "[IN:create_alarm [SL:time_value 1250]]", "gold_lf": "[IN:CREATE_ALARM [SL:DATE_TIME for 1250 ] ]"}
{"utterance": "Can I make anything in under 5 minutes with rice and eggs?", "intent": "get_recipes", "AMR Graph": "(c / can-01 \n   :ARG0 (i / i)\n   :ARG1 (m / make-01 \n          :ARG0 i\n          :ARG1 (a / anything)\n          :time (u / under \n                 :unit (m2 / minute)\n                 :value 5))\n          :ARG2 (r / rice)\n          :ARG3 (e / egg)))", "key_phrase": "make, under 5 minutes, rice, eggs", "slot_type": "(make, method_recipes), (under 5 minutes, timer_name), (rice, recipes_included_ingredient), (eggs, recipes_included_ingredient)", "pred_lf": "[IN:get_recipes [SL:ingredient_list (rice eggs)] [SL:max_prep_time 5]]", "gold_lf": "[IN:GET_RECIPES [SL:DATE_TIME 5 minutes ] [SL:RECIPES_INCLUDED_INGREDIENT rice ] [SL:RECIPES_INCLUDED_INGREDIENT eggs ] ]"}
{"utterance": "Hold first call answer second call", "intent": "merge_call", "AMR Graph": "(HOLD :ARG0 (CALL-1 :mod FIRST) :ARG1 (ANSWER :ARG0 (CALL-2 :mod SECOND)))", "key_phrase": "Hold first call, answer second call", "slot_type": "Hold first call, method_recipes\nanswer second call, method_recipes", "pred_lf": "[IN:merge_call [SL:call_action hold] [SL:call_number 1] [SL:call_action answer] [SL:call_number 2]]", "gold_lf": "[IN:SWITCH_CALL ]"}
{"utterance": "play me music from 1974 top 40", "intent": "play_music", "AMR Graph": "(play :agent (me)\n      :theme (music)\n      :time (from 1974)\n      :location (top 40))", "key_phrase": "play music, from 1974, top 40", "slot_type": "(play music, music_type), (1974, ordinal), (top 40, music_genre)", "pred_lf": "[IN:play_music [SL:year 1974] [SL:genre top 40]]", "gold_lf": "[IN:PLAY_MUSIC [SL:MUSIC_TYPE music ] ]"}
{"utterance": "How much protein is in a glass of soy milk", "intent": "get_info_recipes", "AMR Graph": "(c / compare-01\n      :ARG1 (p / protein\n            :quant (m / much))\n      :ARG2 (g2 / glass\n            :mod (s / soy)\n            :of (m2 / milk)))", "key_phrase": "protein, soy milk, glass of soy milk, much", "slot_type": "(protein, recipes_type_nutrition), (soy milk, recipes_dish), (glass of soy milk, recipes_unit_measurement), (much, O)", "pred_lf": "[IN:get_info_recipes [SL:protein soy milk]]", "gold_lf": "[IN:GET_INFO_RECIPES [SL:RECIPES_ATTRIBUTE How much ] [SL:RECIPES_TYPE_NUTRITION protein ] [SL:RECIPES_DISH soy milk ] ]"}
{"utterance": "remove the timer for the gym", "intent": "delete_timer", "AMR Graph": "(c / cause-01\n      :ARG0 (r / remove-01\n            :ARG1 (t / timer)\n            :ARG2 (g / gym)))", "key_phrase": "remove timer, gym", "slot_type": "(remove timer, method_timer), (gym, todo)", "pred_lf": "[IN:delete_timer [SL:timer_type gym]]", "gold_lf": "[IN:DELETE_TIMER [SL:METHOD_TIMER timer ] ]"}
{"utterance": "Who works in Ashwaubenon?", "intent": "get_employment_time", "AMR Graph": "(e / entity\n      :type person\n      :quant 1\n      :ARG1-of (w / work-01\n                  :ARG2 (a / ashwaubenon)))", "key_phrase": "works, Ashwaubenon.", "slot_type": "(works, job), (Ashwaubenon, location)", "pred_lf": "[IN:get_employment_time [SL:location Ashwaubenon]]", "gold_lf": "[IN:GET_CONTACT [SL:LOCATION Ashwaubenon ] ]"}
{"utterance": "who is Jeremy's aunt?", "intent": "get_contact", "AMR Graph": "(s / be-01\n      :arg1 (who)\n      :arg2 (a / aunt\n                  :poss (p / person\n                                :name (n / name :op1 \"Jeremy\"))))", "key_phrase": "Jeremy's aunt, aunt of Jeremy.", "slot_type": "Jeremy, O \naunt, O \nJeremy's aunt, contact_related \naunt of Jeremy, contact_related", "pred_lf": "[IN:get_contact [SL:relationship aunt] [SL:name Jeremy]]", "gold_lf": "[IN:GET_CONTACT [SL:CONTACT Jeremy ] [SL:TYPE_RELATION aunt ] ]"}
{"utterance": "What is the news on the Obama Care change?", "intent": "question_news", "AMR Graph": "(c / claim\n      :content (q / query\n                  :op1 (w / what)\n                  :op2 (b / be\n                          :arg1 (n / news\n                                    :mod (o / on\n                                            :op1 (p / person :wiki \"Barack_Obama\")))\n                          :arg2 (c2 / change\n                                  :mod (o2 / on :op1 (p2 / policy :wiki \"Patient_Protection_and_Affordable_Care_Act\"))))))", "key_phrase": "news on Obama Care change, Obama Care change, news, Obama Care, change, Obama", "slot_type": "(news on Obama Care change, news_topic), (Obama Care change, news_topic), (news, news_type), (Obama Care, news_topic), (change, attribute_event), (Obama, person_reminded)", "pred_lf": "[IN:question_news [SL:topic Obama Care] [SL:change any]]", "gold_lf": "[IN:GET_STORIES_NEWS [SL:NEWS_TYPE news ] [SL:NEWS_TOPIC Obama Care change ] ]"}
{"utterance": "Give me the latest Hollywood news.", "intent": "get_details_news", "AMR Graph": "(GIVE\n  :ARG0 (I)\n  :ARG1 (NEWS\n          :TOPIC (HOLLYWOOD)\n          :TIME (LATEST)))", "key_phrase": "Hollywood news, latest Hollywood news", "slot_type": "(Hollywood news, news_topic), (latest Hollywood news, news_topic)", "pred_lf": "[IN:get_details_news [SL:category Hollywood] [SL:time latest]]", "gold_lf": "[IN:GET_STORIES_NEWS [SL:DATE_TIME latest ] [SL:NEWS_TOPIC Hollywood ] [SL:NEWS_TYPE news ] ]"}
{"utterance": "Can you show that I am available online", "intent": "set_available", "AMR Graph": "(amr\n   :root \n     (can \n       :ARG0 (you) \n       :ARG1 \n         (show \n           :ARG0 you \n           :ARG1 \n             (be \n               :ARG0 (I) \n               :ARG1 \n                 (available \n                   :mod online)))))\n                   \nIn the Neo-Davidsonian format, the sentence is represented by a set of nested predicates, each with its own set of arguments. The root node is the main predicate, \"can\", with the subject \"you\" and an object composed of the nested predicate \"show\" and its arguments. The predicate \"show\" takes \"you\" as its subject and the nested predicate \"be available online\" as its object. The predicate \"be available online\" has \"I\" as its subject and \"available online\" as its object. The predicate \"available\" is modified by the adjective \"online\".", "key_phrase": "show, available online, I, you", "slot_type": "show, method_retrieval_reminder\navailable online, attribute_event\nI, O\nyou, O", "pred_lf": "[IN:set_available [SL:availability online]]", "gold_lf": "[IN:SET_AVAILABLE ]"}
{"utterance": "going to the first event", "intent": "get_event", "AMR Graph": "(g / go-01\n    :ARG0 (y / you)\n    :destination (e / event\n        :mod (f / first)))", "key_phrase": "going to, first event", "slot_type": "going to, O \nfirst event, title_event", "pred_lf": "[IN:get_event [SL:event_type first]]", "gold_lf": "[IN:SET_RSVP_YES [SL:ORDINAL first ] ]"}
{"utterance": "mainly use google play", "intent": "None of the intents in the vocabulary match the sentence.", "AMR Graph": "(node /use\n      :ARG0 (node /you)\n      :ARG1 (node /google_play\n              :mod (node /mainly)))", "key_phrase": "google play, mainly use", "slot_type": "(\"google play\", \"name_app\"), (\"mainly use\", \"method_recipes\")", "pred_lf": "[IN:N/A] [SL:platform Google Play]", "gold_lf": "[IN:SET_DEFAULT_PROVIDER_MUSIC [SL:MUSIC_PROVIDER_NAME google play ] ]"}
{"utterance": "When does Jill graduate from the medical program at UCF?", "intent": "get_education_time", "AMR Graph": "```\n(time\n  :op1 (graduate-01\n          :arg0 (person :name \"Jill\")\n          :arg1 (program\n                  :name \"medical\"\n                  :domain (school :name \"UCF\"))))\n```\n\nExplanation:\nThe main event in this sentence is \"Jill graduate from the medical program at UCF\". We represent this event using the predicate \"graduate-01\" (distinguished from \"graduate-02\", etc. if we had other interpretations of the sentence). We specify the subject of the event as a named entity \"person\" with the name \"Jill\", and the object as a \"program\" with the name \"medical\". We embed the \"program\" in a \"domain\" role of a \"school\" with the name \"UCF\".\n\nThe question word \"When\" specifies that we're looking for a time expression, which we represent as the top-level predicate \"time\" taking a single argument, the \"graduate-01\" event. Note that we don't specify the actual time expression in this AMR. We could add a separate \"date-entity\" node to the graph if we had that information, but the sentence as given doesn't provide it.", "key_phrase": "Jill graduate, medical program at UCF, When", "slot_type": "(Jill, O), (graduate, major), (medical program, education_degree), (UCF, school), (When, date_time)", "pred_lf": "[IN:get_education_time [SL:person Jill] [SL:degree medical program] [SL:school UCF]]", "gold_lf": "[IN:GET_EDUCATION_TIME [SL:CONTACT Jill ] [SL:SCHOOL UCF ] ]"}
{"utterance": "How long can you put a marshmallow in the microwave", "intent": "question_music", "AMR Graph": "(c / can\n     :ARG0 (y / you)\n     :ARG1 (p / put-01\n              :ARG0 y\n              :ARG1 (m / microwave)\n              :ARG2 (ma / marshmallow))\n     :ARG3 (l / long))", "key_phrase": "marshmallow, microwave, put, long, you", "slot_type": "(marshmallow, recipes_included_ingredient), (microwave, appliance), (put, method_cooking), (long, duration), (you, O)", "pred_lf": "[IN:question_music [SL:object marshmallow] [SL:time microwave]]", "gold_lf": "[IN:GET_INFO_RECIPES [SL:RECIPES_ATTRIBUTE How long ] [SL:RECIPES_INCLUDED_INGREDIENT marshmallow ] [SL:RECIPES_COOKING_METHOD microwave ] ]"}
{"utterance": "Set a 'wake-up' alarm for Monday, Tuesday and Wednesday of this week for 7am", "intent": "create_alarm", "AMR Graph": "(set \n  :event (set-01 \n           :ARG1 (alarm \n                   :mod (wake-up))\n           :ARG2 (date-entity \n                   :weekday (monday)\n                   :quant (week \n                            :op1 this))\n           :ARG2-of (date-entity \n                       :weekday (tuesday)\n                       :quant (week \n                                :op1 this))\n           :ARG2-of (date-entity \n                       :weekday (wednesday)\n                       :quant (week \n                                :op1 this)))\n  :time (time \n          :hour 7\n          :mod (am)))", "key_phrase": "'wake-up' alarm, Monday, Tuesday, Wednesday, this week, 7am.", "slot_type": "('wake-up alarm', 'alarm_name'), ('Monday', 'date_time'), ('Tuesday', 'date_time'), ('Wednesday', 'date_time'), ('this week', 'period'), ('7am', 'date_time')", "pred_lf": "[IN:create_alarm [SL:alarm_name wake-up] [SL:day Monday] [SL:day Tuesday] [SL:day Wednesday] [SL:time 7am] [SL:timeframe this week]]", "gold_lf": "[IN:CREATE_ALARM [SL:ALARM_NAME wake - up ] [SL:DATE_TIME for Monday , Tuesday and Wednesday of this week for 7 am ] ]"}
{"utterance": "What is the breaking news today?", "intent": "question_news", "AMR Graph": "(n / news \n      :topic-of (b / break-01 \n                      :ARG0 (u / you)\n                      :time (t / today)))", "key_phrase": "breaking news, today", "slot_type": "breaking news, news_topic\ntoday, date_time", "pred_lf": "[IN:question_news [SL:today Date]]", "gold_lf": "[IN:GET_STORIES_NEWS [SL:NEWS_REFERENCE breaking ] [SL:NEWS_TYPE news ] [SL:DATE_TIME today ] ]"}
{"utterance": "call Javon Nicholson through WhatsApp", "intent": "create_call", "AMR Graph": "(call :action (through :method (WhatsApp) :object (Javon Nicholson)))", "key_phrase": "call Javon Nicholson, through WhatsApp", "slot_type": "(call Javon Nicholson, contact)\n(through WhatsApp, contact_method)", "pred_lf": "[IN:create_call [SL:contact_name Javon Nicholson] [SL:messaging_app WhatsApp]]", "gold_lf": "[IN:CREATE_CALL [SL:CONTACT Javon Nicholson ] [SL:NAME_APP WhatsApp ] ]"}
{"utterance": "Don't make that call.", "intent": "cancel_call", "AMR Graph": "(d / don't\n  :polarity -\n  :ARG0 (m / make\n          :ARG1 (c / call\n                  :ARG0 <you>)))", "key_phrase": "make call, don't call", "slot_type": "(\"make call\", method_retrieval_reminder), (\"don't call\", method_retrieval_reminder)", "pred_lf": "[IN:cancel_call] [SL:call_status cancelled]", "gold_lf": "[IN:CANCEL_CALL ]"}
{"utterance": "list recent headlines on ABC news", "intent": "question_news", "AMR Graph": "(listing :action (recent :time (headlines :topic ABC-news)))", "key_phrase": "list recent headlines, ABC news", "slot_type": "(list recent headlines, news_topic), (ABC news, news_source)", "pred_lf": "[IN: question_news [SL: news_source ABC]] [SL: news_category headlines] [SL: time_frame recent]", "gold_lf": "[IN:GET_STORIES_NEWS [SL:DATE_TIME recent ] [SL:NEWS_TYPE headlines ] [SL:NEWS_SOURCE ABC news ] ]"}
