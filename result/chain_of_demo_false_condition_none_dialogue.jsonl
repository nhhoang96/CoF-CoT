{"utterance": "call Nicholas and Natasha", "intent": "create_call", "AMR Graph": "(call :op1 (and :op1 Nicholas :op2 Natasha))", "key_phrase": "call, Nicholas, Natasha", "slot_type": "(type_contact, Nicholas), (type_contact, Natasha), (todo, call)", "pred_lf": "[IN:create_call [SL:type_contact Nicholas] [SL:type_contact Natasha] [SL:todo call]]", "gold_lf": "[IN:CREATE_CALL [SL:CONTACT Nicholas ] [SL:CONTACT Natasha ] ]"}
{"utterance": "Give me the most recent NPR news", "intent": "question_news", "AMR Graph": "(c / command\n      :purpose (a / request-01\n                  :subject (m / myself)\n                  :object (n / news\n                              :mod (r / recent)\n                              :wiki \"NPR\")))", "key_phrase": "me, NPR news, recent", "slot_type": "(type_contact, me), (news_source, NPR news), (ordinal, recent)", "pred_lf": "[IN:question_news [SL:type_contact me] [SL:news_source NPR news] [SL:ordinal recent]]", "gold_lf": "[IN:GET_STORIES_NEWS [SL:DATE_TIME the most recent ] [SL:NEWS_SOURCE NPR ] [SL:NEWS_TYPE news ] ]"}
{"utterance": "What's the work address with zipcode where James work?", "intent": "get_location", "AMR Graph": "(c / contact\n      :person (p / person :name \"James\")\n      :address (a / address\n                  :location (w / work :name \"work\")\n                  :zipcode (z / zipcode)))", "key_phrase": "work address, zipcode, James work", "slot_type": "location, work address\nlocation, zipcode\njob, James work", "pred_lf": "[IN:get_location [SL:location work address] [SL:location zipcode] [SL:job James work]]", "gold_lf": "[IN:GET_LOCATION [SL:CONTACT James ] ]"}
{"utterance": "ring my brother", "intent": "create_call", "AMR Graph": "( ring\n    :ARG0 (I)\n    :ARG1 (brother)\n)", "key_phrase": "ring, my brother", "slot_type": "(todo, ring), (contact_added, my brother)", "pred_lf": "[IN:create_call [SL:todo ring] [SL:contact_added my brother]]", "gold_lf": "[IN:CREATE_CALL [SL:CONTACT my brother ] ]"}
{"utterance": "set a timer for my workout right now", "intent": "create_timer", "AMR Graph": "(set \n  :ARG0 (timer \n          :ARG1 (workout \n                  :poss (my))\n          :time (now)))", "key_phrase": "set a timer, my workout, right now", "slot_type": "(method_timer, set a timer), (todo, my workout), (O, right now)", "pred_lf": "[IN:create_timer [SL:method_timer set a timer] [SL:todo my workout] [SL:O right now]]", "gold_lf": "[IN:CREATE_TIMER [SL:METHOD_TIMER timer ] [SL:TIMER_NAME workout ] ]"}
{"utterance": "call Camilla whatsapp video", "intent": "create_call", "AMR Graph": "(call :operator (whatsapp :name \"Camilla\") :mode \"video\"))", "key_phrase": "call Camilla, whatsapp video", "slot_type": "(contact), call Camilla\n(method_recipes), whatsapp video", "pred_lf": "[IN:create_call [SL:contact call Camilla] [SL:method_recipes whatsapp video]]", "gold_lf": "[IN:CREATE_CALL [SL:CONTACT Camilla ] [SL:NAME_APP whatsapp ] ]"}
{"utterance": "call Avery M", "intent": "create_call", "AMR Graph": "(c / call\n      :ARG0 (p / person :name \"Avery\")\n      :ARG1 (m / phone))", "key_phrase": "call, Avery, phone", "slot_type": "(method_recipes, call), (contact, Avery), (phone_number, phone)", "pred_lf": "[IN:create_call [SL:method_recipes call] [SL:contact Avery] [SL:phone_number phone]]", "gold_lf": "[IN:CREATE_CALL [SL:CONTACT Avery M ] ]"}
{"utterance": "what is the next alarm for", "intent": "get_alarm", "AMR Graph": "(c / clock\n     :time (n / now)\n     :next-alarm)", "key_phrase": "next alarm", "slot_type": "(alarm_name, next alarm)", "pred_lf": "[IN:get_alarm [SL:alarm_name next alarm]]", "gold_lf": "[IN:GET_ALARM [SL:ORDINAL next ] ]"}
{"utterance": "Recommend me some Broadway shows in Anchorage for Thursday night", "intent": "Not found.", "AMR Graph": "(recommend-01 \n    :arg0 (i) \n    :arg1 (show \n        :mod (broadway) \n        :location (anchorage) \n        :time (Thursday night)))", "key_phrase": "Broadway shows, Anchorage, Thursday night", "slot_type": "title_event, Broadway shows\nlocation, Anchorage\ndate_time, Thursday night", "pred_lf": "[IN:recommendation [SL:title_event Broadway shows] [SL:location Anchorage] [SL:date_time Thursday night]]", "gold_lf": "[IN:GET_EVENT [SL:CATEGORY_EVENT Broadway shows ] [SL:LOCATION Anchorage ] [SL:DATE_TIME for Thursday night ] ]"}
{"utterance": "What's news about facebook this week", "intent": "question_news", "AMR Graph": "(d / discuss-01\n      :topic (f / facebook)\n      :time (w / week-01) \n      :medium (n / news))", "key_phrase": "facebook, this week, news", "slot_type": "(news_topic, facebook), (date_time, this week), (news_type, news)", "pred_lf": "[IN:question_news [SL:news_topic facebook] [SL:date_time this week] [SL:news_type news]]", "gold_lf": "[IN:GET_STORIES_NEWS [SL:NEWS_TYPE news ] [SL:NEWS_TOPIC facebook ] [SL:DATE_TIME this week ] ]"}
{"utterance": "can you set a warning alarm for 7pm", "intent": "create_alarm", "AMR Graph": "(set-event\n  :event (set-alarm\n           :alarm-type (warning)\n           :time 7pm))", "key_phrase": "set a warning alarm, 7pm.", "slot_type": "(todo, set a warning alarm), (date_time, 7pm)", "pred_lf": "[IN:create_alarm [SL:todo set a warning alarm] [SL:date_time 7pm]]", "gold_lf": "[IN:CREATE_ALARM [SL:ALARM_NAME warning ] [SL:DATE_TIME for 7 pm ] ]"}
{"utterance": "Tell me about events going on in Crandon this weekend", "intent": "get_event", "AMR Graph": "(c / communicate-01\n      :subject (m / me)\n      :object (e / event\n                  :name (g / name\n                              :op1 \"going on\"\n                              :op2 \"Crandon this weekend\")))", "key_phrase": "events, Crandon, this weekend", "slot_type": "(title_event, events), (location, Crandon), (date_time, this weekend)", "pred_lf": "[IN:get_event [SL:title_event events] [SL:location Crandon] [SL:date_time this weekend]]", "gold_lf": "[IN:GET_EVENT [SL:LOCATION Crandon ] [SL:DATE_TIME this weekend ] ]"}
{"utterance": "make one timer for four minutes and another for 10 minutes", "intent": "create_timer", "AMR Graph": "(m / make-01\n   :ARG0 (w / we)\n   :ARG1 (and\n             :op1 (t / timer\n                       :quant 1\n                       :duration (m2 / minute :op1 4))\n             :op2 (t2 / timer\n                       :quant 1\n                       :duration (m3 / minute :op1 10))))", "key_phrase": "timer for four minutes, another timer for 10 minutes", "slot_type": "(method_timer, timer for four minutes), (method_timer, another timer for 10 minutes)", "pred_lf": "[IN:create_timer [SL:method_timer timer for four minutes] [SL:method_timer another timer for 10 minutes]]", "gold_lf": "[IN:CREATE_TIMER [SL:AMOUNT one ] [SL:METHOD_TIMER timer ] [SL:DATE_TIME for four minutes ] [SL:DATE_TIME for 10 minutes ] ]"}
{"utterance": "How do I prepare spaghetti", "intent": "get_info_recipes", "AMR Graph": "(c / cause-01\n      :ARG0 (i / i)\n      :ARG1 (p / prepare-01\n                  :ARG0 i\n                  :ARG1 (s / spaghetti)))", "key_phrase": "prepare spaghetti, I", "slot_type": "(O, I), (recipes_dish, prepare spaghetti)", "pred_lf": "[IN:get_info_recipes [SL:O I] [SL:recipes_dish prepare spaghetti]]", "gold_lf": "[IN:GET_RECIPES [SL:RECIPES_DISH spaghetti ] ]"}
{"utterance": "mark me as not going to Olympic Peninsula Apple and Cider Festival", "intent": "set_rsvp_no", "AMR Graph": "(c / mark-01\n      :ARG0 (i / me)\n      :ARG1 (n / not\n            :op1 (g / go-01 \n                  :ARG0 i\n                  :ARG1 (f / festival \n                        :name (n2 / name \n                              :op1 \"Olympic Peninsula Apple and Cider Festival\")))))", "key_phrase": "mark me, not going, Olympic Peninsula Apple and Cider Festival", "slot_type": "(user_attendee_event, mark me), (group, not going), (title_event, Olympic Peninsula Apple and Cider Festival)", "pred_lf": "[IN:set_rsvp_no [SL:user_attendee_event mark me] [SL:group not going] [SL:title_event Olympic Peninsula Apple and Cider Festival]]", "gold_lf": "[IN:SET_RSVP_NO [SL:TITLE_EVENT Olympic Peninsula Apple and Cider Festival ] ]"}
{"utterance": "tell mark to pick up our to go order from olive garden", "intent": "None of the listed intents are a match for this sentence as it is not related to any of the provided intent vocabulary items.", "AMR Graph": "(t / tell-01\n      :agent (p / person :name \"speaker\")\n      :theme (o / order\n                  :ordertype (t2 / to-go)\n                  :from (r / restaurant :name \"Olive Garden\"))\n      :recipient (p2 / person :name \"Mark\")\n      :purpose (p3 / pick-02\n                  :agent p2\n                  :theme o))", "key_phrase": "Mark, pick up, to go order, Olive Garden", "slot_type": "(O, tell), (person_reminded, Mark), (method_retrieval_reminder, pick up), (recipes_dish, to go order), (location, Olive Garden)", "pred_lf": "[IN:N/A [SL:O tell] [SL:person_reminded Mark] [SL:method_retrieval_reminder pick up] [SL:recipes_dish to go order] [SL:location Olive Garden]]", "gold_lf": "[IN:SEND_MESSAGE [SL:RECIPIENT mark ] [SL:CONTENT_EXACT pick up our to go order from olive garden ] ]"}
{"utterance": "Set my alarm for 21st of May at 5 am.", "intent": "create_alarm", "AMR Graph": "(set\n      :ARG0 (my-alarms\n               :ARG0 (I))\n      :time (date-entity\n               :year 2021\n               :month 5\n               :day 21\n               :time (time-entity\n                         :hour 5\n                         :minute 0)))", "key_phrase": "my alarm, 21st of May, 5 am", "slot_type": "(alarm_name, my alarm), (date_time, 21st of May), (date_time, 5 am)", "pred_lf": "[IN:create_alarm [SL:alarm_name my alarm] [SL:date_time 21st of May] [SL:date_time 5 am]]", "gold_lf": "[IN:CREATE_ALARM [SL:DATE_TIME for 21st of May at 5 am ] ]"}
{"utterance": "call on whatsapp Zachary Adkins", "intent": "create_call", "AMR Graph": "(call\n     :ARG0 (on\n               :ARG0 (whatsapp)\n               :ARG1 (Adkins\n                       :name (Zachary))))\n               \nNote: The AMR graph above uses the Neo-Davidsonian format, which includes a separate predicate for the event and its arguments (ARG0, ARG1, etc.). In this format, \"call\" is the main predicate representing the event, while \"on\" and \"Adkins\" are its arguments. \"whatsapp\" is an argument of \"on\" and \"Zachary\" is a named entity inside the argument \"Adkins\".", "key_phrase": "whatsapp, Zachary Adkins", "slot_type": "(contact_method, whatsapp), (person_reminded, Zachary Adkins)", "pred_lf": "[IN:create_call [SL:contact_method whatsapp] [SL:person_reminded Zachary Adkins]]", "gold_lf": "[IN:CREATE_CALL [SL:NAME_APP whatsapp ] [SL:CONTACT Zachary Adkins ] ]"}
{"utterance": "Is it below 47 in F at New York today", "intent": "get_weather", "AMR Graph": "(c / compare-01\n      :polarity -\n      :ARG0 (i / it)\n      :ARG1 (b / below\n            :location (c2 / city :name \"New York\")\n            :unit \"F\"\n            :degree (q / quantity :quant 47))\n      :time (t / today))", "key_phrase": "it, below 47 in F, New York, today", "slot_type": "(weather_attribute, below 47 in F), (location, New York), (date_time, today)", "pred_lf": "[IN:get_weather [SL:weather_attribute below 47 in F] [SL:location New York] [SL:date_time today]]", "gold_lf": "[IN:GET_WEATHER [SL:WEATHER_ATTRIBUTE below ] [SL:WEATHER_ATTRIBUTE 47 ] [SL:WEATHER_TEMPERATURE_UNIT F ] [SL:LOCATION New York ] [SL:DATE_TIME today ] ]"}
{"utterance": "Did my Mom send me a message this week?", "intent": "get_message_contact", "AMR Graph": "(c / communicate \n  :ARG0 (m / mother)\n  :ARG1 (s / send \n         :ARG0 m \n         :ARG1 (m2 / message \n                :ARG0 (i / i)))\n  :when (w / week)\n  :polarity -)", "key_phrase": "Mom, send message, this week", "slot_type": "person_reminded, Mom \nmethod_retrieval_reminder, send message \ndate_time, this week", "pred_lf": "[IN:get_message_contact [SL:person_reminded Mom] [SL:method_retrieval_reminder send message] [SL:date_time this week]]", "gold_lf": "[IN:GET_MESSAGE [SL:SENDER my Mom ] [SL:RECIPIENT me ] [SL:DATE_TIME this week ] ]"}
{"utterance": "What kind of event is Pumpkin Run?", "intent": "get_event", "AMR Graph": "(complete-event :name \"Pumpkin Run\" :ARG1 (kind :polarity +))", "key_phrase": "event, Pumpkin Run, kind", "slot_type": "(title_event, Pumpkin Run), (type_content, event), (category_event, kind)", "pred_lf": "[IN: get_event [SL: title_event Pumpkin Run] [SL: type_content event] [SL: category_event kind]]", "gold_lf": "[IN:GET_CATEGORY_EVENT [SL:TITLE_EVENT Pumpkin Run ] ]"}
{"utterance": "reset alarm for 7am on Sunday morning", "intent": "update_alarm", "AMR Graph": "(reset-01\n    :time (specific-time :weekday sunday :hour 7 :minute 00)\n    :medium (alarm))", "key_phrase": "reset alarm, 7am, Sunday morning", "slot_type": "(todo, reset alarm), (date_time, 7am), (date_time, Sunday morning)", "pred_lf": "[IN:update_alarm [SL:todo reset alarm] [SL:date_time 7am] [SL:date_time Sunday morning]]", "gold_lf": "[IN:CREATE_ALARM [SL:DATE_TIME for 7 am on Sunday morning ] ]"}
{"utterance": "Find a recipe for jerk chicken", "intent": "get_info_recipes", "AMR Graph": "(e / event\n    :type \"find-01\"\n    :ARG0 (y / you)\n    :ARG1 (r / recipe\n            :mod (c / chicken\n                :mod (j / jerk))))", "key_phrase": "recipe, jerk chicken", "slot_type": "(recipes_dish, jerk chicken), (recipes_type, recipe)", "pred_lf": "[IN:get_info_recipes [SL:recipes_dish jerk chicken] [SL:recipes_type recipe]]", "gold_lf": "[IN:GET_RECIPES [SL:RECIPES_DISH jerk chicken ] ]"}
{"utterance": "play destiny's child", "intent": "play_music", "AMR Graph": "(c / play :ARG0 (p / person :name \"destiny's child\"))", "key_phrase": "play, destiny's child", "slot_type": "(music_track_title, destiny's child), (music_type, play)", "pred_lf": "[IN:play_music [SL:music_track_title destiny's child] [SL:music_type play]]", "gold_lf": "[IN:PLAY_MUSIC [SL:MUSIC_ARTIST_NAME destiny 's child ] ]"}
{"utterance": "make an alarm for the 5th", "intent": "create_alarm", "AMR Graph": "(make\n    :event (alarm\n              :time 5th))", "key_phrase": "make, alarm, 5th", "slot_type": "(method_timer, make), (alarm_name, alarm), (ordinal, 5th)", "pred_lf": "[IN:create_alarm [SL:method_timer make] [SL:alarm_name alarm] [SL:ordinal 5th]]", "gold_lf": "[IN:CREATE_ALARM [SL:DATE_TIME for the 5th ] ]"}
{"utterance": "Set an alarm for Monday at 5pm", "intent": "create_alarm", "AMR Graph": "(set \n  :ARG0 (alarm \n           :time (weekday-entity :name \"Monday\")\n           :time-of-day (time-of-day :hours 5 :minutes 0)\n       )\n)", "key_phrase": "Set an alarm, Monday at 5pm, alarm, weekday-entity, time-of-day.", "slot_type": "(todo, Set an alarm), (date_time, Monday at 5pm), (alarm_name, alarm), (date_time, weekday-entity), (date_time, time-of-day)", "pred_lf": "[IN:create_alarm [SL:todo Set an alarm] [SL:date_time Monday at 5pm] [SL:date_time weekday-entity] [SL:date_time time-of-day] [SL:alarm_name alarm]]", "gold_lf": "[IN:CREATE_ALARM [SL:DATE_TIME for Monday at 5 pm ] ]"}
{"utterance": "When did Lisa's employment at Publix finish?", "intent": "get_employment_time", "AMR Graph": "(time-of\n        :op1 (employment\n                :poss Lisa\n                :at Publix)\n        :op2 finish)", "key_phrase": "Lisa's employment, Publix, finish", "slot_type": "(job, Lisa's employment), (location, Publix), (O, finish)", "pred_lf": "[IN:get_employment_time [SL:job Lisa's employment] [SL:location Publix] [SL:O finish]]", "gold_lf": "[IN:GET_EMPLOYMENT_TIME [SL:CONTACT Lisa ] [SL:EMPLOYER Publix ] ]"}
{"utterance": "What's Larry's work address?", "intent": "get_location", "AMR Graph": "(c / check-01 \n      :ARG0 (w / what)\n      :ARG1 (a / address\n               :mod (w2 / work \n                         :poss (l / name :op1 \"Larry\"))))", "key_phrase": "Larry's work address", "slot_type": "(O, What's), (job, Larry's work address)", "pred_lf": "[IN:get_location [SL:O What's] [SL:job Larry's work address]]", "gold_lf": "[IN:GET_LOCATION [SL:CONTACT Larry ] ]"}
{"utterance": "Does Rachel live in Avon?", "intent": "get_location", "AMR Graph": "(live :ARG0 Rachel :ARG1 (in :ARG1 Avon))", "key_phrase": "Rachel, live in Avon", "slot_type": "(person_reminded, Rachel), (location, Avon)", "pred_lf": "[IN:get_location [SL:person_reminded Rachel] [SL:location Avon]]", "gold_lf": "[IN:GET_LOCATION [SL:CONTACT Rachel ] [SL:LOCATION Avon ] ]"}
{"utterance": "What method of cooking is better", "intent": "question_news", "AMR Graph": "(c / compare-01\n      :arg1 (m / method\n            :mod (c2 / cook-01))\n      :degree (b / good-01))", "key_phrase": "method of cooking, better", "slot_type": "(recipes_cooking_method, method of cooking), (O, better)", "pred_lf": "[IN:question_news [SL:recipes_cooking_method method of cooking] [SL:O better]]", "gold_lf": "[IN:GET_INFO_RECIPES ]"}
{"utterance": "what is the weather in New York today?", "intent": "get_weather", "AMR Graph": "(c / check-weather\n  :location (l / location\n                :name \"New York\")\n  :time (t / today))", "key_phrase": "weather, New York, today", "slot_type": "(weather_attribute, weather), (location, New York), (date_time, today)", "pred_lf": "[IN:get_weather [SL:weather_attribute weather] [SL:location New York] [SL:date_time today]]", "gold_lf": "[IN:GET_WEATHER [SL:LOCATION New York ] [SL:DATE_TIME today ] ]"}
{"utterance": "add camille to call", "intent": "create_call", "AMR Graph": "(add :object (call :receiver (person :named \"Camille\")))", "key_phrase": "camille, call", "slot_type": "(user_attendee_event, camille), (title_event, call)", "pred_lf": "[IN:create_call [SL:user_attendee_event camille] [SL:title_event call]]", "gold_lf": "[IN:UPDATE_CALL [SL:CONTACT_ADDED camille ] ]"}
{"utterance": "How to make gluten free pancakes", "intent": "get_info_recipes", "AMR Graph": "(c / choose-01 \n      :ARG1 (Y / you) \n      :ARG2 (p / pancake \n                  :mod (g / gluten-free)))", "key_phrase": "make gluten free pancakes, How to make, gluten free pancakes", "slot_type": "recipes_dish, gluten free pancakes\nmethod_recipes, How to make", "pred_lf": "[IN:get_info_recipes [SL:recipes_dish gluten free pancakes] [SL:method_recipes How to make]]", "gold_lf": "[IN:GET_RECIPES [SL:RECIPES_TYPE gluten free ] [SL:RECIPES_DISH pancakes ] ]"}
{"utterance": "Pause the timer.", "intent": "pause_timer", "AMR Graph": "(pause :action (timer))", "key_phrase": "Pause, the timer", "slot_type": "(method_timer, Pause), (method_timer, the timer)", "pred_lf": "[IN:pause_timer [SL:method_timer Pause] [SL:method_timer the timer]]", "gold_lf": "[IN:PAUSE_TIMER [SL:METHOD_TIMER timer ] ]"}
{"utterance": "remind rex to set up the meeting time", "intent": "create_reminder", "AMR Graph": "(r / remind\n      :agent (p / person :name \"rex\")\n      :purpose (s / set-up\n                  :theme (m / meeting\n                             :time-of-meeting (t / temp)))\n      :mode imperative)", "key_phrase": "rex, set up, meeting time, remind", "slot_type": "(contact, rex), (method_todo, remind), (title_event, meeting time), (method_timer, set up)", "pred_lf": "[IN:create_reminder [SL:contact rex] [SL:method_todo remind] [SL:title_event meeting time] [SL:method_timer set up]]", "gold_lf": "[IN:CREATE_REMINDER [SL:PERSON_REMINDED rex ] [SL:TODO set up the meeting time ] ]"}
{"utterance": "Can I wear sandals today?", "intent": "None of the above (this sentence does not match any of the given intents, which are mainly related to music, calls, reminders, etc.)", "AMR Graph": "(c / can \n      :ARG0 (i)\n      :ARG1 (w / wear \n             :ARG0 i \n             :ARG1 (s / sandals)\n             :ARGM-TMP today))", "key_phrase": "I, wear sandals, today", "slot_type": "(person_reminded, I), (method_timer, wear sandals), (date_time, today)", "pred_lf": "[IN:unknown [SL:person_reminded I] [SL:method_timer wear sandals] [SL:date_time today]]", "gold_lf": "[IN:GET_WEATHER [SL:WEATHER_ATTRIBUTE sandals ] [SL:DATE_TIME today ] ]"}
{"utterance": "Add aunties to current call", "intent": "merge_call", "AMR Graph": "(add\n      :ARG0 (aunties)\n      :ARG1 (current-call))", "key_phrase": "aunties, current call, add", "slot_type": "(group, aunties), (type_relation, current call), (method_contact, add)", "pred_lf": "[IN:merge_call [SL:group aunties] [SL:type_relation current call] [SL:method_contact add]]", "gold_lf": "[IN:UPDATE_CALL [SL:CONTACT_ADDED aunties ] ]"}
{"utterance": "where will american federal aid be sent to", "intent": "None of the intents listed match this sentence. This sentence does not seem to fit into any specific intent category.", "AMR Graph": "(n / believe-01\n      :ARG0 (y / you)\n      :ARG1 (i / important-02\n            :extent (a / absolute\n                  :polarity -))\n      :ARG2 (t / this))", "key_phrase": "american federal aid, be sent to", "slot_type": "(location, american federal aid), (method_retrieval_reminder, be sent to)", "pred_lf": "[IN:N/A [SL:location american federal aid] [SL:method_retrieval_reminder be sent to]]", "gold_lf": "[IN:QUESTION_NEWS [SL:NEWS_TOPIC where will american federal aid be sent to ] ]"}
{"utterance": "get me messages from Angela", "intent": "get_message_contact", "AMR Graph": "(c / command\n      :subject (i / i)\n      :object (p / person :name \"Angela\")\n      :action (g / get\n                  :object (m / message)))", "key_phrase": "get messages, Angela", "slot_type": "(todo, get messages), (contact, Angela)", "pred_lf": "[IN:get_message_contact [SL:todo get messages] [SL:contact Angela]]", "gold_lf": "[IN:GET_MESSAGE [SL:SENDER Angela ] ]"}
{"utterance": "Temperature this weekend new york fahrenheit", "intent": "get_weather", "AMR Graph": "(c / temperature \n     :time (w / weekend) \n     :location (c2 / city :name \"New York\") \n     :unit fahrenheit)", "key_phrase": "Temperature, this weekend, New York, Fahrenheit", "slot_type": "(weather_temperature_unit, Temperature), (location, New York), (weather_temperature_unit, Fahrenheit)", "pred_lf": "[IN:get_weather [SL:location New York] [SL:weather_temperature_unit Temperature] [SL:weather_temperature_unit Fahrenheit]]", "gold_lf": "[IN:GET_WEATHER [SL:DATE_TIME this weekend ] [SL:LOCATION new york ] [SL:WEATHER_TEMPERATURE_UNIT fahrenheit ] ]"}
{"utterance": "How many kids got arrested", "intent": "question_news", "AMR Graph": "(c / count\n      :quant  (m / many)\n      :ARG0   (k / kid\n                  :quant (n / num-of\n                              :op1  (a / arrest\n                                          :ARG0 (s / somebody))))))", "key_phrase": "kids, arrested", "slot_type": "(O, How many), (ordinal, kids), (O, got), (arrested, arrested)", "pred_lf": "[IN:question_news [SL:O How many] [SL:ordinal kids] [SL:O got] [SL:arrested arrested]]", "gold_lf": "[IN:QUESTION_NEWS [SL:NEWS_TOPIC kids got arrested ] ]"}
{"utterance": "Show new messages", "intent": "get_message", "AMR Graph": "(show :ARG1 (message :mod new))", "key_phrase": "new messages", "slot_type": "(type_content, new messages)", "pred_lf": "[IN:get_message [SL:type_content new messages]]", "gold_lf": "[IN:GET_MESSAGE ]"}
{"utterance": "Remind me to take dinner to Lori on Friday.", "intent": "create_reminder", "AMR Graph": "(c / remind-01 \n      :ARG0 (i / i) \n      :ARG1 (t / take-01 \n                  :ARG0 i \n                  :ARG1 (d / dinner)\n                  :ARG2 (p / to \n                              :ARG1 (p2 / person :wiki \"Lori\"))))\n       :time (fr / friday))", "key_phrase": "Remind me, take dinner, Lori, Friday", "slot_type": "(todo, Remind me), (recipes_meal, take dinner), (contact, Lori), (date_time, Friday)", "pred_lf": "[IN:create_reminder [SL:todo Remind me] [SL:recipes_meal take dinner] [SL:contact Lori] [SL:date_time Friday]]", "gold_lf": "[IN:CREATE_REMINDER [SL:PERSON_REMINDED me ] [SL:TODO take dinner to Lori ] [SL:DATE_TIME on Friday ] ]"}
{"utterance": "Show my spa reminders with my mom next month.", "intent": "get_reminder", "AMR Graph": "(c / show-01\n      :ARG0 (j / i)\n      :ARG1 (r / reminder\n            :poss (m / my)\n            :topic (s / spa))\n      :ARG2 (t / next-month\n            :opX (w / with\n                  :ARG0 j\n                  :ARG1 m)))", "key_phrase": "my spa reminders, my mom, next month, with my mom", "slot_type": "(todo, my spa reminders), (user_attendee_event, my mom), (date_time, next month), (attendee_event, with my mom)", "pred_lf": "[IN:get_reminder [SL:todo my spa reminders] [SL:user_attendee_event my mom] [SL:date_time next month] [SL:attendee_event with my mom]]", "gold_lf": "[IN:GET_REMINDER [SL:METHOD_RETRIEVAL_REMINDER Show ] [SL:PERSON_REMINDED my ] [SL:TODO spa ] [SL:TODO with my mom ] [SL:DATE_TIME next month ] ]"}
{"utterance": "Michigan crime reports", "intent": "question_news", "AMR Graph": "(c / crime-report \n     :location (s / state :name \"Michigan\"))", "key_phrase": "Michigan, crime reports", "slot_type": "(location, Michigan), (news_type, crime reports)", "pred_lf": "[IN:question_news [SL:location Michigan] [SL:news_type crime reports]]", "gold_lf": "[IN:GET_STORIES_NEWS [SL:NEWS_TOPIC Michigan crime ] [SL:NEWS_TYPE reports ] ]"}
{"utterance": "What's the biggest story today?", "intent": "question_news", "AMR Graph": "(d / demand-01\n      :wh (q / what)\n      :polarity +\n      :ARG0 (s / story\n            :degree (b / big)))\n      :time (t / today))", "key_phrase": "biggest story, today", "slot_type": "(news_type, biggest story), (date_time, today)", "pred_lf": "[IN: question_news [SL: news_type biggest story] [SL: date_time today]]", "gold_lf": "[IN:GET_STORIES_NEWS [SL:NEWS_REFERENCE biggest ] [SL:NEWS_TYPE story ] [SL:DATE_TIME today ] ]"}
{"utterance": "please record a video message for Gina and Sparks", "intent": "create_message", "AMR Graph": "(c / record-01 \n    :ARG0 (y / you) \n    :ARG1 (m / message \n        :mod (v / video) \n        :prep-for (p / person \n            :name (n / name \n                :op1 \"Gina\") \n            :name (n2 / name \n                :op1 \"Sparks\"))))", "key_phrase": "record a video message, for Gina and Sparks, please", "slot_type": "(todo, record a video message), (group, Gina and Sparks)", "pred_lf": "[IN:create_message [SL:todo record a video message] [SL:group Gina and Sparks]]", "gold_lf": "[IN:SEND_MESSAGE [SL:TYPE_CONTENT video ] [SL:RECIPIENT Gina ] [SL:RECIPIENT Sparks ] ]"}
{"utterance": "What is the temperature going to be today?", "intent": "get_weather", "AMR Graph": "(c / temperature\n      :modality \"possibility\"\n      :time (t / today))", "key_phrase": "temperature, today", "slot_type": "(weather_temperature_unit, temperature), (date_time, today)", "pred_lf": "[IN:get_weather [SL: weather_temperature_unit temperature] [SL: date_time today]]", "gold_lf": "[IN:GET_WEATHER [SL:DATE_TIME today ] ]"}
{"utterance": "Do you have any reminders for me?", "intent": "get_reminder", "AMR Graph": "(existential-quantification \n    :quantifier \"any\"\n    :variable (reminder-m)\n    :body (have-u \n              :arg0 u \n              :arg1 reminder-m))", "key_phrase": "reminders, me", "slot_type": "(todo, reminders), (O, me)", "pred_lf": "[IN:get_reminder [SL:todo reminders] [SL:O me]]", "gold_lf": "[IN:GET_REMINDER [SL:PERSON_REMINDED me ] ]"}
{"utterance": "I have a video message I need sent to my dad.", "intent": "send_message", "AMR Graph": "(s / send-01 \n       :ARG0 (i / i)\n       :ARG1 (m / message \n                  :topic (v / video)\n                  :sender (i)\n                  :recipient (d / dad)))", "key_phrase": "I, video message, need sent, dad.", "slot_type": "(O, I), (type_content, video message), (method_retrieval_reminder, need sent), (contact_related, dad)", "pred_lf": "[IN:send_message [SL:O I] [SL:type_content video message] [SL:method_retrieval_reminder need sent] [SL:contact_related dad]]", "gold_lf": "[IN:SEND_MESSAGE [SL:TYPE_CONTENT video ] [SL:RECIPIENT my dad ] ]"}
{"utterance": "Any celebrity news stories?", "intent": "question_news", "AMR Graph": "(c / cause-01\n      :ARG1 (n / news\n                  :mod (c2 / celebrity))\n      :polarity -))\n\nThe above AMR representation depicts that the sentence is conveying a question about celebrity news stories. The \"cause-01\" relation signifies that the sentence is a question that seeks information, and the \"-polarity\" attribute signifies the negation of the question. The \"news\" node is modified by the \"celebrity\" to denote that the question is about celebrity-related news.", "key_phrase": "celebrity news stories, news, celebrity", "slot_type": "(news_topic, celebrity news stories), (news_type, news), (news_topic, celebrity)", "pred_lf": "[IN:question_news [SL:news_topic celebrity news stories] [SL:news_type news] [SL:news_topic celebrity]]", "gold_lf": "[IN:GET_STORIES_NEWS [SL:NEWS_CATEGORY celebrity ] [SL:NEWS_TYPE news stories ] ]"}
{"utterance": "put up my blink timer", "intent": "create_timer", "AMR Graph": "(c / put-01\n      :agent (a / myself)\n      :theme (b / timer\n                  :mod (d / blink)\n                  :poss (c2 / my)))", "key_phrase": "my blink timer, put up", "slot_type": "(method_timer, blink timer), (todo, put up)", "pred_lf": "[IN:create_timer [SL:method_timer blink timer] [SL:todo put up]]", "gold_lf": "[IN:GET_TIMER [SL:TIMER_NAME blink ] [SL:METHOD_TIMER timer ] ]"}
{"utterance": "how do you cook steak in a pan", "intent": "get_info_recipes", "AMR Graph": "(cook-01 \n   :ARG0 (you) \n   :ARG1 (steak \n          :mod (in-01 \n                 :ARG2 (pan))))", "key_phrase": "cook steak, in a pan.", "slot_type": "recipes_cooking_method, cook steak\nlocation, in a pan.", "pred_lf": "[IN:get_info_recipes [SL:recipes_cooking_method cook steak] [SL:location in a pan]]", "gold_lf": "[IN:GET_INFO_RECIPES [SL:RECIPES_INCLUDED_INGREDIENT steak ] ]"}
{"utterance": "how long should i cook ribs", "intent": "get_info_recipes", "AMR Graph": "(c / cook-01\n      :ARG0 (i / i)\n      :ARG1 (r / rib\n            :tmod (h / how-long)))", "key_phrase": "cook ribs, how long", "slot_type": "(recipes_cooking_method, cook ribs), (method_timer, how long)", "pred_lf": "[IN:get_info_recipes [SL:recipes_cooking_method cook ribs] [SL:method_timer how long]]", "gold_lf": "[IN:GET_INFO_RECIPES [SL:RECIPES_ATTRIBUTE how long ] [SL:RECIPES_INCLUDED_INGREDIENT ribs ] ]"}
{"utterance": "End my call", "intent": "end_call", "AMR Graph": "(c / call\n  :ARG0 (p / person :mod-poss my)\n  :mode imperative\n  :polarity -\n  :instance-of (e / end-01))", "key_phrase": "End, my call", "slot_type": "(O, End), (contact_method, my call)", "pred_lf": "[IN:end_call [SL:O End] [SL:contact_method my call]]", "gold_lf": "[IN:END_CALL ]"}
{"utterance": "Savannah Georgia events for next weekend", "intent": "get_event", "AMR Graph": "(c / city \n     :name \"Savannah\"\n     :part-of (s / state\n                 :name \"Georgia\"))\n(e / event \n     :time \"next weekend\"\n     :place c)", "key_phrase": "Savannah, Georgia, events, next weekend", "slot_type": "(location, Savannah), (location, Georgia), (title_event, events), (date_time, next weekend)", "pred_lf": "[IN:get_event [SL:title_event events] [SL:location Savannah] [SL:location Georgia] [SL:date_time next weekend]]", "gold_lf": "[IN:GET_EVENT [SL:LOCATION Savannah Georgia ] [SL:DATE_TIME for next weekend ] ]"}
{"utterance": "what's the temperature supposed to be tomorrow?", "intent": "get_weather", "AMR Graph": "(s / supose-01 \n      :polarity + \n      :ARG0 (t / temperature \n                  :mod (t2 / tomorrow)))", "key_phrase": "temperature, tomorrow", "slot_type": "(weather_temperature_unit, temperature), (date_time, tomorrow)", "pred_lf": "[IN:get_weather [SL:weather_temperature_unit temperature] [SL:date_time tomorrow]]", "gold_lf": "[IN:GET_WEATHER [SL:DATE_TIME tomorrow ] ]"}
{"utterance": "Did someone just graduate from CU Denver?", "intent": "get_education_degree / get_education_time", "AMR Graph": "(c / graduate-01\n    :ARG0 (s / someone)\n    :time (j / just)\n    :ARG1 (u / university\n           :name (n / name :value \"CU Denver\")))", "key_phrase": "someone, graduate, CU Denver", "slot_type": "(person_reminded, someone), (education_degree, graduate), (school, CU Denver)", "pred_lf": "[IN:get_education_degree [SL:person_reminded someone] [SL:education_degree graduate] [SL:school CU Denver]] OR [IN:get_education_time [SL:person_reminded someone] [SL:school CU Denver]]", "gold_lf": "[IN:GET_CONTACT [SL:SCHOOL CU Denver ] ]"}
{"utterance": "which whole food karen used to work at", "intent": "get_job", "AMR Graph": "(c / choose-01 \n      :ARG0 (p / person :name \"Karen\")\n      :ARG1 (w / work-01\n            :ARG0 p\n            :ARG1 (f / food :mod (w2 / whole))))", "key_phrase": "whole food, Karen, work at.", "slot_type": "(group, whole food), (person_reminded, Karen), (job, work at)", "pred_lf": "[IN: get_job [SL: group whole food] [SL: person_reminded Karen] [SL: job work at]]", "gold_lf": "[IN:GET_EMPLOYER [SL:EMPLOYER whole food ] [SL:CONTACT karen ] ]"}
{"utterance": "Healthy dinner recipes", "intent": "get_info_recipes", "AMR Graph": "(dinner :mod healthy :mod recipes)", "key_phrase": "healthy dinner, dinner recipes", "slot_type": "recipes_type_nutrition, Healthy dinner \nrecipes_type, recipes", "pred_lf": "[IN:get_info_recipes [SL:recipes_type_nutrition Healthy dinner] [SL:recipes recipes]]", "gold_lf": "[IN:GET_RECIPES [SL:RECIPES_ATTRIBUTE Healthy ] [SL:RECIPES_MEAL dinner ] ]"}
{"utterance": "Message Jason and ask him to send a photo of his damaged car.", "intent": "get_message_contact", "AMR Graph": "(c / communicate-01\n      :arg0 (i / i)\n      :arg1 (a / ask\n              :arg0 i\n              :arg1 (s / send-01\n                      :arg0 h\n                      :arg1 (p / picture\n                              :mod (d / damage-01)\n                              :mod (c / car)\n                          )\n                  )\n          )\n      :arg2 (p2 / person :wiki \"Jason_(given_name)\"\n              :named \"Jason\"\n          )\n  )", "key_phrase": "Message Jason, ask him, send a photo, damaged car.", "slot_type": "(user_attendee_event, Jason), (method_recipes, send), (type_content, photo), (recipes_attribute, damaged car)", "pred_lf": "[IN:get_message_contact [SL:user_attendee_event Jason] [SL:method_recipes send] [SL:type_content photo] [SL:recipes_attribute damaged car]]", "gold_lf": "[IN:SEND_MESSAGE [SL:RECIPIENT Jason ] [SL:CONTENT_EXACT send a photo of his damaged car ] ]"}
{"utterance": "What temp for the cherry pies", "intent": "None of the intents listed match this sentence. It appears to be a question about a recipe or cooking instruction, rather than an action or request.", "AMR Graph": "(d / demand-01\n      :requested-name (t / temp)\n      :topic (p / pie\n              :mod (c / cherry)))", "key_phrase": "cherry pies, temp", "slot_type": "(recipes_dish, cherry pies), (weather_temperature_unit, temp)", "pred_lf": "[IN: recipe_info [SL: recipes_dish cherry pies] [SL: weather_temperature_unit temp]]", "gold_lf": "[IN:GET_INFO_RECIPES [SL:RECIPES_ATTRIBUTE temp ] [SL:RECIPES_DISH cherry pies ] ]"}
{"utterance": "Add more minutes to my timer.", "intent": "add_time_timer", "AMR Graph": "(cycle\n      :event (add-01\n               :ARG1 (cycle\n                        :poss (cycle\n                                :poss my\n                                :op1 timer))\n               :ARG2 (cycle\n                        :op1 (cycle\n                                :op1 more)\n                        :op2 minutes))))", "key_phrase": "more minutes, my timer", "slot_type": "(method_timer, more minutes), (todo, my timer)", "pred_lf": "[IN:add_time_timer [SL:method_timer more minutes] [SL:todo my timer]]", "gold_lf": "[IN:ADD_TIME_TIMER [SL:DATE_TIME minutes ] [SL:METHOD_TIMER timer ] ]"}
{"utterance": "What is the hottest that it will get all week?", "intent": "get_weather", "AMR Graph": "( d / get-01 \n    :polarity     - \n    :ARG0         ( i / it ) \n    :ARG1         ( w / week \n                        :quant ( all ) \n                        :time ( t / temporal-quantity \n                                    :unit week ) ) \n    :ARG2         ( h / hot \n                        :degree ( m / maximize-01 \n                                    :ARG1 ( i2 / it ) \n                                    :time ( t2 / temporal-quantity \n                                                :unit week ) ) ) )", "key_phrase": "hottest, all week, get", "slot_type": "(weather_attribute, hottest), (period, all week), (method_retrieval_reminder, get)", "pred_lf": "[IN:get_weather [SL:weather_attribute hottest] [SL:period all week] [SL:method_retrieval_reminder get]]", "gold_lf": "[IN:GET_WEATHER [SL:WEATHER_ATTRIBUTE hottest ] [SL:DATE_TIME all week ] ]"}
{"utterance": "set alarm for 7:30 am", "intent": "create_alarm", "AMR Graph": "(set :action (alarm) :time (7:30 am))", "key_phrase": "set alarm, 7:30 am", "slot_type": "(method_timer, set alarm), (date_time, 7:30 am)", "pred_lf": "[IN:create_alarm [SL:method_timer set alarm] [SL:date_time 7:30 am]]", "gold_lf": "[IN:CREATE_ALARM [SL:DATE_TIME for 7 : 30 am ] ]"}
{"utterance": "How much is it going to rain tomorrow?", "intent": "get_weather", "AMR Graph": "(c / compare-01          \n      :ARG1 (i / it)      \n      :ARG2 (g / go-01    \n                  :ARGM-TMP (t / tomorrow)))    \n   (r / rain-01           \n      :ARG1 g              \n      :ARG3 (q / quantity)))", "key_phrase": "rain tomorrow, how much", "slot_type": "(weather_attribute, rain tomorrow), (weather_measurement_unit, how much)", "pred_lf": "[IN:get_weather [SL:weather_attribute rain tomorrow] [SL:weather_measurement_unit how much]]", "gold_lf": "[IN:GET_WEATHER [SL:WEATHER_ATTRIBUTE rain ] [SL:DATE_TIME tomorrow ] ]"}
{"utterance": "start music on pandora", "intent": "play_music", "AMR Graph": "(start :action (music :play :service pandora))", "key_phrase": "start music, pandora, play service", "slot_type": "(music_type, start music), (music_provider_name, pandora)", "pred_lf": "[IN:play_music [SL:music_type start music] [SL:music_provider_name pandora]]", "gold_lf": "[IN:PLAY_MUSIC [SL:MUSIC_TYPE music ] [SL:MUSIC_PROVIDER_NAME pandora ] ]"}
{"utterance": "when are the next elections", "intent": "get_details_news", "AMR Graph": "(start / temporal-quantity :quant 1\n      :unit (date-unit :unit \"election\")\n      :op1 (when :op1 (gap)\n                :op2 (time :op1 (now)))))", "key_phrase": "next elections, when", "slot_type": "(title_event, next elections), (date_time, when)", "pred_lf": "[IN:get_details_news [SL:title_event, next elections] [SL:date_time, when]]", "gold_lf": "[IN:QUESTION_NEWS [SL:NEWS_REFERENCE next ] [SL:NEWS_TOPIC elections ] ]"}
{"utterance": "Find me the latest Linkin Park album", "intent": "get_track_info_music", "AMR Graph": "(c / choose-01 \n      :ARG1 (p / person :name \"me\") \n      :ARG2 (a / album \n                  :mod (l / latest) \n                  :name (n / name :op \"Linkin Park\")))", "key_phrase": "Find, me, latest Linkin Park album, album.", "slot_type": "(title_event, latest Linkin Park album), (music_artist_name, Linkin Park)", "pred_lf": "[IN:get_track_info_music [SL:title_event latest Linkin Park album] [SL:music_artist_name Linkin Park]]", "gold_lf": "[IN:PLAY_MUSIC [SL:MUSIC_ARTIST_NAME Linkin Park ] [SL:MUSIC_TYPE album ] ]"}
{"utterance": "Easy salad recipes", "intent": "get_info_recipes", "AMR Graph": "(c / cause-01 \n     :ARG0 (e / easy)\n     :ARG1 (r / recipe-01 \n               :ARG0 e \n               :ARG1 (s / salad)))", "key_phrase": "easy, salad recipes", "slot_type": "(recipes_type, easy), (recipes_dish, salad recipes)", "pred_lf": "[IN:get_info_recipes [SL:recipes_type easy] [SL:recipes_dish salad recipes]]", "gold_lf": "[IN:GET_RECIPES [SL:RECIPES_ATTRIBUTE Easy ] [SL:RECIPES_DISH salad ] ]"}
{"utterance": "call India Cortez and Vivian Hamilton", "intent": "create_call", "AMR Graph": "(c / call :ARG0 (i / India) :ARG1 (a / and :op1 (c2 / Cortez) :op2 (h / Hamilton :name \"Vivian\")))", "key_phrase": "India, Cortez, Vivian Hamilton", "slot_type": "(O, India), (person_reminded, Cortez), (person_reminded, Vivian Hamilton)", "pred_lf": "[IN:create_call [SL:O India] [SL:person_reminded Cortez] [SL:person_reminded Vivian Hamilton]]", "gold_lf": "[IN:CREATE_CALL [SL:CONTACT India Cortez ] [SL:CONTACT Vivian Hamilton ] ]"}
{"utterance": "Where does Paula Carlton work?", "intent": "get_employer", "AMR Graph": "(work:where (person:Paula_Carlton))", "key_phrase": "Paula Carlton, work", "slot_type": "(job, Paula Carlton), (O, work)", "pred_lf": "[IN:get_employer [SL:job Paula Carlton] [SL:O work]]", "gold_lf": "[IN:GET_EMPLOYER [SL:CONTACT Paula Carlton ] ]"}
{"utterance": "Will there be a lot of rain this weekend?", "intent": "get_weather", "AMR Graph": "(w / will\n      :arg1 (t / there)\n      :arg2 (r / rain\n            :mod (m / many)\n            :time (w2 / weekend)))", "key_phrase": "rain, lot of rain, this weekend", "slot_type": "(weather_attribute, rain), (ordinal, lot of rain), (date_time, this weekend)", "pred_lf": "[IN:get_weather [SL: weather_attribute rain] [SL: ordinal lot of rain] [SL: date_time this weekend]]", "gold_lf": "[IN:GET_WEATHER [SL:WEATHER_ATTRIBUTE rain ] [SL:DATE_TIME this weekend ] ]"}
{"utterance": "set an alarm for one hour", "intent": "create_alarm", "AMR Graph": "(set\n    :ARG0 (alarm\n              :ARG1 (time\n                        :quant 1\n                        :unit hour))))", "key_phrase": "set an alarm, one hour", "slot_type": "(method_timer, set an alarm), (recipes_unit_measurement, one hour)", "pred_lf": "[IN:create_alarm [SL:method_timer set an alarm] [SL:recipes_unit_measurement one hour]]", "gold_lf": "[IN:CREATE_ALARM [SL:DATE_TIME for one hour ] ]"}
{"utterance": "Give me news regarding the Senate Russia hearings.", "intent": "question_news", "AMR Graph": "(GIVE :arg0 (ME) :arg1 (REGARDING :topic (NEWS) :arg0 (HEARING :mod (RUSSIA) :quant (SENATE))))", "key_phrase": "news, Senate Russia hearings", "slot_type": "(news_type, news), (news_topic, Senate Russia hearings)", "pred_lf": "[IN:question_news [SL:news_type news] [SL:news_topic Senate Russia hearings]]", "gold_lf": "[IN:GET_STORIES_NEWS [SL:NEWS_TYPE news ] [SL:NEWS_TOPIC Senate Russia hearings ] ]"}
{"utterance": "Is there lightning reported in the current thunderstorm?", "intent": "get_weather", "AMR Graph": "(c / current\n  :location-of (t / thunderstorm\n                  :report (l / lightning)))", "key_phrase": "lightning, reported, current thunderstorm", "slot_type": "weather_attribute, lightning\nmethod_retrieval_reminder, reported\nlocation, current thunderstorm", "pred_lf": "[IN:get_weather [SL:weather_attribute lightning] [SL:method_retrieval_reminder reported] [SL:location current thunderstorm]]", "gold_lf": "[IN:GET_WEATHER [SL:WEATHER_ATTRIBUTE lightning ] [SL:WEATHER_ATTRIBUTE thunderstorm ] ]"}
{"utterance": "Ask Ryan if he wants to go to an FSU football game this fall.", "intent": "None of the intents listed in the vocabulary are suitable for this sentence, as it does not involve any specific action for the AI to perform.", "AMR Graph": "(c / ask-01\n      :ARG0 (p / person :name \"Ryan\")\n      :ARG1 (w / want-01\n            :ARG0 p\n            :ARG1 (g / go-01\n                  :ARG0 p\n                  :ARG1 (f / football-game\n                        :mod (t / temporal-quantity :unit \"season\"\n                                                      :quant 1\n                                                      :quant-type \"approximate\"\n                                                      :value 1)\n                        :ARG1 (l / location :name \"FSU\")))))", "key_phrase": "Ryan, wants to go, FSU football game, fall", "slot_type": "(contact, Ryan), (todo, wants to go), (title_event, FSU football game), (date_time, fall)", "pred_lf": "[IN:ask_about [SL:contact Ryan] [SL:todo wants to go] [SL:title_event FSU football game] [SL:date_time fall]]", "gold_lf": "[IN:SEND_MESSAGE [SL:RECIPIENT Ryan ] [SL:CONTENT_EXACT he wants to go to an FSU football game this fall ] ]"}
{"utterance": "Cancel my reminder for juice.", "intent": "delete_reminder", "AMR Graph": "(c / cancel\n    :ARG0 (i / i)\n    :ARG1 (r / reminder\n            :mod (f / for\n                    :mod (j / juice))))", "key_phrase": "reminder, cancel, juice", "slot_type": "(todo, reminder), (method_retrieval_reminder, cancel), (recipes_dish, juice)", "pred_lf": "[IN:delete_reminder [SL:todo reminder] [SL:method_retrieval_reminder cancel] [SL:recipes_dish juice]]", "gold_lf": "[IN:DELETE_REMINDER [SL:PERSON_REMINDED my ] [SL:TODO juice ] ]"}
{"utterance": "how to make pancakes from scratch", "intent": "get_info_recipes", "AMR Graph": "(c / cook-01\n      :purpose (p / pancake\n                  :mod (s / scratch)\n                  :prep-from (n / nothing)))", "key_phrase": "make pancakes, from scratch", "slot_type": "recipes_dish, make pancakes\nrecipes_cooking_method, from scratch", "pred_lf": "[IN:get_info_recipes [SL:recipes_dish make pancakes] [SL:recipes_cooking_method from scratch]]", "gold_lf": "[IN:GET_RECIPES [SL:RECIPES_DISH pancakes ] [SL:RECIPES_COOKING_METHOD from scratch ] ]"}
{"utterance": "delete the wedding reminder for sunday", "intent": "delete_reminder", "AMR Graph": "(d / delete-01\n   :ARG0 (you)\n   :ARG1 (r / reminder\n            :topic (w / wedding)\n            :time (s / sunday)))", "key_phrase": "wedding reminder, Sunday", "slot_type": "(todo, wedding reminder), (date_time, Sunday)", "pred_lf": "[IN: delete_reminder [SL: todo wedding reminder] [SL: date_time Sunday]]", "gold_lf": "[IN:DELETE_REMINDER [SL:TODO wedding ] [SL:DATE_TIME for sunday ] ]"}
{"utterance": "show me who is available please", "intent": "get_availability", "AMR Graph": "(c / command\n    :subject (p / person :quantifier (a / any))\n    :action (s / show\n        :object (a2 / available-entity :quantifier (a3 / any)))\n    :modal (r / polite-request))", "key_phrase": "show me, available, please", "slot_type": "(none, show me), (group, available), (none, please)", "pred_lf": "[IN:get_availability [SL:none show me] [SL:group available] [SL:none please]]", "gold_lf": "[IN:GET_AVAILABILITY ]"}
{"utterance": "Turn on the radio please", "intent": "play_music", "AMR Graph": "(Top / request-event\n     :ARG0 (You)\n     :ARG1 (radio)\n     :ARGM-MNR (on))\n     \n(Note: In the Neo-Davidsonian format, the predicate is represented as a top-level node indicating the event and its arguments are represented under it as role-value pairs.)", "key_phrase": "Turn on, radio, please.", "slot_type": "(None, Turn on), (music_radio_id, radio), (None, please)", "pred_lf": "[IN:play_music [SL:action Turn on] [SL:device music_radio_id radio] [SL:request None please]]", "gold_lf": "[IN:PLAY_MUSIC [SL:MUSIC_TYPE radio ] ]"}
{"utterance": "let's start recording a video message for Nobuko Falconeri", "intent": "create_message", "AMR Graph": "(e / establish-01\n      :ARG0 (w / we)\n      :ARG1 (m / message\n            :mode video)\n      :ARG2 (p / person\n            :name (n / name\n                  :op1 \"Nobuko\"\n                  :op2 \"Falconeri\")))", "key_phrase": "start recording, video message, Nobuko Falconeri", "slot_type": "(method_timer, start recording), (type_content, video message), (contact, Nobuko Falconeri)", "pred_lf": "[IN:create_message [SL:method_timer start recording] [SL:type_content video message] [SL:contact Nobuko Falconeri]]", "gold_lf": "[IN:SEND_MESSAGE [SL:TYPE_CONTENT video ] [SL:RECIPIENT Nobuko Falconeri ] ]"}
{"utterance": "Play Eminem's newest hit", "intent": "play_music", "AMR Graph": "(c / command \n      :ARG1 (p / play \n                   :ARG2 (s / song \n                               :name \"newest hit\" \n                               :artist (a / eminem))))", "key_phrase": "Play, Eminem's newest hit, newest hit, Eminem", "slot_type": "(music_artist_name, Eminem), (music_track_title, newest hit)", "pred_lf": "[IN:play_music [SL:music_artist_name Eminem] [SL:music_track_title newest hit]]", "gold_lf": "[IN:PLAY_MUSIC [SL:MUSIC_ARTIST_NAME Eminem ] [SL:MUSIC_TYPE hit ] ]"}
{"utterance": "Message Riley to say I am going to be late", "intent": "send_message", "AMR Graph": "(c / communicate-01\n    :arg0 (y / you)\n    :recipient (r / Riley)\n    :medium (t / text)\n    :message (l / say\n                :arg0 y\n                :arg1 (l2 / be-late-01)))", "key_phrase": "Message Riley, I am going to be late", "slot_type": "(todo, Message Riley), (O, I am going to be late)", "pred_lf": "[IN: send_message [SL: todo Message Riley] [SL: O I am going to be late]]", "gold_lf": "[IN:SEND_MESSAGE [SL:RECIPIENT Riley ] [SL:CONTENT_EXACT I am going to be late ] ]"}
{"utterance": "What's happening in Dallas", "intent": "question_news", "AMR Graph": "(n / happen-01 \n   :ARG1 (c / city\n             :name \"Dallas\"))", "key_phrase": "Dallas, happening", "slot_type": "(location, Dallas), (O, happening)", "pred_lf": "[IN:question_news [SL:location Dallas] [SL:O happening]]", "gold_lf": "[IN:GET_EVENT [SL:LOCATION Dallas ] ]"}
{"utterance": "Update reminder for today's staff meeting from 1 pm to 2 pm.", "intent": "update_reminder_date_time", "AMR Graph": "update\n :topic staff meeting\n :time (and\n         :op1 1 pm\n         :op2 2 pm)", "key_phrase": "Update reminder, staff meeting, today's, 1 pm, 2 pm.", "slot_type": "(todo, Update reminder), (title_event, staff meeting), (date_time, today's), (date_time, 1 pm), (date_time, 2 pm)", "pred_lf": "[IN:update_reminder_date_time [SL:todo Update reminder] [SL:title_event staff meeting] [SL:date_time today's] [SL:date_time 1 pm] [SL:date_time 2 pm]]", "gold_lf": "[IN:UPDATE_REMINDER_DATE_TIME [SL:TODO today 's staff meeting ] [SL:DATE_TIME 1 pm ] [SL:DATE_TIME 2 pm ] ]"}
{"utterance": "Remind me to get tacos for dinner", "intent": "create_reminder", "AMR Graph": "(c / remind-01 \n     :ARG0 (m / me) \n     :ARG1 (g / get-01 \n               :ARG0 m \n               :ARG1 (t / taco \n                         :quant 1 \n                         :mod (f / for \n                                :time (d / dinner)))))", "key_phrase": "me, get tacos, dinner", "slot_type": "(user_attendee_event, me), (todo, get tacos), (recipes_meal, dinner)", "pred_lf": "[IN:create_reminder [SL:user_attendee_event me] [SL:todo get tacos] [SL:recipes_meal dinner]]", "gold_lf": "[IN:CREATE_REMINDER [SL:PERSON_REMINDED me ] [SL:TODO get tacos for dinner ] ]"}
{"utterance": "Start the timer at 8:30", "intent": "create_timer", "AMR Graph": "(a / act-01\n      :polarity +\n      :ARG0 (t / timer\n            :quant 1\n            :mod (s / start))\n      :ARG1 (t2 / time-point\n            :time \"8:30\"\n            :mod (a2 / amr-unknown)))", "key_phrase": "timer, start, time-point, 8:30", "slot_type": "(method_timer, timer), (O, start), (date_time, time-point), (date_time, 8:30)", "pred_lf": "[IN:create_timer [SL:method_timer timer] [SL:O start] [SL:date_time time-point 8:30]]", "gold_lf": "[IN:CREATE_TIMER [SL:METHOD_TIMER timer ] [SL:DATE_TIME at 8 : 30 ] ]"}
{"utterance": "How many calories are in a Big Mac from McDonald's", "intent": "get_info_recipes", "AMR Graph": "(c / calorie\n   :quant 1\n   :mod (m / many)\n   :in (b / Big_Mac\n         :mod (f / from\n                :name \"McDonald's\")))", "key_phrase": "calories, Big Mac, McDonald's", "slot_type": "(recipes_unit_nutrition, calories), (recipes_dish, Big Mac), (recipes_source, McDonald's)", "pred_lf": "[IN:get_info_recipes [SL:recipes_unit_nutrition calories] [SL:recipes_dish Big Mac] [SL:recipes_source McDonald's]]", "gold_lf": "[IN:GET_INFO_RECIPES [SL:RECIPES_UNIT_NUTRITION calories ] [SL:RECIPES_DISH Big Mac ] ]"}
{"utterance": "What is the correct temperature for medium rare steak", "intent": "There is no matching intent type in the given vocabulary for this sentence.", "AMR Graph": "(d / do-what\n      :ARG0 (w / what)\n      :ARG1 (q / quantify\n              :ARG1 (s / steak\n                      :mod (m / medium)\n                      :mod (r / rare))\n              :ARG2 (t / temperature)\n              :polarity -)))\nNote: This is one possible AMR graph representation for the sentence. There can be multiple valid and correct AMR graphs for a given sentence.", "key_phrase": "correct temperature, medium rare steak", "slot_type": "(weather_temperature_unit, correct temperature), (recipes_meal, medium rare steak)", "pred_lf": "[IN:ask] [SL:weather_temperature_unit correct temperature] [SL:recipes_meal medium rare steak]", "gold_lf": "[IN:GET_INFO_RECIPES [SL:RECIPES_ATTRIBUTE temperature ] [SL:RECIPES_ATTRIBUTE medium rare ] [SL:RECIPES_DISH steak ] ]"}
{"utterance": "where does ali live?", "intent": "get_location", "AMR Graph": "(c / inquire-01\n     :ARG0 (p / person :name \"Ali\")\n     :ARG1 (l / locate-01\n             :ARG0 p))", "key_phrase": "Ali, live", "slot_type": "(person_reminded, Ali), (location, live)", "pred_lf": "[IN:get_location [SL:person_reminded Ali] [SL:location live]]", "gold_lf": "[IN:GET_LOCATION [SL:CONTACT ali ] ]"}
{"utterance": "make a call to Xander Brown's mom", "intent": "create_call", "AMR Graph": "(c / call-01\n    :agent (i / i)\n    :patient (m / mom\n                :name (n / name\n                        :op1 \"Xander Brown\")))", "key_phrase": "make a call, Xander Brown's mom, call to Xander Brown's mom", "slot_type": "(type_contact, Xander Brown's mom), (method_recipes, make a call)", "pred_lf": "[IN:create_call [SL:type_contact Xander Brown's mom] [SL:method_recipes make a call]]", "gold_lf": "[IN:CREATE_CALL [SL:CONTACT Xander Brown 's mom ] ]"}
{"utterance": "remind me about dinner tonight at 5", "intent": "create_reminder", "AMR Graph": "(c / remind-01\n        :ARG0 (p / pronoun :value \"me\")\n        :ARG1 (e / event\n                :time (a / interval\n                        :from (d / date-entity :specifier \"tonight\")\n                        :to (d2 / date-entity :specifier \"tonight\"))\n                :instance-of (m / meal :op1 \"dinner\"))\n        :ARG2 (t / time-entity :value \"5\"))", "key_phrase": "remind me, dinner tonight, 5", "slot_type": "(type_relation, remind me), (recipes_meal, dinner tonight), (date_time, 5)", "pred_lf": "[IN:create_reminder [SL:type_relation remind me] [SL:recipes_meal dinner tonight] [SL:date_time 5]]", "gold_lf": "[IN:CREATE_REMINDER [SL:PERSON_REMINDED me ] [SL:TODO dinner ] [SL:DATE_TIME tonight at 5 ] ]"}
{"utterance": "Find me a recipe for curry chicken", "intent": "get_info_recipes", "AMR Graph": "(c / curry-recipe \n      :food (c2 / chicken) \n      :purpose (f / find) \n      :role-of f :consumer (p / person))", "key_phrase": "recipe for curry chicken, find, me", "slot_type": "(recipes_dish, curry chicken), (recipes_type, recipe), (method_retrieval_reminder, find), (O, me)", "pred_lf": "[IN:get_info_recipes [SL:recipes_dish curry chicken] [SL:recipes_type recipe] [SL:method_retrieval_reminder find] [SL:O me]]", "gold_lf": "[IN:GET_RECIPES [SL:RECIPES_DISH curry chicken ] ]"}
{"utterance": "theater events in los angeles this week", "intent": "get_event", "AMR Graph": "(event\n      :ARG1 (theatrical-event\n                  :name \"this week\"\n                  :ARG1 (in-city\n                               :location (city :name \"los angeles\"))))", "key_phrase": "theater events, los angeles, this week", "slot_type": "(group, theater events), (location, los angeles), (date_time, this week)", "pred_lf": "[IN:get_event [SL:group theater events] [SL:location los angeles] [SL:date_time this week]]", "gold_lf": "[IN:GET_EVENT [SL:CATEGORY_EVENT theater ] [SL:LOCATION los angeles ] [SL:DATE_TIME this week ] ]"}
{"utterance": "What do I need to make a chicken noodle soup", "intent": "get_info_recipes", "AMR Graph": "(c / chicken-noodle-soup\n      :need (m / make\n               :ARG0 (i / I)))", "key_phrase": "I, make, chicken noodle soup", "slot_type": "(O, I), (recipes_dish, chicken noodle soup), (method_recipes, make)", "pred_lf": "[IN:get_info_recipes [SL:recipes_dish chicken noodle soup] [SL:method_recipes make]]", "gold_lf": "[IN:GET_INFO_RECIPES [SL:RECIPES_DISH chicken noodle soup ] ]"}
{"utterance": "What is the temperature in London?", "intent": "get_weather", "AMR Graph": "(lambda ()\n  (name \"temperature\")\n  (ARG0 (lambda ()\n          (name \"what\")))\n  (ARG1 (lambda ()\n          (name \"in\")\n          (ARG0 (lambda ()\n                  (name \"London\")))))))", "key_phrase": "temperature, London", "slot_type": "(weather_temperature_unit, temperature), (location, London)", "pred_lf": "[IN:get_weather [SL:weather_temperature_unit temperature] [SL:location London]]", "gold_lf": "[IN:GET_WEATHER [SL:LOCATION London ] ]"}
{"utterance": "Play a bunch of songs from musicals, please.", "intent": "play_music", "AMR Graph": "(play\n     :ARG0 (you)\n     :ARG1 (bunch\n               :of (song\n                        :mod (musical))))\n     :ARGM-IMP (please))", "key_phrase": "Play, bunch of songs, musicals, please.", "slot_type": "(music_type, musicals), (music_radio_id, ), (todo, Play), (O, please), (O, bunch of songs)", "pred_lf": "[IN:play_music [SL:music_type musicals] [SL:todo Play]]", "gold_lf": "[IN:PLAY_MUSIC [SL:MUSIC_TYPE songs ] ]"}
{"utterance": "Have Janie and Kyle Coleman messaged me today", "intent": "get_message_contact", "AMR Graph": "(cq\n   :op1 (have-01\n           :ARG0 (and\n                   :op1 (person :name (name :op1 \"Janie\"))\n                   :op2 (person :name (name :op1 \"Kyle Coleman\"))))\n           :ARG1 (message-01\n                   :ARG0 (person :pronoun \"me\")\n                   :time (today)))", "key_phrase": "Janie and Kyle Coleman, messaged me, today", "slot_type": "attendee, Janie and Kyle Coleman\nmethod_recipes, messaged me\ndate_time, today", "pred_lf": "[IN:get_message_contact [SL:attendee Janie and Kyle Coleman] [SL:method_recipes messaged me] [SL:date_time today]]", "gold_lf": "[IN:GET_MESSAGE [SL:SENDER Janie ] [SL:SENDER Kyle Coleman ] [SL:RECIPIENT me ] [SL:DATE_TIME today ] ]"}
