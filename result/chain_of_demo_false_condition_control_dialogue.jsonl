{"utterance": "call Nicholas and Natasha", "intent": "get_call,create_call,create_reminder\nConfidence scores: 0.7, 0.6, 0.4", "AMR Graph": "(call :operator (get_call) :arguments (Nicholas Natasha))", "key_phrase": "call Nicholas, call Natasha, get call, create call", "slot_type": "(type_contact, Nicholas), (type_contact, Natasha), (method_retrieval_reminder, get call), (method_recipes, create call)", "pred_lf": "[IN:create_call [SL:type_contact Nicholas] [SL:type_contact Natasha]] \nor \n[IN:get_call [SL:method_retrieval_reminder get call] [SL:type_contact Nicholas] [SL:type_contact Natasha]]", "gold_lf": "[IN:CREATE_CALL [SL:CONTACT Nicholas ] [SL:CONTACT Natasha ] ]"}
{"utterance": "Give me the most recent NPR news", "intent": "get_details_news (0.9), question_news (0.5), get_stories_news (0.4)", "AMR Graph": "(get_details_news\n   :subject (you)\n   :object (NPR_news)\n   :superlative (recent)\n)", "key_phrase": "Give me, most recent, NPR news", "slot_type": "(O, Give me), (news_type, NPR news), (ordinal, most recent)", "pred_lf": "[IN:get_details_news [SL:O Give me] [SL:news_type NPR news] [SL:ordinal most recent]]", "gold_lf": "[IN:GET_STORIES_NEWS [SL:DATE_TIME the most recent ] [SL:NEWS_SOURCE NPR ] [SL:NEWS_TYPE news ] ]"}
{"utterance": "What's the work address with zipcode where James work?", "intent": "get_location, get_contact, get_details_news\nConfidence scores: 0.8, 0.6, 0.5", "AMR Graph": "(get_location\n      :entity (person\n                :name \"James\")\n      :place-of-work (place\n                      :address (address\n                                :street (name \"unknown address\")\n                                :zipcode (code \"unknown zipcode\")))))", "key_phrase": "work address, zipcode, James, place-of-work", "slot_type": "(location, work address), (location, zipcode), (contact_related, James), (attribute_event, place-of-work)", "pred_lf": "[IN:get_location [SL:attribute_event place-of-work] [SL:contact_related James] [SL:location work address] [SL:location zipcode]]", "gold_lf": "[IN:GET_LOCATION [SL:CONTACT James ] ]"}
{"utterance": "ring my brother", "intent": "get_call,create_call,cancel_call\nConfidence scores: 0.8,0.1,0.09", "AMR Graph": "(get_call \n      :ARG0 (I)\n      :ARG1 (brother \n                 :ARG0-of (call \n                                  :mode imperative)))", "key_phrase": "ring, brother, call, imperative mode", "slot_type": "(todo, ring), (contact, brother), (type_relation, call), (O, imperative mode)", "pred_lf": "[IN: create_call [SL: todo ring] [SL: contact brother] [SL: type_relation call]]", "gold_lf": "[IN:CREATE_CALL [SL:CONTACT my brother ] ]"}
{"utterance": "set a timer for my workout right now", "intent": "create_timer (0.8), add_time_timer (0.7), update_timer (0.6)", "AMR Graph": "(set :topic (timer :purpose (workout) :time (now)))", "key_phrase": "set a timer, workout, right now", "slot_type": "(method_timer, set a timer), (todo, workout), (O, right now)", "pred_lf": "[IN:create_timer [SL:method_timer set a timer] [SL:todo workout] [SL:O right now]]", "gold_lf": "[IN:CREATE_TIMER [SL:METHOD_TIMER timer ] [SL:TIMER_NAME workout ] ]"}
{"utterance": "call Camilla whatsapp video", "intent": "get_call,create_call,play_media\nConfidence scores: 0.6, 0.3, 0.1", "AMR Graph": "(c / call-01\n    :object (c2 / whatsapp)\n    :medium (v / video)\n    :callee (p / person :name \"Camilla\")\n    :intent get_call)", "key_phrase": "call Camilla, whatsapp video", "slot_type": "(phone_number, call Camilla), (content_exact, whatsapp video)", "pred_lf": "[IN:get_call [SL:phone_number call Camilla] [SL:content_exact whatsapp video]]", "gold_lf": "[IN:CREATE_CALL [SL:CONTACT Camilla ] [SL:NAME_APP whatsapp ] ]"}
{"utterance": "call Avery M", "intent": "get_call,create_call,merge_call\nConfidence scores: \n0.8, 0.7, 0.6", "AMR Graph": "(get-call\n\t:call (Avery-M))", "key_phrase": "Avery M, call", "slot_type": "(contact_related, Avery M), (type_content, call)", "pred_lf": "[IN:get_call [SL:type_content call] [SL:contact_related Avery M]]", "gold_lf": "[IN:CREATE_CALL [SL:CONTACT Avery M ] ]"}
{"utterance": "what is the next alarm for", "intent": "get_alarm, get_reminder, get_timer\nConfidence scores: 0.9, 0.8, 0.7", "AMR Graph": "(get_alarm\n   :what (next)\n   :entity (alarm))", "key_phrase": "next alarm, get alarm, upcoming alarm, alarm reminder", "slot_type": "(alarm_name, next alarm), (get_alarm, get alarm), (get_alarm, upcoming alarm), (get_reminder, alarm reminder)", "pred_lf": "[IN:get_alarm [SL:alarm_name next alarm] [SL:get_alarm get alarm] [SL:get_alarm upcoming alarm]] [IN:get_reminder [SL:alarm_name alarm reminder]] [IN:get_timer]", "gold_lf": "[IN:GET_ALARM [SL:ORDINAL next ] ]"}
{"utterance": "Recommend me some Broadway shows in Anchorage for Thursday night", "intent": "get_event, get_location, get_date_time_event\nConfidence scores: 0.9, 0.8, 0.7", "AMR Graph": "(get_event\n    :event (recommend\n            :agent (I)\n            :theme (shows\n                    :kind (Broadway)\n                    :location (Anchorage))\n            :time (Thursday night)))", "key_phrase": "Broadway shows, Anchorage, Thursday night", "slot_type": "(title_event, Broadway shows), (location, Anchorage), (date_time, Thursday night)", "pred_lf": "[IN:get_event [SL:title_event Broadway shows] [SL:location Anchorage] [SL:date_time Thursday night]]", "gold_lf": "[IN:GET_EVENT [SL:CATEGORY_EVENT Broadway shows ] [SL:LOCATION Anchorage ] [SL:DATE_TIME for Thursday night ] ]"}
{"utterance": "What's news about facebook this week", "intent": "get_details_news,question_news,get_info_recipes\nConfidence scores: \n0.85,0.8,0.6", "AMR Graph": "(get_details_news\n      :topic (facebook)\n      :time (week))", "key_phrase": "news, facebook, this week", "slot_type": "(news_topic, news), (news_reference, facebook), (date_time, this week)", "pred_lf": "[IN:get_details_news [SL:news_topic news] [SL:news_reference facebook] [SL:date_time this week]]", "gold_lf": "[IN:GET_STORIES_NEWS [SL:NEWS_TYPE news ] [SL:NEWS_TOPIC facebook ] [SL:DATE_TIME this week ] ]"}
{"utterance": "can you set a warning alarm for 7pm", "intent": "create_alarm,update_alarm,create_reminder,update_reminder,help_reminder\nConfidence scores: \n0.9,0.8,0.7,0.6,0.5", "AMR Graph": "(c / create_alarm\n    :time (t / time\n            :hour 7\n            :minute 0\n            :meridiem \"PM\"\n        )\n)", "key_phrase": "set warning alarm, 7pm", "slot_type": "(alarm_name, warning alarm), (date_time, 7pm)", "pred_lf": "[IN:create_alarm [SL:alarm_name warning alarm] [SL:date_time 7pm]]", "gold_lf": "[IN:CREATE_ALARM [SL:ALARM_NAME warning ] [SL:DATE_TIME for 7 pm ] ]"}
{"utterance": "Tell me about events going on in Crandon this weekend", "intent": "get_event, get_location, get_date_time_event \nConfidence scores: 0.8, 0.7, 0.6", "AMR Graph": "(get_event\n     :event (existential_q\n               :op1 (event\n                       :event_quant (count_q\n                                      :quant 2)\n                       :ARG0 (individual\n                                :name \"Crandon\")\n                       :ARG1-of (go-on-v\n                                   :ARG0 (pronoun\n                                            :pers 2\n                                            :num singular))\n                       :time (temporal-quantity\n                                :quant 1\n                                :unit \"weekend\")))))", "key_phrase": "Crandon, events, weekend.", "slot_type": "(location, Crandon), (title_event, events), (date_time, weekend)", "pred_lf": "[IN:get_event [SL:title_event events] [SL:location Crandon] [SL:date_time weekend]]", "gold_lf": "[IN:GET_EVENT [SL:LOCATION Crandon ] [SL:DATE_TIME this weekend ] ]"}
{"utterance": "make one timer for four minutes and another for 10 minutes", "intent": "create_timer,add_time_timer,create_reminder\nConfidence scores: 0.95, 0.9, 0.85", "AMR Graph": "(create_timer\n      :arg1 (and\n                (timer :quant 1)\n                (time :quant 4 :unit (minute)))\n      :arg2 (and\n                (timer :quant 1)\n                (time :quant 10 :unit (minute)))))", "key_phrase": "make timer, four minutes, another, 10 minutes", "slot_type": "(method_timer, make timer), (amount, four minutes), (method_timer, another), (amount, 10 minutes)", "pred_lf": "[IN:create_timer [SL:method_timer make timer] [SL:amount four minutes]] [IN:add_time_timer [SL:method_timer another] [SL:amount 10 minutes]]", "gold_lf": "[IN:CREATE_TIMER [SL:AMOUNT one ] [SL:METHOD_TIMER timer ] [SL:DATE_TIME for four minutes ] [SL:DATE_TIME for 10 minutes ] ]"}
{"utterance": "How do I prepare spaghetti", "intent": "get_info_recipes,0.8,get_recipes,0.75,question_news,0.6", "AMR Graph": "(c / how\n      :intent (g / get_info_recipes)\n      :arg1 (i / prepare\n            :arg0 (s / spaghetti)))", "key_phrase": "prepare spaghetti, get recipes", "slot_type": "recipes_cuisine, spaghetti\nrecipes_type, recipes", "pred_lf": "[IN:get_info_recipes [SL:recipes_type recipes] [SL:recipes_cuisine spaghetti]]", "gold_lf": "[IN:GET_RECIPES [SL:RECIPES_DISH spaghetti ] ]"}
{"utterance": "mark me as not going to Olympic Peninsula Apple and Cider Festival", "intent": "get_event,update_method_call,help_reminder\nConfidence Scores: 0.8, 0.6, 0.4", "AMR Graph": "(ADD\n  :arg1 (PERSON :name \"Mark\")\n  :arg2 (NEGATION\n          :polarity -\n          :arg (INTEND\n                 :op get_event\n                 :arg1 (EVENT :name \"Olympic Peninsula Apple and Cider Festival\"))))\nExplanation: The speaker (implicit) instructs someone, Mark, to not attend the Olympic Peninsula Apple and Cider Festival. The intent type with the highest confidence score, get_event, suggests this is a command for Mark to change his plans regarding the event.", "key_phrase": "Mark, not going, Olympic Peninsula Apple and Cider Festival", "slot_type": "Todo, Mark\nuser_attendee_event, Olympic Peninsula Apple and Cider Festival", "pred_lf": "[IN:update_method_call [SL:Todo Mark] [SL:user_attendee_event Olympic Peninsula Apple and Cider Festival]]", "gold_lf": "[IN:SET_RSVP_NO [SL:TITLE_EVENT Olympic Peninsula Apple and Cider Festival ] ]"}
{"utterance": "tell mark to pick up our to go order from olive garden", "intent": "get_message_contact, get_message, get_contact\nConfidence scores: 0.9, 0.7, 0.6", "AMR Graph": "(get_message_contact\n      :message (get_message\n                     :command (tell\n                                   :subject (you)\n                                   :object (get_contact\n                                                 :name (mark))))\n                     :details (get_contact\n                                      :name (olive garden)\n                                      :order (to go))))", "key_phrase": "tell Mark, pick up, to go order, Olive Garden", "slot_type": "O, tell Mark\nmethod_retrieval_reminder, pick up\nrecipes_dish, to go order\nlocation, Olive Garden", "pred_lf": "[IN:get_message_contact [SL:contact_name tell Mark] [SL:message_type pick up] [SL:restaurant_name Olive Garden] [SL:dish_type to go order]]", "gold_lf": "[IN:SEND_MESSAGE [SL:RECIPIENT mark ] [SL:CONTENT_EXACT pick up our to go order from olive garden ] ]"}
{"utterance": "Set my alarm for 21st of May at 5 am.", "intent": "create_alarm,update_alarm,get_date_time_event\nConfidence score: 0.8, 0.7, 0.6", "AMR Graph": "(c / create_alarm\n    :time (d / datetime-entity\n               :month 5\n               :day 21\n               :hours 5)\n    :task (a / alarm\n              :setting (m / my)\n              :date-time (d2 / datetime-entity\n                              :month 5\n                              :day 21\n                              :hours 5)))", "key_phrase": "set alarm, 21st of May, 5 am, my alarm", "slot_type": "alarm_name, my alarm\ndate_time, 21st of May at 5 am", "pred_lf": "[IN:create_alarm [SL:alarm_name my alarm] [SL:date_time 21st of May at 5am]]", "gold_lf": "[IN:CREATE_ALARM [SL:DATE_TIME for 21st of May at 5 am ] ]"}
{"utterance": "call on whatsapp Zachary Adkins", "intent": "get_call_contact,create_call,get_contact\nConfidence scores: 0.8, 0.5, 0.4", "AMR Graph": "(call :mode whatsapp\n      :callee (person :name \"Zachary Adkins\")\n      :intent get_call_contact)", "key_phrase": "call on whatsapp, Zachary Adkins.", "slot_type": "(contact_method, call on whatsapp), (person_reminded, Zachary Adkins)", "pred_lf": "[IN:get_call_contact [SL:contact_method call on whatsapp] [SL:person_reminded Zachary Adkins]]", "gold_lf": "[IN:CREATE_CALL [SL:NAME_APP whatsapp ] [SL:CONTACT Zachary Adkins ] ]"}
{"utterance": "Is it below 47 in F at New York today", "intent": "get_weather,question_weather, get_location\nNumeric confidence scores: 0.9, 0.8, 0.7", "AMR Graph": "(s / sentence\n      :intent get_weather\n      :confidence 0.9\n      :location-of-weather (l / location\n                             :name \"New York\"\n                             :type city)\n      :temperature (t / temperature\n                    :unit \"F\"\n                    :value (b / below\n                            :number 47)))", "key_phrase": "New York, 47 in F, below", "slot_type": "(location, New York), (weather_temperature_unit, F), (weather_attribute, below)", "pred_lf": "[IN:get_weather [SL:location New York] [SL:weather_temperature_unit F] [SL:weather_attribute below] [SL:weather_value 47]]", "gold_lf": "[IN:GET_WEATHER [SL:WEATHER_ATTRIBUTE below ] [SL:WEATHER_ATTRIBUTE 47 ] [SL:WEATHER_TEMPERATURE_UNIT F ] [SL:LOCATION New York ] [SL:DATE_TIME today ] ]"}
{"utterance": "Did my Mom send me a message this week?", "intent": "get_message_contact, get_message, get_date_time_event\nNumeric confidence scores (in any order): 0.9, 0.8, 0.7", "AMR Graph": "(get_message_contact\n   :message (get_message\n               :recipient (person :possessor (I))\n               :sender (person :name \"Mom\"))\n   :time (time :week))", "key_phrase": "Mom, send, message, this week", "slot_type": "contact_related, Mom\nmethod_recipes, send\ncontent_exact, message\ndate_time_event, this week", "pred_lf": "[IN:get_message_contact [SL:contact_related Mom] [SL:method_recipes send] [SL:content_exact message] [SL:date_time_event this week]]", "gold_lf": "[IN:GET_MESSAGE [SL:SENDER my Mom ] [SL:RECIPIENT me ] [SL:DATE_TIME this week ] ]"}
{"utterance": "What kind of event is Pumpkin Run?", "intent": "get_event, get_details_news, get_category_event\nConfidence score: 0.8, 0.7, 0.6", "AMR Graph": "(get_event\n        :target (pumpkin_run)\n)", "key_phrase": "Pumpkin Run, event", "slot_type": "(title_event, Pumpkin Run), (category_event, event)", "pred_lf": "[IN:get_category_event [SL:title_event Pumpkin Run] [SL:category_event event]]", "gold_lf": "[IN:GET_CATEGORY_EVENT [SL:TITLE_EVENT Pumpkin Run ] ]"}
{"utterance": "reset alarm for 7am on Sunday morning", "intent": "create_alarm (0.9), update_alarm (0.8), delete_alarm (0.7)", "AMR Graph": "(c / create-01\n    :ARG1 (a / alarm\n              :time \"7:00\"\n              :time-format \"AM\"\n              :day-of-week (s / sunday)\n              :part-of-day (m / morning)))", "key_phrase": "reset alarm, 7am, Sunday morning, create alarm", "slot_type": "(alarm_name, alarm), (date_time, Sunday morning at 7am), (method_timer, reset), (todo, create alarm)", "pred_lf": "[IN:create_alarm [SL:alarm_name alarm] [SL:date_time Sunday morning at 7am] [SL:method_timer reset]]", "gold_lf": "[IN:CREATE_ALARM [SL:DATE_TIME for 7 am on Sunday morning ] ]"}
{"utterance": "Find a recipe for jerk chicken", "intent": "get_info_recipes,question_news,get_recipes\nConfidence score: 0.8, 0.7, 0.6", "AMR Graph": "(get_recipe :dish \"jerk chicken\")", "key_phrase": "recipe, jerk chicken", "slot_type": "(recipes_type, recipe), (recipes_dish, jerk chicken)", "pred_lf": "[IN:get_recipes [SL:recipes_type recipe] [SL:recipes_dish jerk chicken]]", "gold_lf": "[IN:GET_RECIPES [SL:RECIPES_DISH jerk chicken ] ]"}
{"utterance": "play destiny's child", "intent": "play_music, 0.9, question_music, 0.6, get_track_info_music, 0.5", "AMR Graph": "(play-event\n\t:agent (music-player :name \"destiny's child\"))", "key_phrase": "play_destiny's child, play_music, music_player", "slot_type": "(music_track_title, destiny's child), (music_type, music), (method_timer, play)", "pred_lf": "[IN:play_music [SL:music_track_title destiny's child] [SL:music_type music] [SL:method_timer play]]", "gold_lf": "[IN:PLAY_MUSIC [SL:MUSIC_ARTIST_NAME destiny 's child ] ]"}
{"utterance": "make an alarm for the 5th", "intent": "create_alarm,create_reminder,get_date_time_event \nConfidence scores: \n0.8,0.75,0.7", "AMR Graph": "(c/create_alarm\n      :time (s/date-entity\n                 :month 0.2\n                 :day 5\n                 :year 0.2)\n      :reminder \"alarm\")", "key_phrase": "make alarm, 5th, create reminder, get date and time event.", "slot_type": "alarm_name, make alarm\nordinal, 5th\nmethod_retrieval_reminder, create reminder\ndate_time, get date and time event", "pred_lf": "[IN:create_alarm [SL:alarm_name make alarm] [SL:ordinal 5th]]", "gold_lf": "[IN:CREATE_ALARM [SL:DATE_TIME for the 5th ] ]"}
{"utterance": "Set an alarm for Monday at 5pm", "intent": "create_alarm,create_reminder,get_date_time_event\nConfidence scores:\n0.9,0.7,0.6", "AMR Graph": "(set\n      :ARG0 (alarm\n                 :type (create_alarm)\n                 :time (date-entity\n                            :weekday (Monday)\n                            :hour 17\n                            :minute 0))\n      :ARG1 (person))", "key_phrase": "set an alarm, Monday at 5pm, create alarm, get date time event", "slot_type": "N/A, set an alarm\ndate_time, Monday at 5pm\nalarm_name, create alarm\ndate_time_event, get date time event", "pred_lf": "[IN:create_alarm [SL:alarm_name create alarm] [SL:date_time Monday at 5pm]]", "gold_lf": "[IN:CREATE_ALARM [SL:DATE_TIME for Monday at 5 pm ] ]"}
{"utterance": "When did Lisa's employment at Publix finish?", "intent": "get_employment_time, get_contact, get_details_news\nConfidence scores: 0.8, 0.7, 0.6", "AMR Graph": "(d / date-entity \n     :year 2021 \n     :month 10 \n     :day 25 \n     :time \"TBD\"\n ) \n (f / finish-01 \n     :ARG0 (e / employment \n                :employee (p / person :name \"Lisa\") \n                :employer (c / company :name \"Publix\")\n           )\n     :time (d / date-entity \n                :op1 \"when\"\n           )\n )", "key_phrase": "Lisa's employment at Publix, finish, when", "slot_type": "(job, Lisa's employment at Publix), (O, finish), (date_time, when)", "pred_lf": "[IN:get_employment_time [SL:job Lisa's employment at Publix] [SL:date_time when]]", "gold_lf": "[IN:GET_EMPLOYMENT_TIME [SL:CONTACT Lisa ] [SL:EMPLOYER Publix ] ]"}
{"utterance": "What's Larry's work address?", "intent": "get_location, get_contact, get_info_contact \nConfidence scores: 0.9, 0.8, 0.7", "AMR Graph": "(get_info_contact\n :topic (person :name \"Larry\")\n :type (address :role work))", "key_phrase": "Larry, work address", "slot_type": "(contact, Larry), (location, work address)", "pred_lf": "[IN:get_location [SL:contact Larry] [SL:location work address]]", "gold_lf": "[IN:GET_LOCATION [SL:CONTACT Larry ] ]"}
{"utterance": "Does Rachel live in Avon?", "intent": "get_location,question_misc,get_details_news\nConfidence scores: 0.60,0.30,0.10", "AMR Graph": "(get_location :entity (person :name \"Rachel\") :location (city :name \"Avon\"))", "key_phrase": "Rachel, live, Avon", "slot_type": "(person_reminded, Rachel), (location, Avon)", "pred_lf": "[IN:get_location [SL:person_reminded Rachel] [SL:location Avon]]", "gold_lf": "[IN:GET_LOCATION [SL:CONTACT Rachel ] [SL:LOCATION Avon ] ]"}
{"utterance": "What method of cooking is better", "intent": "get_info_recipes (0.9), question_news (0.6), question_music (0.5)", "AMR Graph": "(d / do-QUERY\n      :query (m / method\n                  :mod (c / cook-01)\n                  :better t))", "key_phrase": "method of cooking, better", "slot_type": "recipes_cooking_method, method of cooking", "pred_lf": "[IN:get_info_recipes [SL:recipes_cooking_method method of cooking]]", "gold_lf": "[IN:GET_INFO_RECIPES ]"}
{"utterance": "what is the weather in New York today?", "intent": "get_weather,question_weather\nConfidence scores: \n0.9,0.8,0.5", "AMR Graph": "(e / entity\n    :type (q / question\n            :intent get_weather)\n    :query-type (w / weather)\n    :location (c / city\n                :name \"New York\")\n    :date (t / today))", "key_phrase": "weather, New York, today, question", "slot_type": "(weather_attribute, weather), (location, New York), (date_time, today), (type_content, question)", "pred_lf": "[IN:get_weather [SL:weather_attribute weather] [SL:location New York] [SL:date_time today] [SL:type_content question]]", "gold_lf": "[IN:GET_WEATHER [SL:LOCATION New York ] [SL:DATE_TIME today ] ]"}
{"utterance": "add camille to call", "intent": "create_call,update_call,get_call_contact\nConfidence scores: 0.7, 0.6, 0.5", "AMR Graph": "(c / create_call\n  :ARG1 (p / person :name \"Camille\")\n  :ARG2 (cl / call))", "key_phrase": "add Camille, call", "slot_type": "(O, add Camille), (type_relation, call)", "pred_lf": "[IN:create_call [SL:type_relation call] [SL:O add Camille]]", "gold_lf": "[IN:UPDATE_CALL [SL:CONTACT_ADDED camille ] ]"}
{"utterance": "How to make gluten free pancakes", "intent": "get_info_recipes, is_true_recipes, question_news\nConfidence scores: 0.90, 0.80, 0.70", "AMR Graph": "(get_recipe :dish (pancakes gluten-free))", "key_phrase": "gluten free, pancakes, make", "slot_type": "recipes_diet, gluten free\nrecipes_dish, pancakes\nrecipes_cooking_method, make", "pred_lf": "[IN:get_info_recipes [SL:recipes_diet gluten free] [SL:recipes_dish pancakes] [SL:recipes_cooking_method make]]", "gold_lf": "[IN:GET_RECIPES [SL:RECIPES_TYPE gluten free ] [SL:RECIPES_DISH pancakes ] ]"}
{"utterance": "Pause the timer.", "intent": "pause_timer,stop_timer,resume_timer\nConfidence scores: 0.9,0.6,0.5", "AMR Graph": "(p / pause\n     :ARG1 (t / timer))", "key_phrase": "pause the timer, timer pause", "slot_type": "(method_timer, pause the timer), (method_timer, timer pause)", "pred_lf": "[IN:pause_timer [SL:method_timer pause the timer] [SL:method_timer timer pause]]", "gold_lf": "[IN:PAUSE_TIMER [SL:METHOD_TIMER timer ] ]"}
{"utterance": "remind rex to set up the meeting time", "intent": "create_reminder,update_reminder_todo,get_info_contact\nConfidence score: 0.8, 0.5, 0.3", "AMR Graph": "(c / remind\n    :agent (p / person :name \"rex\")\n    :topic (s / setup\n            :patient (m / meeting\n                    :time-of-meeting (t / time)))\n    :intent create_reminder)", "key_phrase": "remind, rex, set up, meeting time, create reminder", "slot_type": "(todo, remind), (person_reminded, rex), (method_timer, set up), (title_event, meeting time), (type_relation, create reminder)", "pred_lf": "[IN:create_reminder [SL:todo remind] [SL:person_reminded rex] [SL:method_timer set up] [SL:title_event meeting time] [SL:type_relation create reminder]]", "gold_lf": "[IN:CREATE_REMINDER [SL:PERSON_REMINDED rex ] [SL:TODO set up the meeting time ] ]"}
{"utterance": "Can I wear sandals today?", "intent": "get_weather, question_weather, get_location \nConfidence scores: 0.8, 0.7, 0.6", "AMR Graph": "(get_weather :person (I) :clothing (sandals) :time (today))", "key_phrase": "wear sandals, today", "slot_type": "(location, today), (O, wear sandals)", "pred_lf": "[IN:question_weather [SL:location today] [SL:O wear sandals]]", "gold_lf": "[IN:GET_WEATHER [SL:WEATHER_ATTRIBUTE sandals ] [SL:DATE_TIME today ] ]"}
{"utterance": "Add aunties to current call", "intent": "create_call,add_to_playlist_music,get_contact  \nConfidence scores: 0.7, 0.2, 0.1", "AMR Graph": "(add\n    :op1 (call\n            :location (current))\n    :op2 (contact\n            :role (aunt)))\nIntended Type: create_call\nIntended Confidence Score: 0.7", "key_phrase": "add aunties, current call, contact role", "slot_type": "(contact_related, aunties), (O, current call), (type_relation, contact role)", "pred_lf": "[IN: create_call [SL: contact_related aunties] [SL: O current call] [SL: type_relation contact role]]", "gold_lf": "[IN:UPDATE_CALL [SL:CONTACT_ADDED aunties ] ]"}
{"utterance": "where will american federal aid be sent to", "intent": "get_location,question_news,get_details_news\nConfidence scores: 0.8,0.7,0.6", "AMR Graph": "(get_details_news\n      :query (get-location\n                :object \"american federal aid\"))", "key_phrase": "American federal aid, be sent, get location", "slot_type": "(None, American federal aid), (None, be sent), (location, get location)", "pred_lf": "[IN: get_location [SL: None American federal aid] [SL: None be sent] [SL: location get location]]", "gold_lf": "[IN:QUESTION_NEWS [SL:NEWS_TOPIC where will american federal aid be sent to ] ]"}
{"utterance": "get me messages from Angela", "intent": "get_message, get_message_contact, get_info_contact\nConfidence scores: 0.8, 0.6, 0.4", "AMR Graph": "(get_message\n\t:requester (I)\n\t:message_type \"messages\"\n\t:sender (Angela))", "key_phrase": "messages, Angela, get me, get_message_contact", "slot_type": "(todo, messages), (contact_related, Angela), (method_retrieval_reminder, get me), (type_relation, get_message_contact)", "pred_lf": "[IN:get_message_contact [SL:todo messages] [SL:contact_related Angela] [SL:method_retrieval_reminder get me]]", "gold_lf": "[IN:GET_MESSAGE [SL:SENDER Angela ] ]"}
{"utterance": "Temperature this weekend new york fahrenheit", "intent": "get_weather,question_news,get_location\nConfidence scores: 0.9, 0.6, 0.5", "AMR Graph": "(get_weather\n    :location (city :name \"New York\")\n    :unit \"Fahrenheit\"\n    :time (weekend))", "key_phrase": "Temperature, this weekend, New York, Fahrenheit", "slot_type": "(weather_temperature_unit, Temperature), (location, New York), (weather_temperature_unit, Fahrenheit)", "pred_lf": "[IN:get_weather [SL:weather_temperature_unit Temperature] [SL:location New York] [SL:weather_temperature_unit Fahrenheit]]", "gold_lf": "[IN:GET_WEATHER [SL:DATE_TIME this weekend ] [SL:LOCATION new york ] [SL:WEATHER_TEMPERATURE_UNIT fahrenheit ] ]"}
{"utterance": "How many kids got arrested", "intent": "get_details_news,question_news, get_info_contact\nConfidence scores: 0.8, 0.7, 0.5", "AMR Graph": "(get_details_news\n     :topic (arrest\n                :quant  (number\n                             :op \"many\")\n                :arg0 (kid)))", "key_phrase": "kids, arrested, how many", "slot_type": "(ordinal, how many), (O, kids), (job, arrested)", "pred_lf": "[IN:get_details_news [SL:ordinal how many] [SL:O kids] [SL:job arrested]]", "gold_lf": "[IN:QUESTION_NEWS [SL:NEWS_TOPIC kids got arrested ] ]"}
{"utterance": "Show new messages", "intent": "get_message,question_news,get_info_contact\nConfidence scores: 0.8,0.7,0.4", "AMR Graph": "(get_message\n      :intent get_message\n      :confidence 0.8\n      :subject (you))\n      \nNote: The AMR graph corresponds to the most likely intent, based on the confidence score provided.", "key_phrase": "Show, new messages", "slot_type": "(O, Show), (O, new messages)", "pred_lf": "[IN:get_message [SL:O Show] [SL:O new messages]]", "gold_lf": "[IN:GET_MESSAGE ]"}
{"utterance": "Remind me to take dinner to Lori on Friday.", "intent": "create_reminder (0.8), get_reminder_todo (0.7), get_reminder_date_time (0.6)", "AMR Graph": "(c / remind \n      :agent (s / speaker)\n      :action (r / create-reminder\n                   :object (t / todo \n                                  :name \"take dinner to Lori\"\n                                  :date \"Friday\")))", "key_phrase": "Remind me, take dinner, Lori, Friday, create reminder, get reminder todo, get reminder date time", "slot_type": "method_retrieval_reminder, Remind me\ntodo, take dinner\nperson_reminded, Lori\ndate_time, Friday\ntype_relation, create reminder\ntype_relation, get reminder todo\ntype_relation, get reminder date time", "pred_lf": "[IN:create_reminder [SL:method_retrieval_reminder Remind me] [SL:todo take dinner] [SL:person_reminded Lori] [SL:date_time Friday]]", "gold_lf": "[IN:CREATE_REMINDER [SL:PERSON_REMINDED me ] [SL:TODO take dinner to Lori ] [SL:DATE_TIME on Friday ] ]"}
{"utterance": "Show my spa reminders with my mom next month.", "intent": "get_reminder,question_news, get_contact \nNumeric confidence scores: 0.65, 0.5, 0.4", "AMR Graph": "(get_reminder \n  :event (show \n           :object (spa-reminders \n                     :person (me)\n                     :time (next-month))\n           :with (my-mom)))", "key_phrase": "spa reminders, me, next month, my mom", "slot_type": "(todo, spa reminders), (user_attendee_event, me), (date_time, next month), (attendee, my mom)", "pred_lf": "[IN:get_reminder [SL:todo spa reminders] [SL:user_attendee_event me] [SL:date_time next month] [SL:attendee my mom]]", "gold_lf": "[IN:GET_REMINDER [SL:METHOD_RETRIEVAL_REMINDER Show ] [SL:PERSON_REMINDED my ] [SL:TODO spa ] [SL:TODO with my mom ] [SL:DATE_TIME next month ] ]"}
{"utterance": "Michigan crime reports", "intent": "get_details_news,question_news,get_stories_news\nConfidence scores: 0.8,0.6,0.5", "AMR Graph": "(get_details_news\n     :topic (crime-report\n                 :location (state :name \"Michigan\")))", "key_phrase": "Michigan, crime reports", "slot_type": "(location, Michigan), (news_topic, crime reports)", "pred_lf": "[IN:get_details_news [SL:location Michigan] [SL:news_topic crime reports]]", "gold_lf": "[IN:GET_STORIES_NEWS [SL:NEWS_TOPIC Michigan crime ] [SL:NEWS_TYPE reports ] ]"}
{"utterance": "What's the biggest story today?", "intent": "get_details_news,question_news,get_stories_news\nConfidence scores: 0.85, 0.8, 0.75", "AMR Graph": "(get_event\n      :time (most-recent\n              :time \"today\")\n      :topic (story\n              :size (largest)))\n              \nExplanation: The sentence is asking for the biggest story (largest story) that occurred today (most recent time). The intention of the question is to get news details, so the verb \"get\" is not explicitly included in the graph but is implied by the question.", "key_phrase": "biggest story, today.", "slot_type": "(ordinal, biggest story), (date_time, today)", "pred_lf": "[IN:get_details_news [SL:ordinal biggest story] [SL:date_time today]]", "gold_lf": "[IN:GET_STORIES_NEWS [SL:NEWS_REFERENCE biggest ] [SL:NEWS_TYPE story ] [SL:DATE_TIME today ] ]"}
{"utterance": "please record a video message for Gina and Sparks", "intent": "create_message,create_video,create_recording - 0.85, 0.8, 0.75", "AMR Graph": "(c / create_video\n      :agent (y / you)\n      :patient (m / message\n                  :content (v / video\n                              :recorder (y)\n                              :recipient (p / person\n                                             :name \"Gina\")\n                              :recipient (p2 / person\n                                             :name \"Sparks\"))))", "key_phrase": "record video message, for Gina and Sparks, please", "slot_type": "(method_recipes, record video message), (user_attendee_event, for Gina and Sparks), (O, please)", "pred_lf": "[IN:create_video [SL:method_recipes record video message] [SL:user_attendee_event for Gina and Sparks] [SL:O please]]", "gold_lf": "[IN:SEND_MESSAGE [SL:TYPE_CONTENT video ] [SL:RECIPIENT Gina ] [SL:RECIPIENT Sparks ] ]"}
{"utterance": "What is the temperature going to be today?", "intent": "get_weather,question_weather,get_details_weather\nConfidence Scores: 0.95, 0.04, 0.01", "AMR Graph": "(get_weather\n      :query (temperature\n                :day (today))))\nNote: The sentence is a question about the weather and the intent type with the highest confidence score is get_weather. Therefore, the AMR graph represents a query asking for the temperature (of the day) as part of a weather forecast.", "key_phrase": "temperature, today", "slot_type": "(weather_temperature_unit, temperature), (date_time, today)", "pred_lf": "[IN:get_weather [SL:weather_temperature_unit temperature] [SL:date_time today]]", "gold_lf": "[IN:GET_WEATHER [SL:DATE_TIME today ] ]"}
{"utterance": "Do you have any reminders for me?", "intent": "get_reminder, get_reminder_amount, get_message_contact\nConfidence scores: 0.4, 0.3, 0.2", "AMR Graph": "(A \n  :intent get_reminder\n  :confidence 0.4 \n  :polarity positive \n  :arg0 (you) \n  :arg1 \n    (remind \n      :mod (any) \n      :arg0 (me)))", "key_phrase": "you, reminders, me", "slot_type": "(O, you), (todo, reminders), (O, me)", "pred_lf": "[IN:get_reminder [SL:todo reminders] [SL:O you] [SL:O me]]", "gold_lf": "[IN:GET_REMINDER [SL:PERSON_REMINDED me ] ]"}
{"utterance": "I have a video message I need sent to my dad.", "intent": "get_message_contact,send_message,get_contact\nConfidence score: 0.8, 0.7, 0.6", "AMR Graph": "(get_message_contact\n    :arg0 (i)\n    :arg1 (video_message\n            :poss (i)\n        )\n    :arg2 (send-01\n            :arg0 i\n            :arg1 (dad\n                    :poss i\n                )\n        )\n)", "key_phrase": "video message, sent, dad", "slot_type": "(type_content, video message), (contact_related, dad), (method_retrieval_reminder, sent)", "pred_lf": "[IN:get_message_contact [SL:type_content video message] [SL:contact_related dad] [SL:method_retrieval_reminder sent]] OR \n[IN:send_message [SL:type_content video message] [SL:contact_related dad] [SL:method_retrieval_reminder sent]] OR \n[IN:get_contact [SL:type_content video message] [SL:contact_related dad] [SL:method_retrieval_reminder sent]]", "gold_lf": "[IN:SEND_MESSAGE [SL:TYPE_CONTENT video ] [SL:RECIPIENT my dad ] ]"}
{"utterance": "Any celebrity news stories?", "intent": "get_stories_news,question_news,get_details_news\nConfidence scores: 0.8, 0.7, 0.6", "AMR Graph": "(s / ask\n      :intent get_stories_news\n      :topic (n / news\n                  :mod (n2 / celebrity)))", "key_phrase": "celebrity news stories", "slot_type": "(news_topic, celebrity news stories)", "pred_lf": "[IN:get_stories_news [SL:news_topic celebrity news stories]]", "gold_lf": "[IN:GET_STORIES_NEWS [SL:NEWS_CATEGORY celebrity ] [SL:NEWS_TYPE news stories ] ]"}
{"utterance": "put up my blink timer", "intent": "create_timer,add_time_timer,update_timer\nConfidence scores: 0.8, 0.7, 0.6 (scores can vary depending on the model used)", "AMR Graph": "(c / create-01\n      :ARG1 (t / timer\n            :mod (b / blink\n                  :ARG1 (m / my)))\n      :ARG2 (u / up))", "key_phrase": "put up, my blink timer, create timer", "slot_type": "(method_timer, put up), (todo, my blink timer), (type_content, create timer)", "pred_lf": "[IN:create_timer [SL:method_timer put up] [SL:todo my blink timer] [SL:type_content create timer]]", "gold_lf": "[IN:GET_TIMER [SL:TIMER_NAME blink ] [SL:METHOD_TIMER timer ] ]"}
{"utterance": "how do you cook steak in a pan", "intent": "get_info_recipes,question_news,get_recipes\nConfidence scores: 0.8, 0.5, 0.3", "AMR Graph": "(get_info\n    :what (recipe\n              :dish (steak)\n              :how-to (cook\n                        :method (pan-fry)))\n    :source (you))", "key_phrase": "cook steak, in a pan, get recipes", "slot_type": "recipes_cooking_method, cook steak\nlocation, in a pan\nget_recipes, get recipes (or no slot type for \"get recipes\" if it refers to the intent rather than a specific key phrase)", "pred_lf": "[IN: get_recipes] [SL: recipes_cooking_method cook steak] [SL: location in a pan]", "gold_lf": "[IN:GET_INFO_RECIPES [SL:RECIPES_INCLUDED_INGREDIENT steak ] ]"}
{"utterance": "how long should i cook ribs", "intent": "get_recipes, get_details_news, question_news\nConfidence scores: 0.8, 0.6, 0.4", "AMR Graph": "(c / cook-01\n     :ARG0 (i / i)\n     :ARG1 (r / rib\n            :quant (l / long)))", "key_phrase": "cook, ribs, long", "slot_type": "(recipes_time_preparation, ribs), (method_recipes, cook), (O, long)", "pred_lf": "[IN:get_recipes [SL:recipes_time_preparation ribs] [SL:method_recipes cook] [SL:cook_time long]]", "gold_lf": "[IN:GET_INFO_RECIPES [SL:RECIPES_ATTRIBUTE how long ] [SL:RECIPES_INCLUDED_INGREDIENT ribs ] ]"}
{"utterance": "End my call", "intent": "end_call, cancel_call, hold_call\nConfidence scores: 0.9, 0.8, 0.7", "AMR Graph": "(c / command\n      :intent end_call\n      :confidence 0.9\n      :ARG0 (p / person :instance-of (r / requester))\n      :ARG1 (c2 / call))", "key_phrase": "End call, cancel call, hold call, requester, person.", "slot_type": "N/A (no key phrases correspond to any slot type)", "pred_lf": "[IN:end_call]", "gold_lf": "[IN:END_CALL ]"}
{"utterance": "Savannah Georgia events for next weekend", "intent": "get_event (0.8), \nget_location (0.7), \nget_date_time_event (0.6)", "AMR Graph": "(get_event \n      :location (get_location :name \"Savannah Georgia\")\n      :date-time \"next weekend\")", "key_phrase": "Savannah Georgia events, next weekend", "slot_type": "(location, Savannah Georgia), (date_time_event, next weekend)", "pred_lf": "[IN:get_event [SL:location Savannah Georgia] [SL:date_time_event next weekend]]", "gold_lf": "[IN:GET_EVENT [SL:LOCATION Savannah Georgia ] [SL:DATE_TIME for next weekend ] ]"}
{"utterance": "what's the temperature supposed to be tomorrow?", "intent": "get_weather,question_weather,question_temperature\nConfidence scores: 0.9, 0.7, 0.6", "AMR Graph": "(get_weather\n      :arg0 (you)\n      :time (tomorrow))", "key_phrase": "temperature, tomorrow, supposed to be", "slot_type": "(weather_temperature_unit, temperature), (date_time, tomorrow)", "pred_lf": "[IN:get_weather [SL:date_time tomorrow] [SL:weather_temperature_unit temperature]]", "gold_lf": "[IN:GET_WEATHER [SL:DATE_TIME tomorrow ] ]"}
{"utterance": "Did someone just graduate from CU Denver?", "intent": "get_education_degree (0.9), get_education_time (0.8), get_life_event (0.7)", "AMR Graph": "(c / check-01\n      :ARG0 (p / person)\n      :ARG1 (g / graduate-01\n            :degree (e / education-degree)\n            :time (t / time)))\n      \n    (p / person :name (n / name :op1 \"CU Denver\"))\n    \n    (t / time :time-of (g / graduate-01))", "key_phrase": "someone, graduate, CU Denver, education degree, time", "slot_type": "(type_content, someone), (education_degree, education degree), (life_event, graduate), (school, CU Denver), (get_education_time, time)", "pred_lf": "[IN:get_life_event [SL:life_event graduate] [SL:school CU Denver] [SL:type_content someone]]", "gold_lf": "[IN:GET_CONTACT [SL:SCHOOL CU Denver ] ]"}
{"utterance": "which whole food karen used to work at", "intent": "get_employer, get_job, get_details_news\nConfidence scores: 0.6, 0.4, 0.3", "AMR Graph": "(c / choose-01\n      :ARG0 (p / person :name \"karen\")\n      :ARG1 (w / whole-food\n            :name (n / name :op1 \"the\")\n            :quant (q / quantity :op1 \"which\"))\n      :ARG2-of (w2 / work-01))", "key_phrase": "karen, whole food, used to work at", "slot_type": "(employer, whole food), (person_reminded, karen), (method_recipes, used to work at)", "pred_lf": "[IN:get_employer [SL:employer whole food] [SL:person_reminded karen] [SL:method_recipes used to work at]]", "gold_lf": "[IN:GET_EMPLOYER [SL:EMPLOYER whole food ] [SL:CONTACT karen ] ]"}
{"utterance": "Healthy dinner recipes", "intent": "get_info_recipes, get_recipes, is_true_recipes\nConfidence scores: 0.9, 0.8, 0.7", "AMR Graph": "(node / healthy-recipes\n      :domain (cuisine)\n      :instance-of (recipe)\n      :healthy (opx)\n      :quant (all))\n\nExplanation:\nThe sentence \"Healthy dinner recipes\" implies a request for recipes that are healthy. Therefore, the intent type that best fits here is \"get_info_recipes\" with high confidence. The AMR graph represents a recipe domain with a focus on cuisine, indicated by the \"domain\" property. The recipe is an instance of the \"recipe\" class, indicated by the \"instance-of\" property. The \"healthy\" property indicates that the recipe is healthy, and the \"quant\" property indicates that the request is for all recipes that are healthy.", "key_phrase": "healthy dinner recipes, recipes, healthy", "slot_type": "(recipes_type_nutrition, healthy dinner recipes), (recipes, recipes), (recipes_attribute, healthy)", "pred_lf": "[IN:get_info_recipes [SL:recipes_type_nutrition healthy dinner recipes]]", "gold_lf": "[IN:GET_RECIPES [SL:RECIPES_ATTRIBUTE Healthy ] [SL:RECIPES_MEAL dinner ] ]"}
{"utterance": "Message Jason and ask him to send a photo of his damaged car.", "intent": "get_message_contact (0.75), create_message (0.4), send_message (0.35)", "AMR Graph": "(get-message-contact\n     :receiver (name :op \"Jason\")\n     :medium (message\n                 :content (ask\n                              :topic (send-photo\n                                         :object (car :state (damaged))\n                                         :owner (name :op \"his\"))))))", "key_phrase": "Message Jason, send a photo, damaged car", "slot_type": "contact, Jason \nmethod_recipes, send a photo \nattribute_event, damaged car", "pred_lf": "[IN:get_message_contact [SL:contact Jason] [SL:attribute_event damaged car] [SL:method_recipes send a photo]]", "gold_lf": "[IN:SEND_MESSAGE [SL:RECIPIENT Jason ] [SL:CONTENT_EXACT send a photo of his damaged car ] ]"}
{"utterance": "What temp for the cherry pies", "intent": "get_recipes,question_news,get_details_news\nConfidence scores: 0.95,0.8,0.7", "AMR Graph": "(get-details-news :topic (cherry-pies)\n                   :detail-type (temperature))", "key_phrase": "cherry pies, temperature", "slot_type": "(recipes_dish, cherry pies), (weather_temperature_unit, temp)", "pred_lf": "[IN: get_details_news] [SL: recipes_dish cherry pies] [SL: weather_temperature_unit temp]", "gold_lf": "[IN:GET_INFO_RECIPES [SL:RECIPES_ATTRIBUTE temp ] [SL:RECIPES_DISH cherry pies ] ]"}
{"utterance": "Add more minutes to my timer.", "intent": "add_time_timer,add_to_playlist_music,create_timer,update_timer,subtract_time_timer\nConfidence scores: 0.7, 0.5, 0.5, 0.4, 0.4", "AMR Graph": "(add-event\n        :time (additional-time\n                  :amount (measure-unit :unit \"minute\")\n                  :value (literal 1))\n        :theme (timer-entity\n                  :possessor (i-entity :name \"me\")))", "key_phrase": "Add more minutes, timer", "slot_type": "(method_timer, Add more minutes), (todo, timer)", "pred_lf": "[IN:add_time_timer [SL:method_timer Add more minutes] [SL:todo timer]]", "gold_lf": "[IN:ADD_TIME_TIMER [SL:DATE_TIME minutes ] [SL:METHOD_TIMER timer ] ]"}
{"utterance": "What is the hottest that it will get all week?", "intent": "get_weather,question_weather,question_temperature \nConfidence scores: 0.8, 0.6, 0.5", "AMR Graph": "(get_weather\n  :temp_max (most-high \"week\")\n)", "key_phrase": "hottest, get all week, temperature", "slot_type": "(weather_attribute, hottest), (weather_temperature_unit, get all week), (weather_attribute, temperature)", "pred_lf": "[IN:get_weather [SL:weather_attribute hottest] [SL:weather_temperature_unit get all week] [SL:weather_attribute temperature]]", "gold_lf": "[IN:GET_WEATHER [SL:WEATHER_ATTRIBUTE hottest ] [SL:DATE_TIME all week ] ]"}
{"utterance": "set alarm for 7:30 am", "intent": "create_alarm (0.9), update_alarm (0.8), delete_alarm (0.6)", "AMR Graph": "(set\n     :time (time-entity\n                :hour 7\n                :minute 30\n                :period \"AM\")\n     :event (event\n                :type create_alarm))", "key_phrase": "set alarm, 7:30 am, create alarm", "slot_type": "(alarm_name, alarm), (date_time, 7:30 am), (method_timer, set), (todo, create_alarm)", "pred_lf": "[IN:create_alarm [SL:alarm_name alarm] [SL:date_time 7:30 am] [SL:method_timer set] [SL:todo create_alarm]]", "gold_lf": "[IN:CREATE_ALARM [SL:DATE_TIME for 7 : 30 am ] ]"}
{"utterance": "How much is it going to rain tomorrow?", "intent": "get_weather,question_weather,question, 0.8, 0.7, 0.6", "AMR Graph": "(c / question-weather\n      :polarity -\n      :domain (t / tomorrow\n                    :time-of-day (d / day)))\n    (g / go-01\n      :ARG1 (r / rain-01\n                  :polarity -\n                  :ARG2 t)))\nNote: The AMR represents a question about the weather for tomorrow, with a high probability that the intent is to get information about the amount of rain that is expected to occur (indicated by the \"get_weather\" and \"question_weather\" intent types). The AMR also accounts for the possibility that the question is a more general inquiry about the weather, without a specific focus on rain (indicated by the \"question\" intent type). The probabilities associated with each intent type can be used to disambiguate the exact meaning of the sentence.", "key_phrase": "rain tomorrow, how much, question, weather", "slot_type": "(weather_attribute, rain tomorrow), (method_weather, how much), (type_content, question), (type_content, weather)", "pred_lf": "[IN:get_weather [SL:weather_attribute rain tomorrow] [SL:method_weather how much] [SL:type_content question] [SL:type_content weather]]", "gold_lf": "[IN:GET_WEATHER [SL:WEATHER_ATTRIBUTE rain ] [SL:DATE_TIME tomorrow ] ]"}
{"utterance": "start music on pandora", "intent": "play_music,play_media,add_to_playlist_music\nConfidence score: 0.9, 0.8, 0.7", "AMR Graph": "(play_music :medium (pandora) :action start)", "key_phrase": "start music, pandora", "slot_type": "(music_radio_id, pandora), (music_type, music)", "pred_lf": "[IN:play_music [SL:music_type music] [SL:music_radio_id pandora]]", "gold_lf": "[IN:PLAY_MUSIC [SL:MUSIC_TYPE music ] [SL:MUSIC_PROVIDER_NAME pandora ] ]"}
{"utterance": "when are the next elections", "intent": "get_event, get_date_time_event, question_news\nConfidence scores: 0.8, 0.7, 0.6", "AMR Graph": "(get_event\n      :time (when)\n      :event (elections\n               :time (next)))", "key_phrase": "next elections, when, get event, get date time event, question news", "slot_type": "(title_event, next elections), (date_time, when), (type_content, get event), (attribute_event, get date time event), (news_type, question news)", "pred_lf": "[IN:get_date_time_event [SL:title_event next elections] [SL:type_content get event] [SL:date_time when]]", "gold_lf": "[IN:QUESTION_NEWS [SL:NEWS_REFERENCE next ] [SL:NEWS_TOPIC elections ] ]"}
{"utterance": "Find me the latest Linkin Park album", "intent": "get_track_info_music, 0.9, question_music, 0.6, get_info_recipes, 0.4", "AMR Graph": "(find\n     :wh-pronoun (me)\n     :op1 (latest\n             :mod (album\n                      :mod (Linkin Park))))\n     :intent (get_track_info_music\n                  :prob 0.9))", "key_phrase": "Find, latest, Linkin Park, album", "slot_type": "(music_artist_name, Linkin Park), (music_album_title, latest album)", "pred_lf": "[IN:get_track_info_music [SL:music_artist_name Linkin Park] [SL:music_album_title latest album]]", "gold_lf": "[IN:PLAY_MUSIC [SL:MUSIC_ARTIST_NAME Linkin Park ] [SL:MUSIC_TYPE album ] ]"}
{"utterance": "Easy salad recipes", "intent": "get_info_recipes,question_news,get_recipes\nConfidence scores: \n0.9,0.8,0.7", "AMR Graph": "(c / easy\n     :mod (r / recipe\n             :prep-against (s / salad)))", "key_phrase": "salad recipes, easy salad, recipes", "slot_type": "(recipes_meal, salad recipes), (recipes_qualifier_nutrition, easy salad), (recipes_type, recipes)", "pred_lf": "[IN:get_recipes [SL:recipes_type recipes] [SL:recipes_qualifier_nutrition easy salad] [SL:recipes_meal salad recipes]]", "gold_lf": "[IN:GET_RECIPES [SL:RECIPES_ATTRIBUTE Easy ] [SL:RECIPES_DISH salad ] ]"}
{"utterance": "call India Cortez and Vivian Hamilton", "intent": "get_call,create_call,get_contact\nConfidence scores: 0.6,0.4,0.3", "AMR Graph": "(call    \n :purpose (create_call)   \n :participants (India   \n                 Cortez   \n                 Vivian Hamilton))", "key_phrase": "call India, Cortez, Vivian Hamilton, create call, participants", "slot_type": "(contact_method, call India), (person_reminded, Cortez), (person_reminded, Vivian Hamilton), (type_relation, create call), (attendee, participants)", "pred_lf": "[IN:get_call [SL:contact_method call India] [SL:person_reminded Cortez] [SL:person_reminded Vivian Hamilton] [SL:attendee participants]]", "gold_lf": "[IN:CREATE_CALL [SL:CONTACT India Cortez ] [SL:CONTACT Vivian Hamilton ] ]"}
{"utterance": "Where does Paula Carlton work?", "intent": "get_job, get_employer, get_info_contact\nConfidence scores: 0.8, 0.7, 0.6", "AMR Graph": "(get_job\n     :who (person :name \"Paula Carlton\")\n     :where (employment :type \"job\"))", "key_phrase": "Paula Carlton, work", "slot_type": "(person_reminded, Paula Carlton), (job, work)", "pred_lf": "[IN:get_employer [SL:person_reminded Paula Carlton] [SL:job work]]", "gold_lf": "[IN:GET_EMPLOYER [SL:CONTACT Paula Carlton ] ]"}
{"utterance": "Will there be a lot of rain this weekend?", "intent": "get_weather,question_weather,help_weather\nConfidence score: 0.9,0.6,0.4", "AMR Graph": "(get_weather\n      :time (weekend)\n      :weather (rain)\n      :amount (many))", "key_phrase": "rain, weekend, lot of rain", "slot_type": "(weather_attribute, rain), (date_time, weekend), (weather_attribute, lot of rain)", "pred_lf": "[IN:get_weather [SL:weather_attribute rain] [SL:date_time weekend]]", "gold_lf": "[IN:GET_WEATHER [SL:WEATHER_ATTRIBUTE rain ] [SL:DATE_TIME this weekend ] ]"}
{"utterance": "set an alarm for one hour", "intent": "create_alarm (0.9), add_time_timer (0.8), update_alarm (0.7)", "AMR Graph": "(c / create-01\n      :ARG1 (a / alarm\n              :time (t / time\n                      :unit (h / hour\n                            :quant 1))))", "key_phrase": "set alarm, one hour, create alarm, add time, update alarm", "slot_type": "(method_timer, set alarm), (amount, one hour), (todo, create alarm), (method_timer, add time), (todo, update alarm)", "pred_lf": "[IN:create_alarm [SL:method_timer set alarm] [SL:amount one hour] [SL:todo create alarm]]", "gold_lf": "[IN:CREATE_ALARM [SL:DATE_TIME for one hour ] ]"}
{"utterance": "Give me news regarding the Senate Russia hearings.", "intent": "get_details_news (0.9), question_news (0.8), get_stories_news (0.7)", "AMR Graph": "(get-details-news\n   :subject (I)\n   :object (news\n             :type (regarding)\n             :entity (Senate Russia hearings)))", "key_phrase": "news, Senate Russia hearings, regarding", "slot_type": "(news_topic, news), \n(news_topic, Senate Russia hearings), \n(attribute_event, regarding)", "pred_lf": "[IN:get_details_news [SL:news_topic news] [SL:news_topic Senate Russia hearings] [SL:attribute_event regarding]]", "gold_lf": "[IN:GET_STORIES_NEWS [SL:NEWS_TYPE news ] [SL:NEWS_TOPIC Senate Russia hearings ] ]"}
{"utterance": "Is there lightning reported in the current thunderstorm?", "intent": "get_weather,question_weather,question_current_weather\nConfidence scores: 0.9, 0.6, 0.5", "AMR Graph": "(get_weather\n    :location (storm :current t)\n    :phenomenon lightning\n)", "key_phrase": "lightning, current thunderstorm, reported", "slot_type": "(weather_attribute, lightning), (location, current thunderstorm), (O, reported)", "pred_lf": "[IN:get_weather [SL:weather_attribute lightning] [SL:location current thunderstorm] [SL:O reported]]", "gold_lf": "[IN:GET_WEATHER [SL:WEATHER_ATTRIBUTE lightning ] [SL:WEATHER_ATTRIBUTE thunderstorm ] ]"}
{"utterance": "Ask Ryan if he wants to go to an FSU football game this fall.", "intent": "get_event, get_details_news, get_attendee_event\nConfidence Scores: 0.9, 0.8, 0.7", "AMR Graph": "(get_event\n      :event (football-game\n                  :time fall)\n      :attendee (person\n                    :name Ryan)\n      :interested-in (FSU))", "key_phrase": "Ryan, go, FSU football game, fall", "slot_type": "(group, Ryan), (title_event, FSU football game), (period, fall)", "pred_lf": "[IN: get_event [SL: group Ryan] [SL: title_event FSU football game] [SL: period fall]]", "gold_lf": "[IN:SEND_MESSAGE [SL:RECIPIENT Ryan ] [SL:CONTENT_EXACT he wants to go to an FSU football game this fall ] ]"}
{"utterance": "Cancel my reminder for juice.", "intent": "delete_reminder (0.8), cancel_message (0.7), prefer (0.4)", "AMR Graph": "(delete-reminder \n   :reminder (message \n                :object (juice) \n                :action cancel))", "key_phrase": "Cancel reminder, juice.", "slot_type": "(method_retrieval_reminder, Cancel reminder), (recipes_dish, juice)", "pred_lf": "[IN:delete_reminder [SL:method_retrieval_reminder Cancel reminder] [SL:recipes_dish juice]]", "gold_lf": "[IN:DELETE_REMINDER [SL:PERSON_REMINDED my ] [SL:TODO juice ] ]"}
{"utterance": "how to make pancakes from scratch", "intent": "get_info_recipes, 0.95; is_true_recipes, 0.75; question_news, 0.3.", "AMR Graph": "(c / cause-effect\n      :cause (m / make-01\n                    :ARG0 (y / you)\n                    :ARG1 (p / pancake\n                                :quant  (s / some)\n                                :mod (f / from\n                                        :source (s2 / scratch)\n                                     )\n                           )\n              )\n      :effect (i / info\n                    :ARG1 (r / recipe\n                                 :mod (s / scratch)\n                           )\n              )\n   )", "key_phrase": "make pancakes, from scratch, recipe", "slot_type": "recipes_cooking_method, make pancakes; \nrecipes_ingredient, pancakes; \nrecipes_qualifier, from scratch; \nrecipes_type, recipe", "pred_lf": "[IN:get_info_recipes [SL:recipes_cooking_method make pancakes] [SL:recipes_ingredient pancakes] [SL:recipes_qualifier from scratch] [SL:recipes_type recipe]]", "gold_lf": "[IN:GET_RECIPES [SL:RECIPES_DISH pancakes ] [SL:RECIPES_COOKING_METHOD from scratch ] ]"}
{"utterance": "delete the wedding reminder for sunday", "intent": "delete_reminder,delete_alarm,delete_timer; 0.8,0.7,0.6", "AMR Graph": "(c / delete_reminder \n   :object (r / reminder \n              :type (w / wedding) \n              :date (d / day \n                      :weekday (s / sunday))))", "key_phrase": "delete reminder, wedding reminder, Sunday", "slot_type": "(method_retrieval_reminder, delete reminder), (title_event, wedding reminder), (date_time, Sunday)", "pred_lf": "[IN:delete_reminder [SL:method_retrieval_reminder delete reminder] [SL:title_event wedding reminder] [SL:date_time Sunday]]", "gold_lf": "[IN:DELETE_REMINDER [SL:TODO wedding ] [SL:DATE_TIME for sunday ] ]"}
{"utterance": "show me who is available please", "intent": "get_availability, get_call_contact, help_reminder\nConfidence scores: 0.8, 0.7, 0.6", "AMR Graph": "(get_availability\n   :requested (person)\n   :response (person))", "key_phrase": "show, available, who, please", "slot_type": "(O, show), (O, please), (group, available), (contact_related, who)", "pred_lf": "[IN:get_availability [SL:group available] [SL:contact_related who]]", "gold_lf": "[IN:GET_AVAILABILITY ]"}
{"utterance": "Turn on the radio please", "intent": "play_music,question_music,play_media\nConfidence scores: 0.8, 0.15, 0.05", "AMR Graph": "(node / turn-on\n      :ARG0 (you)\n      :ARG1 (radio))\n\n(node / you)\n\n(node / radio)\n\n(node / please)", "key_phrase": "Turn on, radio, please", "slot_type": "(O, Turn on), (music_radio_id, radio), (O, please)", "pred_lf": "[IN:play_music [SL:music_id radio]]", "gold_lf": "[IN:PLAY_MUSIC [SL:MUSIC_TYPE radio ] ]"}
{"utterance": "let's start recording a video message for Nobuko Falconeri", "intent": "create_message_contact,create_video_message_contact,record_video_message_contact\nNumeric confidence scores: 0.7,0.6,0.5", "AMR Graph": "(l / let-01\n   :ARG0 (i / i)\n   :ARG1 (s / start-01\n            :ARG0 i\n            :ARG1 (r / record-01\n                     :ARG0 i\n                     :ARG1 (v / video_message\n                              :topic (p / person\n                                       :name \"Nobuko Falconeri\")\n                              :medium (m / medium\n                                         :type \"video\")))))", "key_phrase": "start recording, video message, Nobuko Falconeri", "slot_type": "(method_recipes, start recording), (type_content, video message), (contact_related, Nobuko Falconeri)", "pred_lf": "[IN:create_video_message_contact [SL:method_recipes start recording] [SL:type_content video message] [SL:contact_related Nobuko Falconeri]]", "gold_lf": "[IN:SEND_MESSAGE [SL:TYPE_CONTENT video ] [SL:RECIPIENT Nobuko Falconeri ] ]"}
{"utterance": "Play Eminem's newest hit", "intent": "play_music,question_music,get_track_info_music\nConfidence scores: 0.9, 0.8, 0.7", "AMR Graph": "(play_music \n :player (music_player :name \"Eminem\")\n :track (music_track :name \"newest hit\"))", "key_phrase": "Play, Eminem's newest hit, music_player, music_track", "slot_type": "(music_type, Eminem's newest hit), (music_artist_name, Eminem), (music_track_title, newest hit)", "pred_lf": "[IN:play_music [SL:music_type Eminem's newest hit] [SL:music_artist_name Eminem] [SL:music_track_title newest hit]]", "gold_lf": "[IN:PLAY_MUSIC [SL:MUSIC_ARTIST_NAME Eminem ] [SL:MUSIC_TYPE hit ] ]"}
{"utterance": "Message Riley to say I am going to be late", "intent": "get_message_contact, send_message, create_reminder\nConfidence score: 0.7, 0.6, 0.5", "AMR Graph": "(send-message :message \"I am going to be late\"\n               :to (person :name \"Riley\"))", "key_phrase": "Message Riley, going to be late, send message, create reminder.", "slot_type": "contact, Riley\nmessage_content, going to be late\nintent_type, send_message or create_reminder (not clear from given sentence)\nintent_action, send_message or create_reminder (not clear from given sentence)", "pred_lf": "[IN: send_message [SL: contact Riley] [SL: message_content going to be late]]", "gold_lf": "[IN:SEND_MESSAGE [SL:RECIPIENT Riley ] [SL:CONTENT_EXACT I am going to be late ] ]"}
{"utterance": "What's happening in Dallas", "intent": "get_location,question_news,get_details_news\nNumeric confidence scores: 0.8,0.6,0.5", "AMR Graph": "(get_event \n   :time (date-entity :today)\n   :place (named-entity :name \"Dallas\"))", "key_phrase": "Dallas, happening, get details, get location, question news", "slot_type": "(location, Dallas)", "pred_lf": "[IN:get_location [SL:location Dallas]]", "gold_lf": "[IN:GET_EVENT [SL:LOCATION Dallas ] ]"}
{"utterance": "Update reminder for today's staff meeting from 1 pm to 2 pm.", "intent": "update_reminder, get_reminder, get_reminder_date_time \n\nNumeric confidence scores: 0.8, 0.7, 0.6", "AMR Graph": "(update-remind\n   :reminder (staff-meeting\n               :date today\n               :start-time 1pm\n               :end-time 2pm))", "key_phrase": "Update reminder, today's staff meeting, 1 pm to 2 pm", "slot_type": "(todo, Update reminder), (title_event, today's staff meeting), (date_time, 1 pm to 2 pm)", "pred_lf": "[IN:update_reminder [SL:todo Update reminder] [SL:title_event today's staff meeting] [SL:date_time 1 pm to 2 pm]]", "gold_lf": "[IN:UPDATE_REMINDER_DATE_TIME [SL:TODO today 's staff meeting ] [SL:DATE_TIME 1 pm ] [SL:DATE_TIME 2 pm ] ]"}
{"utterance": "Remind me to get tacos for dinner", "intent": "create_reminder (0.8), get_reminder_todo (0.7), get_details_news (0.6)", "AMR Graph": "(c / remind-01\n      :ARG0 (m / me)\n      :ARG1 (g / get-01\n            :ARG0 (t / taco)\n            :ARG2 (d / dinner)))", "key_phrase": "Remind me, get tacos, for dinner", "slot_type": "(todo, get tacos), (method_timer, Remind me), (recipes_meal, dinner)", "pred_lf": "[IN: create_reminder [SL: todo get tacos] [SL: method_timer Remind me] [SL: recipes_meal dinner]]", "gold_lf": "[IN:CREATE_REMINDER [SL:PERSON_REMINDED me ] [SL:TODO get tacos for dinner ] ]"}
{"utterance": "Start the timer at 8:30", "intent": "create_timer,add_time_timer,update_timer\nNumeric confidence scores: 0.75, 0.70, 0.60", "AMR Graph": "(create_timer\n    :arg1 (timer\n             :time 8:30))", "key_phrase": "Start the timer, 8:30", "slot_type": "(method_timer, Start the timer), (date_time, 8:30)", "pred_lf": "[IN:create_timer [SL:method_timer Start the timer] [SL:date_time 8:30]]", "gold_lf": "[IN:CREATE_TIMER [SL:METHOD_TIMER timer ] [SL:DATE_TIME at 8 : 30 ] ]"}
{"utterance": "How many calories are in a Big Mac from McDonald's", "intent": "get_details_news, get_info_recipes, question_news\nNumeric confidence scores: 0.8, 0.6, 0.4", "AMR Graph": "(get-details-news\n    :action (question\n                :what (calories\n                            :thing (big-mac\n                                        :from (mcdonalds)))) \n    :confidence 0.8)", "key_phrase": "calories, Big Mac, McDonald's", "slot_type": "(recipes_unit_nutrition, calories), (recipes_dish, Big Mac), (location, McDonald's)", "pred_lf": "[IN: get_details_news [SL: recipes_unit_nutrition calories] [SL: recipes_dish Big Mac] [SL: location McDonald's]]", "gold_lf": "[IN:GET_INFO_RECIPES [SL:RECIPES_UNIT_NUTRITION calories ] [SL:RECIPES_DISH Big Mac ] ]"}
{"utterance": "What is the correct temperature for medium rare steak", "intent": "get_details_recipes,question_food,get_cooking_temperature\nConfidence scores: 0.8,0.75,0.7", "AMR Graph": "(get-details      \n      :topic medium-rare-steak\n      :details\n        (get-correct-temperature\n            :for medium-rare-steak))", "key_phrase": "correct temperature, medium rare steak", "slot_type": "(recipes_cooking_method, medium rare steak), (recipes_type, steak), (recipes_time_preparation, medium rare), (recipes_unit_measurement, temperature)", "pred_lf": "[IN:get_cooking_temperature [SL:recipes_cooking_method medium rare steak] [SL:recipes_type steak] [SL:recipes_time_preparation medium rare] [SL:recipes_unit_measurement temperature]]", "gold_lf": "[IN:GET_INFO_RECIPES [SL:RECIPES_ATTRIBUTE temperature ] [SL:RECIPES_ATTRIBUTE medium rare ] [SL:RECIPES_DISH steak ] ]"}
{"utterance": "where does ali live?", "intent": "get_location, get_contact, get_info_contact\nConfidence scores: 0.9, 0.5, 0.4", "AMR Graph": "(get_location\n       :arg0 (person :name \"ali\"))", "key_phrase": "ali, live", "slot_type": "(location, ali), (O, live)", "pred_lf": "[IN:get_location [SL:location ali] [SL:O live]]", "gold_lf": "[IN:GET_LOCATION [SL:CONTACT ali ] ]"}
{"utterance": "make a call to Xander Brown's mom", "intent": "create_call, get_contact, get_call_contact\nNumeric confidence scores: 0.9, 0.8, 0.7", "AMR Graph": "(c / create_call\n     :args (p / phone\n              :poss (n / name\n                         :op1 \"Xander Brown's\")\n              :mod (m / mother)))", "key_phrase": "make a call, Xander Brown's mom, get contact", "slot_type": "(todo, make a call), (contact_related, Xander Brown's mom), (method_retrieval_reminder, get contact)", "pred_lf": "[IN:create_call [SL:todo make a call] [SL:contact_related Xander Brown's mom]] OR [IN:get_contact [SL:contact_related Xander Brown's mom] [SL:method_retrieval_reminder get contact]] OR [IN:get_call_contact [SL:contact_related Xander Brown's mom]]", "gold_lf": "[IN:CREATE_CALL [SL:CONTACT Xander Brown 's mom ] ]"}
{"utterance": "remind me about dinner tonight at 5", "intent": "create_reminder,create_call,get_reminder_date_time\n0.8,0.5,0.4", "AMR Graph": "(c / remind-01\n     :purpose (r / request-01\n                   :object (e / event\n                               :name \"dinner\"\n                               :date-time (d / date-entity\n                                             :weekday \"tonight\"\n                                             :hour 5))))", "key_phrase": "reminder, dinner, tonight, 5", "slot_type": "(todo, reminder), (recipes_meal, dinner), (date_time, tonight at 5)", "pred_lf": "[IN:create_reminder [SL:todo reminder] [SL:recipes_meal dinner] [SL:date_time tonight at 5]]", "gold_lf": "[IN:CREATE_REMINDER [SL:PERSON_REMINDED me ] [SL:TODO dinner ] [SL:DATE_TIME tonight at 5 ] ]"}
{"utterance": "Find me a recipe for curry chicken", "intent": "get_info_recipes (0.9), is_true_recipes (0.5), question_news (0.4)", "AMR Graph": "(get_info \n\t:args (recipe \n\t\t:mod curry \n\t\t:mod chicken \n\t)\n\t:subj (you) \n)", "key_phrase": "recipe, curry chicken, find me", "slot_type": "(recipes_type, recipe), (recipes_dish, curry chicken), (method_retrieval_reminder, find me)", "pred_lf": "[IN:get_info_recipes [SL:recipes_type recipe] [SL:recipes_dish curry chicken] [SL:method_retrieval_reminder find me]]", "gold_lf": "[IN:GET_RECIPES [SL:RECIPES_DISH curry chicken ] ]"}
{"utterance": "theater events in los angeles this week", "intent": "get_event, get_location, get_date_time_event\nConfidence scores: 0.9, 0.8, 0.7", "AMR Graph": "(get_event\n  :time (this-week)\n  :location (city :name \"los angeles\")\n  :event (type :name \"theater-events\"))", "key_phrase": "theater events, los angeles, this week", "slot_type": "(location, los angeles), (date_time_event, this week), (title_event, theater events)", "pred_lf": "[IN:get_event [SL:title_event theater events] [SL:location los angeles] [SL:date_time_event this week]]", "gold_lf": "[IN:GET_EVENT [SL:CATEGORY_EVENT theater ] [SL:LOCATION los angeles ] [SL:DATE_TIME this week ] ]"}
{"utterance": "What do I need to make a chicken noodle soup", "intent": "get_info_recipes, get_recipes, is_true_recipes\nConfidence scores: 0.8, 0.7, 0.6", "AMR Graph": "(get_info_recipes\n     :subject (I)\n     :object (chicken_noodle_soup)\n     :need (make))", "key_phrase": "I, chicken noodle soup, make", "slot_type": "(recipes_dish, chicken noodle soup), (method_recipes, make)", "pred_lf": "[IN:get_info_recipes [SL:recipes_dish chicken noodle soup] [SL:method_recipes make]]", "gold_lf": "[IN:GET_INFO_RECIPES [SL:RECIPES_DISH chicken noodle soup ] ]"}
{"utterance": "What is the temperature in London?", "intent": "get_weather,question_news,get_location\nConfidence score: 0.9, 0.05, 0.04", "AMR Graph": "(get_weather\n     :query (temperature\n               :location (city :name \"London\"))))", "key_phrase": "temperature, London", "slot_type": "(weather_temperature_unit, temperature), (location, London)", "pred_lf": "[IN:get_weather [SL:weather_temperature_unit temperature] [SL:location London]]", "gold_lf": "[IN:GET_WEATHER [SL:LOCATION London ] ]"}
{"utterance": "Play a bunch of songs from musicals, please.", "intent": "1. play_music (0.9), 2. question_music (0.7), 3. create_playlist_music (0.6)", "AMR Graph": "(play_music\n      :event (play\n                 :theme (songs_from_musicals)\n             )\n     )", "key_phrase": "play songs, songs from musicals, bunch of songs, please.", "slot_type": "music_type, songs\nmusic_genre, musicals\nO, bunch\nO, please", "pred_lf": "[IN:play_music [SL:music_type songs] [SL:music_genre musicals] [SL:O bunch] [SL:O please]]", "gold_lf": "[IN:PLAY_MUSIC [SL:MUSIC_TYPE songs ] ]"}
{"utterance": "Have Janie and Kyle Coleman messaged me today", "intent": "get_message_contact, get_message, get_contact\nConfidence scores: 0.9, 0.8, 0.7", "AMR Graph": "(get_message_contact\n    :subject (person :name \"Janie\")\n    :object (person :name \"Kyle Coleman\")\n    :action (message :sender (person :pronoun \"me\") :time \"today\"))", "key_phrase": "Janie, Kyle Coleman, messaged, me, today.", "slot_type": "user_attendee_event, Janie\nuser_attendee_event, Kyle Coleman\nmethod_retrieval_reminder, messaged\nO, me\ndate_time, today", "pred_lf": "[IN:get_message_contact [SL: user_attendee_event Janie] [SL: user_attendee_event Kyle Coleman] [SL: method_retrieval_reminder messaged] [SL: O me] [SL: date_time today]]", "gold_lf": "[IN:GET_MESSAGE [SL:SENDER Janie ] [SL:SENDER Kyle Coleman ] [SL:RECIPIENT me ] [SL:DATE_TIME today ] ]"}
