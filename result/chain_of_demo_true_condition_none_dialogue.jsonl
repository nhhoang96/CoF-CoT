{"utterance": "call Nicholas and Natasha", "intent": "create_call", "AMR Graph": "(call\n    :ARG0 (person :wiki \"Nicholas\")\n    :ARG1 (person :wiki \"Natasha\")\n)", "key_phrase": "Nicholas, Natasha", "slot_type": "('attendee', 'Nicholas'),('attendee', 'Natasha')", "pred_lf": "[IN:CREATE_CALL [SL:ATTENDEE Nicholas ] [SL:ATTENDEE Natasha ] ]", "gold_lf": "[IN:CREATE_CALL [SL:CONTACT Nicholas ] [SL:CONTACT Natasha ] ]"}
{"utterance": "Give me the most recent NPR news", "intent": "get_details_news", "AMR Graph": "(d / give-01\n   :ARG0 (y / you)\n   :ARG1 (n / news\n             :mod (r / recent)\n             :mod (n2 / npr)))", "key_phrase": "most recent NPR news, give me", "slot_type": "('news_type', 'NPR news'),('type_content', 'most recent'),('recipient', 'me'),('method_retrieval_reminder', 'give me')", "pred_lf": "[IN:GET_DETAILS_NEWS [SL:NEWS_TYPE NPR news ] [SL:TYPE_CONTENT most recent ] [SL:RECIPIENT me ] [SL:METHOD_RETRIEVAL_REMINDER give me ] ]", "gold_lf": "[IN:GET_STORIES_NEWS [SL:DATE_TIME the most recent ] [SL:NEWS_SOURCE NPR ] [SL:NEWS_TYPE news ] ]"}
{"utterance": "What's the work address with zipcode where James work?", "intent": "get_location", "AMR Graph": "(work \n  :ARG1 (person :name (name \"James\"))\n  :ARG2 (address \n          :zipcode (zipcode)\n          :ARG1 (workplace \n                  :name (name \"work\"))))", "key_phrase": "work address, zipcode, James", "slot_type": "('location', 'work address'),('location', 'zipcode'),('person_reminded', 'James')", "pred_lf": "[IN:GET_LOCATION [SL:LOCATION work address ] [SL:LOCATION zipcode ] [SL:PERSON_REMINDED James ] ]", "gold_lf": "[IN:GET_LOCATION [SL:CONTACT James ] ]"}
{"utterance": "ring my brother", "intent": "create_call", "AMR Graph": "(RING :ARG1 (BROTHER :POSSESSOR (I)))", "key_phrase": "ring, brother", "slot_type": "('alarm_name', 'ring'),('recipient', 'brother')", "pred_lf": "[IN:CREATE_CALL [SL:ALARM_NAME ring ] [SL:RECIPIENT brother ] ]", "gold_lf": "[IN:CREATE_CALL [SL:CONTACT my brother ] ]"}
{"utterance": "set a timer for my workout right now", "intent": "create_timer", "AMR Graph": "(set :op1 (timer :topic workout :time now))", "key_phrase": "set a timer, workout, now", "slot_type": "('method_timer', 'set a timer'),('todo', 'workout'),('date_time', 'now')", "pred_lf": "[IN:CREATE_TIMER [SL:METHOD_TIMER set a timer ] [SL:TODO workout ] [SL:DATE_TIME now ] ]", "gold_lf": "[IN:CREATE_TIMER [SL:METHOD_TIMER timer ] [SL:TIMER_NAME workout ] ]"}
{"utterance": "call Camilla whatsapp video", "intent": "create_call", "AMR Graph": "(c / call\n      :arg1 (i / individual :name \"Camilla\")\n      :medium (w / whatsapp)\n      :mode (v / video))", "key_phrase": "Camilla, whatsapp video, call", "slot_type": "('recipient', 'Camilla'),('contact_method', 'whatsapp'),('type_content', 'video'),('todo', 'call')", "pred_lf": "[IN:CREATE_CALL [SL:RECIPIENT Camilla ] [SL:CONTACT_METHOD whatsapp ] [SL:TYPE_CONTENT video ] [SL:TODO call ] ]", "gold_lf": "[IN:CREATE_CALL [SL:CONTACT Camilla ] [SL:NAME_APP whatsapp ] ]"}
{"utterance": "call Avery M", "intent": "create_call", "AMR Graph": "(call \n      :arg0 (name :op \"Avery M\"))", "key_phrase": "Avery M, call", "slot_type": "('attendee', 'Avery M'),('todo', 'call')", "pred_lf": "[IN:CREATE_CALL [SL:ATTENDEE Avery M ] [SL:TODO call ] ]", "gold_lf": "[IN:CREATE_CALL [SL:CONTACT Avery M ] ]"}
{"utterance": "what is the next alarm for", "intent": "get_alarm", "AMR Graph": "(d / do-01\n      :ARG0 (w / what)\n      :ARG1 (n / next\n            :mod (a / alarm)\n            :purpose (f / for)))", "key_phrase": "next alarm, for", "slot_type": "('ordinal', 'next'), ('alarm_name', 'alarm'), ('location', 'for')", "pred_lf": "[IN:GET_ALARM [SL:ORDINAL next ] [SL:ALARM_NAME alarm ] [SL:LOCATION for ] ]", "gold_lf": "[IN:GET_ALARM [SL:ORDINAL next ] ]"}
{"utterance": "Recommend me some Broadway shows in Anchorage for Thursday night", "intent": "Question_event", "AMR Graph": "(t / recommend-01\n      :ARG0 (m / me)\n      :ARG1 (s / show\n            :mod (b / Broadway)\n            :location (c / city\n                  :name \"Anchorage\"))\n      :time (d / date-entity :weekday \"Thursday\"\n            :mod (n / night)))", "key_phrase": "Broadway shows, Anchorage, Thursday night.", "slot_type": "('title_event', 'Broadway shows'),('location', 'Anchorage'),('date_time', 'Thursday night')", "pred_lf": "[IN:QUESTION_EVENT [SL:TITLE_EVENT Broadway shows ] [SL:LOCATION Anchorage ] [SL:DATE_TIME Thursday night ] ]", "gold_lf": "[IN:GET_EVENT [SL:CATEGORY_EVENT Broadway shows ] [SL:LOCATION Anchorage ] [SL:DATE_TIME for Thursday night ] ]"}
{"utterance": "What's news about facebook this week", "intent": "get_details_news", "AMR Graph": "(c / news \n      :topic (f / facebook)\n      :time (w / week))", "key_phrase": "news, facebook, this week", "slot_type": "('news_topic', 'news'),('news_reference', 'facebook'),('date_time', 'this week')", "pred_lf": "[IN:GET_DETAILS_NEWS [SL:NEWS_TOPIC news ] [SL:NEWS_REFERENCE facebook ] [SL:DATE_TIME this week ] ]", "gold_lf": "[IN:GET_STORIES_NEWS [SL:NEWS_TYPE news ] [SL:NEWS_TOPIC facebook ] [SL:DATE_TIME this week ] ]"}
{"utterance": "can you set a warning alarm for 7pm", "intent": "create_alarm", "AMR Graph": "(set-event\n  :instance-of (set-alarms)\n  :time (time :hour 19)\n  :warning true)", "key_phrase": "set a warning alarm, 7pm", "slot_type": "('method_timer', 'set a warning alarm'), ('date_time', '7pm')", "pred_lf": "[IN:CREATE_ALARM [SL:METHOD_TIMER set a warning alarm ] [SL:DATE_TIME 7pm ] ]", "gold_lf": "[IN:CREATE_ALARM [SL:ALARM_NAME warning ] [SL:DATE_TIME for 7 pm ] ]"}
{"utterance": "Tell me about events going on in Crandon this weekend", "intent": "get_event", "AMR Graph": "(t / tell\n      :ARG1 (m / me)\n      :topic (e / event\n                  :ARG1 (g / go-on\n                             :ARG1 in\n                             :ARG2 Crandon\n                             :time (w / weekend))))", "key_phrase": "events, Crandon, this weekend", "slot_type": "('title_event', 'events'),('location', 'Crandon'),('date_time', 'this weekend')", "pred_lf": "[IN:GET_EVENT [SL:TITLE_EVENT events ] [SL:LOCATION Crandon ] [SL:DATE_TIME this weekend ] ]", "gold_lf": "[IN:GET_EVENT [SL:LOCATION Crandon ] [SL:DATE_TIME this weekend ] ]"}
{"utterance": "make one timer for four minutes and another for 10 minutes", "intent": "create_timer", "AMR Graph": "AMR Graph:\n    - [s1] make-01\n        :arg0 [x1]\n        :arg1 [x2]\n    - [x1] timer\n        :quant 1\n    - [x2] and\n        :op1 [y1]\n        :op2 [z1]\n    - [y1] timer\n        :quant 2\n        :time 4\n    - [z1] timer\n        :quant 3\n        :time 10", "key_phrase": "one timer, four minutes, another timer, 10 minutes", "slot_type": "('timer_name', 'one timer'), ('method_timer', 'four minutes'), ('timer_name', 'another timer'), ('method_timer', '10 minutes')", "pred_lf": "[IN:CREATE_TIMER [SL:TIMER_NAME one timer ] [SL:METHOD_TIMER four minutes ] [SL:TIMER_NAME another timer ] [SL:METHOD_TIMER 10 minutes ] ]", "gold_lf": "[IN:CREATE_TIMER [SL:AMOUNT one ] [SL:METHOD_TIMER timer ] [SL:DATE_TIME for four minutes ] [SL:DATE_TIME for 10 minutes ] ]"}
{"utterance": "How do I prepare spaghetti", "intent": "get_info_recipes", "AMR Graph": "(:TOP (prepare-01 :ARG0 (i) :ARG1 (spaghetti)))", "key_phrase": "prepare spaghetti", "slot_type": "('recipes_dish', 'spaghetti'),('recipes_cooking_method', 'prepare')", "pred_lf": "[IN:GET_INFO_RECIPES [SL:RECIPES_DISH spaghetti ] [SL:RECIPES_COOKING_METHOD prepare ] ]", "gold_lf": "[IN:GET_RECIPES [SL:RECIPES_DISH spaghetti ] ]"}
{"utterance": "mark me as not going to Olympic Peninsula Apple and Cider Festival", "intent": "set_rsvp_no", "AMR Graph": "(c / mark-01 \n      :ARG0 (x / speaker) \n      :ARG1 (g / not \n                :op (+QUANTIFIER \n                           (q / some)) \n                :ARG1 (y / go-01 \n                           :ARG0 x \n                           :ARG1 (p / Peninsula \n                                      :name (n / name \n                                                 :op \"Olympic\")) \n                           :ARG2 (f / festival \n                                      :name (n2 / name \n                                                   :op \"Apple and Cider\")))))", "key_phrase": "speaker, not going, Olympic Peninsula, Apple and Cider Festival", "slot_type": "('user_attendee_event', 'speaker'), ('attendee_event', 'not going'), ('location', 'Olympic Peninsula'), ('title_event', 'Apple and Cider Festival')", "pred_lf": "[IN:SET_RSVP_NO [SL:USER_ATTENDEE_EVENT speaker ] [SL:ATTENDEE_EVENT not going ] [SL:LOCATION Olympic Peninsula ] [SL:TITLE_EVENT Apple and Cider Festival ] ]", "gold_lf": "[IN:SET_RSVP_NO [SL:TITLE_EVENT Olympic Peninsula Apple and Cider Festival ] ]"}
{"utterance": "tell mark to pick up our to go order from olive garden", "intent": "send_message", "AMR Graph": "(t / tell-01\n    :ARG0 (p / person :wiki \"Mark_(given_name)\"\n            :name (n / name :op1 \"Mark\"))\n    :ARG1 (p2 / pick-up-01\n            :ARG0 p\n            :ARG1 (o / order\n                    :mod (t2 / to-go)\n                    :from (r / restaurant :name (n2 / name :op1 \"Olive_Garden\")))))", "key_phrase": "Mark, pick up, to go order, Olive Garden", "slot_type": "('recipient', 'Mark'),('todo', 'pick up'),('recipes_meal', 'to go order'),('location', 'Olive Garden')", "pred_lf": "[IN:SEND_MESSAGE [SL:RECIPIENT Mark ] [SL:TODO pick up ] [SL:RECIPES_MEAL to go order ] [SL:LOCATION Olive Garden ] ]", "gold_lf": "[IN:SEND_MESSAGE [SL:RECIPIENT mark ] [SL:CONTENT_EXACT pick up our to go order from olive garden ] ]"}
{"utterance": "Set my alarm for 21st of May at 5 am.", "intent": "create_alarm", "AMR Graph": "(p / set-01 \n      :ARG0 (m / me)\n      :ARG1 (a / alarm \n             :time (d / date-entity \n                    :year 2021 \n                    :month 05 \n                    :day 21) \n             :quant 5 :unit AM))", "key_phrase": "Set alarm, 21st of May, 5 am", "slot_type": "('todo', 'Set alarm'),('date_time', '21st of May'),('time', '5 am')", "pred_lf": "[IN:CREATE_ALARM [SL:TODO Set alarm ] [SL:DATE_TIME 21st of May ] [SL:TIME 5 am ] ]", "gold_lf": "[IN:CREATE_ALARM [SL:DATE_TIME for 21st of May at 5 am ] ]"}
{"utterance": "call on whatsapp Zachary Adkins", "intent": "create_call", "AMR Graph": "AMR Graph:\n(call\n  :mode imperative\n  :ARG1 (on\n          :ARG1 Zachary Adkins\n          :ARG2 whatsapp)))", "key_phrase": "Zachary Adkins, call, WhatsApp", "slot_type": "('recipient', 'Zachary Adkins'),('contact_method', 'WhatsApp'),('method_recipes', 'call')", "pred_lf": "[IN:CREATE_CALL [SL:RECIPIENT Zachary Adkins ] [SL:CONTACT_METHOD WhatsApp ] [SL:METHOD_RECIPES call ]]", "gold_lf": "[IN:CREATE_CALL [SL:NAME_APP whatsapp ] [SL:CONTACT Zachary Adkins ] ]"}
{"utterance": "Is it below 47 in F at New York today", "intent": "get_weather", "AMR Graph": "(Is it\n      :time (today\n             :location (New York))\n      :location (below\n                 :degree 47\n                 :unit F))", "key_phrase": "below 47 in F, New York, today", "slot_type": "('weather_attribute', 'below 47 in F'),('location', 'New York'),('date_time', 'today')", "pred_lf": "[IN:GET_WEATHER [SL:WEATHER_ATTRIBUTE below 47 in F ] [SL:LOCATION New York ] [SL:DATE_TIME today ] ]", "gold_lf": "[IN:GET_WEATHER [SL:WEATHER_ATTRIBUTE below ] [SL:WEATHER_ATTRIBUTE 47 ] [SL:WEATHER_TEMPERATURE_UNIT F ] [SL:LOCATION New York ] [SL:DATE_TIME today ] ]"}
{"utterance": "Did my Mom send me a message this week?", "intent": "get_message", "AMR Graph": "(c / communicate-01\n      :subject (m / mother\n                  :poss (m2 / me))\n      :object (m3 / message\n                  :time-of-message (w / week\n                                      :name \"this\"))\n      :polarity -))\n\nNote: This AMR represents the sentence as a communication event between the subject (the speaker's mother) and the object (the message) that was sent during this week. The polarity \"-\" indicates that the sentence is a question.", "key_phrase": "Mom, send, me, message, this week, did, question", "slot_type": "('sender', 'Mom'),('method_recipes', 'send'),('recipient', 'me'),('type_content', 'message'),('date_time', 'this week'),('O', 'did'),('type_content', 'question')", "pred_lf": "[IN:GET_MESSAGE [SL:SENDER Mom ] [SL:METH0D_RECIPES send ] [SL:RECIPIENT me ] [SL:TYPE_CONTENT message ] [SL:DATE_TIME this week ] [SL:O did ] [SL:TYPE_CONTENT question ] ]", "gold_lf": "[IN:GET_MESSAGE [SL:SENDER my Mom ] [SL:RECIPIENT me ] [SL:DATE_TIME this week ] ]"}
{"utterance": "What kind of event is Pumpkin Run?", "intent": "get_category_event", "AMR Graph": "(event \n    :name \"Pumpkin Run\"\n    :ARG0 (kind \n              :polarity interrogative))", "key_phrase": "Pumpkin Run, kind of event", "slot_type": "('title_event', 'Pumpkin Run'),('type_relation', 'kind of event')", "pred_lf": "[IN:GET_CATEGORY_EVENT [SL:TITLE_EVENT Pumpkin Run ] [SL:TYPE_RELATION kind of event ] ]", "gold_lf": "[IN:GET_CATEGORY_EVENT [SL:TITLE_EVENT Pumpkin Run ] ]"}
{"utterance": "reset alarm for 7am on Sunday morning", "intent": "update_alarm", "AMR Graph": "(reset-rel :time (date-entity :weekday \"Sunday\" :part-of-day (time-of-day :hours 7 :minutes 0)) :event (alarm-rel :time (date-entity :weekday \"Sunday\" :part-of-day (time-of-day :part-of-day \"morning\"))))", "key_phrase": "reset alarm, 7am, Sunday morning", "slot_type": "('alarm_name', 'reset alarm'), ('date_time', '7am'), ('date_time', 'Sunday morning')", "pred_lf": "[IN:UPDATE_ALARM [SL:ALARM_NAME reset alarm ] [SL:DATE_TIME 7am ] [SL:DATE_TIME Sunday morning ] ]", "gold_lf": "[IN:CREATE_ALARM [SL:DATE_TIME for 7 am on Sunday morning ] ]"}
{"utterance": "Find a recipe for jerk chicken", "intent": "get_recipes", "AMR Graph": "(c / find-01\n    :ARG1 (r / recipe\n              :mod (j / jerk)\n              :mod (c2 / chicken)))", "key_phrase": "recipe, jerk chicken", "slot_type": "('recipes_meal', 'jerk chicken'),('recipes_type', 'recipe')", "pred_lf": "[IN:GET_RECIPES [SL:RECIPES_MEAL jerk chicken ] [SL:RECIPES_TYPE recipe ] ]", "gold_lf": "[IN:GET_RECIPES [SL:RECIPES_DISH jerk chicken ] ]"}
{"utterance": "play destiny's child", "intent": "play_music", "AMR Graph": "(p / play\n      :object (bc / band\n                  :name \"Destiny's Child\"))", "key_phrase": "Destiny's Child", "slot_type": "('music_artist_name', \"Destiny's Child\")", "pred_lf": "[IN:PLAY_MUSIC [SL:MUSIC_ARTIST_NAME Destiny's Child ] ]", "gold_lf": "[IN:PLAY_MUSIC [SL:MUSIC_ARTIST_NAME destiny 's child ] ]"}
{"utterance": "make an alarm for the 5th", "intent": "create_alarm", "AMR Graph": "(c / create-01\n      :ARG0 (y / you)\n      :ARG1 (a / alarm\n            :date (d / date-entity\n                  :month 2\n                  :day 5)))", "key_phrase": "make an alarm, 5th", "slot_type": "('alarm_name', 'make an alarm'),('date_time', 'the 5th')", "pred_lf": "[IN:CREATE_ALARM [SL:ALARM_NAME make an alarm ] [SL:DATE_TIME the 5th ] ]", "gold_lf": "[IN:CREATE_ALARM [SL:DATE_TIME for the 5th ] ]"}
{"utterance": "Set an alarm for Monday at 5pm", "intent": "create_alarm", "AMR Graph": "(set :time (weekday-entity :weekday \"Monday\")\n     :hour 17\n     :minute 00\n     :event (alarm-entity :action \"set\"))", "key_phrase": "Set alarm, Monday, 5pm", "slot_type": "('todo', 'Set alarm'),('date_time', 'Monday at 5pm')", "pred_lf": "[IN:CREATE_ALARM [SL:TODO Set alarm ] [SL:DATE_TIME Monday at 5pm ] ]", "gold_lf": "[IN:CREATE_ALARM [SL:DATE_TIME for Monday at 5 pm ] ]"}
{"utterance": "When did Lisa's employment at Publix finish?", "intent": "get_employment_time", "AMR Graph": "(e / finish-01 \n     :ARG1 (e2 / employment \n             :ARG1 (n / name :op1 \"Lisa\") \n             :ARG2 (o / organization :name \"Publix\")) \n     :time (d / date-entity \n             :year 2021 \n             :quant (q / quarter :quant 2)))", "key_phrase": "Lisa's employment, Publix, finish, 2021, quarter 2", "slot_type": "('job', \"Lisa's employment\"),('location', 'Publix'),('date_time', '2021'),('period', 'quarter 2')", "pred_lf": "[IN:GET_EMPLOYMENT_TIME [SL:JOB Lisa's employment ] [SL:LOCATION Publix ] [SL:DATE_TIME 2021 ] [SL:PERIOD quarter 2 ] ]", "gold_lf": "[IN:GET_EMPLOYMENT_TIME [SL:CONTACT Lisa ] [SL:EMPLOYER Publix ] ]"}
{"utterance": "What's Larry's work address?", "intent": "get_location", "AMR Graph": "(work\n    :name \"Larry\"\n    :address-of \"work\"\n)", "key_phrase": "Larry, work address", "slot_type": "('contact', 'Larry'),('location', 'work address')", "pred_lf": "[IN:GET_LOCATION [SL:CONTACT Larry ] [SL:LOCATION work address ] ]", "gold_lf": "[IN:GET_LOCATION [SL:CONTACT Larry ] ]"}
{"utterance": "Does Rachel live in Avon?", "intent": "get_location", "AMR Graph": "(s / question\n      :polarity -\n      :query (l / live-01\n                  :ARG0 (r / person :name \"Rachel\")\n                  :ARG1 (a / Avon)))", "key_phrase": "Rachel, live, Avon", "slot_type": "('location', 'Avon'),('person_reminded', 'Rachel'),('method_retrieval_reminder', 'live in')", "pred_lf": "[IN:GET_LOCATION [SL:LOCATION Avon ] [SL:PERSON_REMINDED Rachel ] [SL:METHOD_RETRIEVAL_REMINDER live in ] ]", "gold_lf": "[IN:GET_LOCATION [SL:CONTACT Rachel ] [SL:LOCATION Avon ] ]"}
{"utterance": "What method of cooking is better", "intent": "None of the intents in the given intent vocabulary are a good match for this sentence. It may require a different set of intents or a more general intent type such as \"question\".", "AMR Graph": "(b / better-01\n      :mod (c / cooking\n            :domain (m / method))\n      :polarity -))\n\n\nThis AMR graph represents that there is a comparison being made between two methods of cooking and that one of them is considered \"better\". The cooking method is a semantic modifier of the verb \"better\".", "key_phrase": "method of cooking, better", "slot_type": "('recipes_cooking_method', 'method of cooking'),('similarity', 'better')", "pred_lf": "[IN:QUESTION [SL:RECIPES_COOKING_METHOD method of cooking ] [SL:SIMILARITY better ] ]", "gold_lf": "[IN:GET_INFO_RECIPES ]"}
{"utterance": "what is the weather in New York today?", "intent": "get_weather", "AMR Graph": "(e / exist-01 \n      :arg1 (w / weather \n                  :location (c / city :name \"New York\")) \n      :time (t / today))", "key_phrase": "weather, New York, today", "slot_type": "('attribute_event', 'weather'), ('location', 'New York'), ('date_time', 'today')", "pred_lf": "[IN:GET_WEATHER [SL:ATTRIBUTE_EVENT weather ] [SL:LOCATION New York ] [SL:DATE_TIME today ] ]", "gold_lf": "[IN:GET_WEATHER [SL:LOCATION New York ] [SL:DATE_TIME today ] ]"}
{"utterance": "add camille to call", "intent": "create_call", "AMR Graph": "(c / call \n\t:add (p / person:name \"Camille\"))", "key_phrase": "Camille, add to call", "slot_type": "('attendee', 'Camille'),('todo', 'add to call')", "pred_lf": "[IN:CREATE_CALL [SL:ATTENDEE Camille ] [SL:TODO add to call ] ]", "gold_lf": "[IN:UPDATE_CALL [SL:CONTACT_ADDED camille ] ]"}
{"utterance": "How to make gluten free pancakes", "intent": "get_info_recipes", "AMR Graph": "(c / cause-01\n      :ARG0 (h / he)\n      :ARG1 (m / make-01\n            :ARG0 h\n            :ARG1 (p / pancake\n                  :mod (g / gluten-free))))", "key_phrase": "gluten free, make pancakes", "slot_type": "('recipes_diet', 'gluten free'),('recipes_dish', 'pancakes')", "pred_lf": "[IN:GET_INFO_RECIPES [SL:RECIPES_DIET gluten free ] [SL:RECIPES_DISH pancakes ] ]", "gold_lf": "[IN:GET_RECIPES [SL:RECIPES_TYPE gluten free ] [SL:RECIPES_DISH pancakes ] ]"}
{"utterance": "Pause the timer.", "intent": "pause_timer", "AMR Graph": "(p / pause-01\n      :object (t / timer))", "key_phrase": "Pause, the timer", "slot_type": "('method_timer', 'Pause'),('timer_name', 'the timer')", "pred_lf": "[IN:PAUSE_TIMER [SL:METHOD_TIMER Pause ] [SL:TIMER_NAME the timer ] ]", "gold_lf": "[IN:PAUSE_TIMER [SL:METHOD_TIMER timer ] ]"}
{"utterance": "remind rex to set up the meeting time", "intent": "create_reminder", "AMR Graph": "(r / remind\n      :ARG0 (p / person :name \"Rex\")\n      :ARG1 (s / set-up\n              :ARG0 p\n              :ARG1 (t / time\n                      :op1 \"meeting\")))", "key_phrase": "Rex, set up, meeting time", "slot_type": "('todo', 'remind'),('person_reminded', 'Rex'),('content_exact', 'set up'),('title_event', 'meeting time')", "pred_lf": "[IN:CREATE_REMINDER [SL:TODO remind ] [SL:PERSON_REMINDED Rex ] [SL:CONTENT_EXACT set up ] [SL:TITLE_EVENT meeting time ] ]", "gold_lf": "[IN:CREATE_REMINDER [SL:PERSON_REMINDED rex ] [SL:TODO set up the meeting time ] ]"}
{"utterance": "Can I wear sandals today?", "intent": "get_weather", "AMR Graph": "(w / want-01\n  :ARG0 (y / you)\n  :ARG1 (w2 / wear-01\n           :ARG0 y\n           :ARG1 (s / sandals)\n           :time (t / today)))", "key_phrase": "sandals, today", "slot_type": "('weather_attribute', 'sandals'),('date_time', 'today')", "pred_lf": "[IN:GET_WEATHER [SL:WEATHER_ATTRIBUTE sandals ] [SL:DATE_TIME today ] ]", "gold_lf": "[IN:GET_WEATHER [SL:WEATHER_ATTRIBUTE sandals ] [SL:DATE_TIME today ] ]"}
{"utterance": "Add aunties to current call", "intent": "merge_call", "AMR Graph": "(add :action (call :entity current) :entity aunties)", "key_phrase": "aunties, current call", "slot_type": "('attendee', 'aunties'), ('group', 'current call')", "pred_lf": "[IN:MERGE_CALL  [SL:ATTENDEE aunties ]  [SL:GROUP current call ] ]", "gold_lf": "[IN:UPDATE_CALL [SL:CONTACT_ADDED aunties ] ]"}
{"utterance": "where will american federal aid be sent to", "intent": "question_news", "AMR Graph": "(amr\n    :root (send\n              :ARG0 (aid\n                        :mod (federal\n                                 :name (american)))\n              :ARG1 (place\n                        :name (where))))\n                        \nNote: The AMR representation may vary depending on the annotator's interpretation of the sentence. The above representation is one possible representation.", "key_phrase": "American federal aid, be sent, where", "slot_type": "('location', 'American federal aid'),('method_retrieval_reminder', 'be sent'),('attribute_event', 'where')", "pred_lf": "[IN:QUESTION_NEWS [SL:LOCATION American federal aid ] [SL:METHOD_RETRIEVAL_REMINDER be sent ] [SL:ATTRIBUTE_EVENT where ] ]", "gold_lf": "[IN:QUESTION_NEWS [SL:NEWS_TOPIC where will american federal aid be sent to ] ]"}
{"utterance": "get me messages from Angela", "intent": "get_message_contact", "AMR Graph": "(c / communicate \n  :communicator (p / person :name \"me\")\n  :message (m / message \n             :topic (p2 / person :name \"Angela\")))", "key_phrase": "me, messages, Angela", "slot_type": "('recipient', 'me'),('type_content', 'messages'),('contact', 'Angela')", "pred_lf": "[IN:GET_MESSAGE_CONTACT [SL:RECIPIENT me ] [SL:TYPE_CONTENT messages ] [SL:CONTACT Angela ] ]", "gold_lf": "[IN:GET_MESSAGE [SL:SENDER Angela ] ]"}
{"utterance": "Temperature this weekend new york fahrenheit", "intent": "get_weather", "AMR Graph": "(temp-event :time (weekend :time-of (temperature :location (new-york)) :quant 1) :unit fahrenheit)", "key_phrase": "Temperature, this weekend, New York, Fahrenheit.", "slot_type": "('weather_attribute', 'Temperature'), ('date_time', 'this weekend'), ('location', 'New York'), ('weather_temperature_unit', 'Fahrenheit')", "pred_lf": "[IN:GET_WEATHER [SL:WEATHER_ATTRIBUTE Temperature ] [SL:DATE_TIME this weekend ] [SL:LOCATION New York ] [SL:WEATHER_TEMPERATURE_UNIT Fahrenheit ] ]", "gold_lf": "[IN:GET_WEATHER [SL:DATE_TIME this weekend ] [SL:LOCATION new york ] [SL:WEATHER_TEMPERATURE_UNIT fahrenheit ] ]"}
{"utterance": "How many kids got arrested", "intent": "question_news", "AMR Graph": "<  [ARG0: how many kids] [V: get] [ARG1: arrest-01]  >", "key_phrase": "kids, arrested", "slot_type": "('amount', 'How many kids'),('type_content', 'arrested')", "pred_lf": "[IN:QUESTION_NEWS [SL:AMOUNT How many kids ] [SL:TYPE_CONTENT arrested ] ]", "gold_lf": "[IN:QUESTION_NEWS [SL:NEWS_TOPIC kids got arrested ] ]"}
{"utterance": "Show new messages", "intent": "get_message", "AMR Graph": "(c / command\n      :action (s / show\n                  :object (m / message\n                              :status new)))", "key_phrase": "new messages, show", "slot_type": "('type_content', 'new messages'), ('method_retrieval_reminder', 'show')", "pred_lf": "[IN:GET_MESSAGE [SL:TYPE_CONTENT new messages ] [SL:METHOD_RETRIEVAL_REMINDER show ] ]", "gold_lf": "[IN:GET_MESSAGE ]"}
{"utterance": "Remind me to take dinner to Lori on Friday.", "intent": "create_reminder", "AMR Graph": "(d / remind-01\n      :ARG0 (m / me)\n      :ARG1 (t / take-01\n                  :ARG0 m\n                  :ARG1 (d2 / dinner)\n                  :ARG2 (l / name\n                             :op1 \"Lori\"))\n      :time (fr / on\n                  :op1 (d3 / date-entity\n                            :year 2021\n                            :month 11\n                            :day 05)))", "key_phrase": "me, take dinner, Lori, Friday", "slot_type": "('user_attendee_event', 'me'),('todo', 'take dinner'),('contact', 'Lori'),('date_time', 'on Friday')", "pred_lf": "[IN:CREATE_REMINDER [SL:USER_ATTENDEE_EVENT me ] [SL:TODO take dinner ] [SL:CONTACT Lori ] [SL:DATE_TIME on Friday ] ]", "gold_lf": "[IN:CREATE_REMINDER [SL:PERSON_REMINDED me ] [SL:TODO take dinner to Lori ] [SL:DATE_TIME on Friday ] ]"}
{"utterance": "Show my spa reminders with my mom next month.", "intent": "get_reminder", "AMR Graph": "(show :arg0 (reminders :mod (spa :poss my)) :arg1 (next-month :mod (with :op1 (person :poss my) :op2 mom))))", "key_phrase": "spa reminders, my mom, next month", "slot_type": "('todo', 'spa reminders'),('attendee', 'my mom'),('date_time', 'next month')", "pred_lf": "[IN:GET_REMINDER [SL:TODO spa reminders ] [SL:ATTENDEE my mom ] [SL:DATE_TIME next month ] ]", "gold_lf": "[IN:GET_REMINDER [SL:METHOD_RETRIEVAL_REMINDER Show ] [SL:PERSON_REMINDED my ] [SL:TODO spa ] [SL:TODO with my mom ] [SL:DATE_TIME next month ] ]"}
{"utterance": "Michigan crime reports", "intent": "None - the sentence does not match any of the intent types in the given vocabulary.", "AMR Graph": "(\u03bbx. CrimeReport (x, Michigan))", "key_phrase": "Michigan, crime reports", "slot_type": "('location', 'Michigan'), ('news_topic', 'crime reports')", "pred_lf": "[IN:NONE]", "gold_lf": "[IN:GET_STORIES_NEWS [SL:NEWS_TOPIC Michigan crime ] [SL:NEWS_TYPE reports ] ]"}
{"utterance": "What's the biggest story today?", "intent": "get_details_news", "AMR Graph": "(d / date-entity\n      :name (n / name :op \"today\"))\n    (s / story\n      :degree most\n      :location d)", "key_phrase": "biggest story, today", "slot_type": "('news_type', 'biggest story'),('date_time', 'today')", "pred_lf": "[IN:GET_DETAILS_NEWS [SL:NEWS_TYPE biggest story ] [SL:DATE_TIME today ] ]", "gold_lf": "[IN:GET_STORIES_NEWS [SL:NEWS_REFERENCE biggest ] [SL:NEWS_TYPE story ] [SL:DATE_TIME today ] ]"}
{"utterance": "please record a video message for Gina and Sparks", "intent": "create_call", "AMR Graph": "- [TOP]\n    - :ARG0 (you)\n    - :ARG1 (message)\n        - :ARG0 (video)\n        - :ARG1 (Gina)\n        - :ARG2 (Sparks)", "key_phrase": "you, video message, Gina, Sparks", "slot_type": "('recipient', 'Gina'),('recipient', 'Sparks'),('type_content', 'video message'),('user_attendee_event', 'you')", "pred_lf": "[IN:CREATE_CALL [SL:RECIPIENT Gina ] [SL:RECIPIENT Sparks ] [SL:TYPE_CONTENT video message ] [SL:USER_ATTENDEE_EVENT you ] ]", "gold_lf": "[IN:SEND_MESSAGE [SL:TYPE_CONTENT video ] [SL:RECIPIENT Gina ] [SL:RECIPIENT Sparks ] ]"}
{"utterance": "What is the temperature going to be today?", "intent": "get_weather", "AMR Graph": "(amr-unknown :query (temperature-estimate :op1 today))", "key_phrase": "temperature, today", "slot_type": "('weather_temperature_unit', 'temperature'), ('date_time', 'today')", "pred_lf": "[IN:GET_WEATHER [SL:WEATHER_TEMPERATURE_UNIT temperature ] [SL:DATE_TIME today ] ]", "gold_lf": "[IN:GET_WEATHER [SL:DATE_TIME today ] ]"}
{"utterance": "Do you have any reminders for me?", "intent": "get_reminder", "AMR Graph": "(do\n   :arg0 (you)\n   :arg1 (have\n           :arg0 (reminders)\n           :arg1 (me)))", "key_phrase": "reminders for me", "slot_type": "('method_retrieval_reminder', 'reminders for me'),('recipient', 'me')", "pred_lf": "[IN:GET_REMINDER [SL:METHOD_RETRIEVAL_REMINDER reminders for me ] [SL:RECIPIENT me ] ]", "gold_lf": "[IN:GET_REMINDER [SL:PERSON_REMINDED me ] ]"}
{"utterance": "I have a video message I need sent to my dad.", "intent": "send_message", "AMR Graph": "(d / declare-01\n      :subject (i / I)\n      :object (n / need-01\n                  :action (s / send-01\n                               :agent i\n                               :theme (m / message\n                                          :mod (v / video))\n                               :goal (f / father\n                                          :poss i))))", "key_phrase": "I, video message, need sent, dad", "slot_type": "('type_content', 'video message'),('method_recipes', 'sent'),('recipient', 'dad')", "pred_lf": "[IN:SEND_MESSAGE [SL:TYPE_CONTENT video message ] [SL:METHOS_RECIPES sent ] [SL:RECIPIENT dad ] ]", "gold_lf": "[IN:SEND_MESSAGE [SL:TYPE_CONTENT video ] [SL:RECIPIENT my dad ] ]"}
{"utterance": "Any celebrity news stories?", "intent": "get_stories_news", "AMR Graph": "(c / celebrity_news_story  \n     :polarity -  \n     :domain (a / ask-01  \n               :arg0 (p / person  \n                         :quant (e / any))) )", "key_phrase": "celebrity news stories, ask any person", "slot_type": "('news_topic', 'celebrity news stories'),('content_exact', 'ask any person')", "pred_lf": "[IN:GET_STORIES_NEWS [SL:NEWS_TOPIC celebrity news stories ] [SL:CONTENT_EXACT ask any person ] ]", "gold_lf": "[IN:GET_STORIES_NEWS [SL:NEWS_CATEGORY celebrity ] [SL:NEWS_TYPE news stories ] ]"}
{"utterance": "put up my blink timer", "intent": "create_timer", "AMR Graph": "AMR Graph:\n[pred \"put_up\"\n :ARG0 (i / \"I\")\n :ARG1 (b / \"blink_timer\")]", "key_phrase": "my blink timer", "slot_type": "('timer_name', 'my blink timer')", "pred_lf": "[IN:CREATE_TIMER [SL:TIMER_NAME my blink timer ] ]", "gold_lf": "[IN:GET_TIMER [SL:TIMER_NAME blink ] [SL:METHOD_TIMER timer ] ]"}
{"utterance": "how do you cook steak in a pan", "intent": "get_info_recipes", "AMR Graph": "( d / do-2 \n      :ARG0 ( y / you )\n      :ARG1 ( c / cook-01 \n                  :ARG0 y \n                  :ARG1 ( s / steak )\n                  :ARG2 ( p / pan ) ) )", "key_phrase": "cook steak, in a pan", "slot_type": "('recipes_cooking_method', 'cook steak'),('location', 'in a pan')", "pred_lf": "[IN:GET_INFO_RECIPES [SL:RECIPES_COOKING_METHOD cook steak ] [SL:LOCATION in a pan ]]", "gold_lf": "[IN:GET_INFO_RECIPES [SL:RECIPES_INCLUDED_INGREDIENT steak ] ]"}
{"utterance": "how long should i cook ribs", "intent": "get_info_recipes", "AMR Graph": "(c / cook-01\n    :ARG0 (i / I)\n    :ARG1 (r / rib\n            :quant (l / long)\n            :domain-quant (s / should)))", "key_phrase": "I, ribs, how long, should cook", "slot_type": "('recipes_dish', 'ribs'), ('recipes_cooking_method', 'cook'), ('recipes_time_preparation', 'how long'), ('O', 'I')", "pred_lf": "[IN:GET_INFO_RECIPES [SL:RECIPES_DISH ribs ] [SL:RECIPES_COOKING_METHOD cook ] [SL:RECIPES_TIME_PREPARATION how long ] [SL:O I ] ]", "gold_lf": "[IN:GET_INFO_RECIPES [SL:RECIPES_ATTRIBUTE how long ] [SL:RECIPES_INCLUDED_INGREDIENT ribs ] ]"}
{"utterance": "End my call", "intent": "end_call", "AMR Graph": "(c / command\n      :type (c2 / communicate)\n      :content (m / message\n                  :sender (s / speaker)\n                  :receiver (l / listener)))", "key_phrase": "End my call", "slot_type": "('method_recipes', 'End my call')", "pred_lf": "[IN:END_CALL [SL:METHOD_RECIPES End my call ] ]", "gold_lf": "[IN:END_CALL ]"}
{"utterance": "Savannah Georgia events for next weekend", "intent": "get_event", "AMR Graph": "(e / event :name \"Savannah Georgia events\" :time (t / time :opX-of (n / next- weekend)))", "key_phrase": "Savannah Georgia events, next weekend", "slot_type": "('location', 'Savannah Georgia'),('date_time', 'next weekend')", "pred_lf": "[IN:GET_EVENT [SL:LOCATION Savannah Georgia ] [SL:DATE_TIME next weekend ] ]", "gold_lf": "[IN:GET_EVENT [SL:LOCATION Savannah Georgia ] [SL:DATE_TIME for next weekend ] ]"}
{"utterance": "what's the temperature supposed to be tomorrow?", "intent": "get_weather", "AMR Graph": "(d / day \n      :op1 (t / tomorrow \n            :time (s / suppose-01 \n                        :ARG1 (t2 / temperature))) \n      :ARG0 (w / what))", "key_phrase": "temperature, tomorrow", "slot_type": "('weather_temperature_unit', 'temperature'),('date_time', 'tomorrow')", "pred_lf": "[IN:GET_WEATHER [SL:WEATHER_TEMPERATURE_UNIT temperature ] [SL:DATE_TIME tomorrow ] ]", "gold_lf": "[IN:GET_WEATHER [SL:DATE_TIME tomorrow ] ]"}
{"utterance": "Did someone just graduate from CU Denver?", "intent": "get_education_degree", "AMR Graph": "(did\n  :ARG0 (someone)\n  :ARG1 (graduate\n          :ARG0 someone\n          :time (just)\n          :ARG1 (univ\n                  :name \"CU Denver\")))", "key_phrase": "someone, graduate, CU Denver", "slot_type": "('group', 'someone'),('life_event', 'graduate'),('location', 'CU Denver')", "pred_lf": "[IN:GET_EDUCATION_DEGREE [SL:GROUP someone ] [SL:LIFE_EVENT graduate ] [SL:LOCATION CU Denver ] ]", "gold_lf": "[IN:GET_CONTACT [SL:SCHOOL CU Denver ] ]"}
{"utterance": "which whole food karen used to work at", "intent": "get_employer", "AMR Graph": "AMR Graph: (u / use-01\n                :agent (p / person :name \"Karen\")\n                :theme (w / whole-food\n                        :quant (w2 / which)\n                        :location (w3 / work-01)))\n\nExplanation: This AMR represents that Karen used to work at a whole food store or restaurant. The main predicate is \"use-01\" which is used to express the action of working. The subject of this predicate is a person named \"Karen\" represented by the node \"p\". The object of this predicate is a whole food store/restaurant. The \"whole-food\" node is modified by the quantifier \"which\" indicated by \"w2\". And the location of the store/restaurant is expressed by \"work-01\" represented by \"w3\".", "key_phrase": "Karen, whole food store/restaurant, used to work at", "slot_type": "('recipes_source', 'whole food store/restaurant'),('person_reminded', 'Karen'),('method_recipes', 'used to work at')", "pred_lf": "[IN:GET_EMPLOYER [SL:RECIPES_SOURCE whole food store/restaurant ] [SL:PERSON_REMINDED Karen ] [SL:METHOD_RECIPES used to work at ] ]", "gold_lf": "[IN:GET_EMPLOYER [SL:EMPLOYER whole food ] [SL:CONTACT karen ] ]"}
{"utterance": "Healthy dinner recipes", "intent": "get_info_recipes", "AMR Graph": "(c / dinner  \n     :mod (h / healthy)  \n     :prep-for (r / recipe))", "key_phrase": "Healthy, dinner recipes", "slot_type": "('recipes_diet', 'Healthy'), ('recipes_meal', 'dinner'),('recipes_type', 'recipes')", "pred_lf": "[IN:GET_INFO_RECIPES [SL:RECIPES_DIET Healthy ] [SL:RECIPES_MEAL dinner ] [SL:RECIPES_TYPE recipes ] ]", "gold_lf": "[IN:GET_RECIPES [SL:RECIPES_ATTRIBUTE Healthy ] [SL:RECIPES_MEAL dinner ] ]"}
{"utterance": "Message Jason and ask him to send a photo of his damaged car.", "intent": "send_message", "AMR Graph": "(d / message\n      :content (a / ask\n                  :arg0 (p / person :wiki \"Jason\")\n                  :arg1 (s / send\n                          :arg0 s\n                          :arg1 (p2 / photo\n                                  :mod (d2 / damage\n                                          :mod (c / car\n                                                  :poss p))))))", "key_phrase": "Jason, send, photo, damaged car", "slot_type": "('recipient', 'Jason'),('method_retrieval_reminder', 'send'),('type_content', 'photo'),('content_exact', 'damaged car')", "pred_lf": "[IN:SEND_MESSAGE [SL:RECIPIENT Jason ] [SL:METHOD_RETRIEVAL_REMINDER send ] [SL:TYPE_CONTENT photo ] [SL:CONTENT_EXACT damaged car ] ]", "gold_lf": "[IN:SEND_MESSAGE [SL:RECIPIENT Jason ] [SL:CONTENT_EXACT send a photo of his damaged car ] ]"}
{"utterance": "What temp for the cherry pies", "intent": "get_info_recipes", "AMR Graph": "AMR Graph: (d / ask-01\n             :what (i / ingredient :name \"cherry pies\")\n             :temperature-of (i2 / pie)))", "key_phrase": "cherry pies, temperature", "slot_type": "('recipes_dish', 'cherry pies'),('weather_temperature_unit', 'temperature')", "pred_lf": "[IN:GET_INFO_RECIPES [SL:RECIPES_DISH cherry pies ] [SL:WEATHER_TEMPERATURE_UNIT temperature ] ]", "gold_lf": "[IN:GET_INFO_RECIPES [SL:RECIPES_ATTRIBUTE temp ] [SL:RECIPES_DISH cherry pies ] ]"}
{"utterance": "Add more minutes to my timer.", "intent": "add_time_timer", "AMR Graph": "(add-event \n    :action (set-timer \n                :timer (my-timer) \n                :time (+ (current-time) more-minutes))))", "key_phrase": "my timer, add more minutes", "slot_type": "('method_timer', 'Add more minutes'),('timer_name', 'my timer')", "pred_lf": "[IN:ADD_TIME_TIMER [SL:METHOD_TIMER Add more minutes ] [SL:TIMER_NAME my timer ] ]", "gold_lf": "[IN:ADD_TIME_TIMER [SL:DATE_TIME minutes ] [SL:METHOD_TIMER timer ] ]"}
{"utterance": "What is the hottest that it will get all week?", "intent": "get_weather", "AMR Graph": "[ TOP: h1\n  - WHQ: what\n    - CAT: individual\n    - REL: unknown\n  - S: h2\n    - COP: be\n    - ARG0: it\n    - ARG1: h3\n  - TWHEN: all-week\n    - OP1: most\n      - REL: unknown\n    - OP2: hot\n      - ARG1: h3\n        - PNC: degree ]\n        \nExplanation: \n\n- The TOP node represents the entire sentence.\n- The WHQ node indicates a wh-question, \"what\".\n- The CAT node specifies that the wh-question asks about an individual.\n- The S node represents the main clause of the sentence.\n- The COP node indicates the form of the question and \"it\" is assigned as the ARG0.\n- The ARG1 node represents the hottest temperature, which is assigned as \"h3\".\n- The TWHEN node indicates the time span of the question, which is \"all week\".\n- The OP1 node assigns the concept \"most\" to the TWHEN node.\n- The OP2 node specifies \"hot\" as the quality of the temperature, and ARG1 points to the temperature concept \"h3\". \n- The PNC node specifies the unit of measurement for \"hot\", which is \"degree\".", "key_phrase": "hottest temperature, all week.", "slot_type": "('weather_attribute', 'hottest temperature'), ('date_time', 'all week')", "pred_lf": "[IN:GET_WEATHER [SL:WEATHER_ATTRIBUTE hottest temperature ] [SL:DATE_TIME all week ] ]", "gold_lf": "[IN:GET_WEATHER [SL:WEATHER_ATTRIBUTE hottest ] [SL:DATE_TIME all week ] ]"}
{"utterance": "set alarm for 7:30 am", "intent": "create_alarm", "AMR Graph": "(set :event (alarm\n         :time (time :hour 7\n                     :minute 30)\n         :am-pm \"am\"))", "key_phrase": "set alarm, 7:30 am", "slot_type": "('method_timer', 'set alarm'), ('date_time', '7:30 am')", "pred_lf": "[IN:CREATE_ALARM [SL:METHOD_TIMER set alarm ] [SL:DATE_TIME 7:30 am ] ]", "gold_lf": "[IN:CREATE_ALARM [SL:DATE_TIME for 7 : 30 am ] ]"}
{"utterance": "How much is it going to rain tomorrow?", "intent": "get_weather", "AMR Graph": "(d / degree\n      :quant  (a / amount\n                    :op1 \"it\"\n                    :op2 (n / now))\n      :polarity - \n      :op1 (r / rain\n                :time (t / tomorrow)))", "key_phrase": "much,rain,tomorrow.", "slot_type": "('amount', 'much'),('weather_attribute', 'rain'),('date_time', 'tomorrow')", "pred_lf": "[IN:GET_WEATHER [SL:WEATHER_ATTRIBUTE rain ] [SL:AMOUNT much ] [SL:DATE_TIME tomorrow ] ]", "gold_lf": "[IN:GET_WEATHER [SL:WEATHER_ATTRIBUTE rain ] [SL:DATE_TIME tomorrow ] ]"}
{"utterance": "start music on pandora", "intent": "play_music", "AMR Graph": "<start-01>\n  :action \"music\"\n  :medium \"pandora\"", "key_phrase": "start music, pandora", "slot_type": "('method_music', 'start music'),('music_provider_name', 'pandora')", "pred_lf": "[IN:PLAY_MUSIC [SL:METHOD_MUSIC start music ] [SL:MUSIC_PROVIDER_NAME pandora ] ]", "gold_lf": "[IN:PLAY_MUSIC [SL:MUSIC_TYPE music ] [SL:MUSIC_PROVIDER_NAME pandora ] ]"}
{"utterance": "when are the next elections", "intent": "get_event", "AMR Graph": "AMR Graph: \n    [when_1]\n        :time \"next\"\n        :op1 ((election_n_2))\n    [(election_n_2)]\n        :quant \"the\"\n        :time \"future\"\n        :mod \"election\"]", "key_phrase": "next elections", "slot_type": "('title_event', 'next elections')", "pred_lf": "[IN:GET_EVENT [SL:TITLE_EVENT next elections ] ]", "gold_lf": "[IN:QUESTION_NEWS [SL:NEWS_REFERENCE next ] [SL:NEWS_TOPIC elections ] ]"}
{"utterance": "Find me the latest Linkin Park album", "intent": "get_track_info_music", "AMR Graph": "(c / choose-01 \n     :ARG0 (i / I) \n     :ARG1 (a / album \n               :mod (l / Linkin_Park) \n               :mode last) \n     :ARG2 (f / find \n               :ARG0 i \n               :ARG1 a))", "key_phrase": "me, latest, Linkin Park, album, find", "slot_type": "('recipient', 'me'), ('music_album_modifier', 'latest'), ('music_artist_name', 'Linkin Park'), ('music_album_title', 'album'), ('method_retrieval_reminder', 'find')", "pred_lf": "[IN:GET_TRACK_INFO_MUSIC [SL:RECIPIENT me ] [SL:MUSIC_ALBUM_MODIFIER latest ] [SL:MUSIC_ARTIST_NAME Linkin Park ] [SL:MUSIC_ALBUM_TITLE album ] [SL:METHOD_RETRIEVAL_REMINDER find ]]", "gold_lf": "[IN:PLAY_MUSIC [SL:MUSIC_ARTIST_NAME Linkin Park ] [SL:MUSIC_TYPE album ] ]"}
{"utterance": "Easy salad recipes", "intent": "get_info_recipes", "AMR Graph": "AMR Graph:\n      - :purpose (e)\n      - :domain (r / recipe)\n      - :easy (r)\n      - :salad (r)", "key_phrase": "Easy salad recipes, salad recipes", "slot_type": "('recipes_meal', 'salad recipes')", "pred_lf": "[IN:GET_INFO_RECIPES [SL:RECIPES_MEAL salad recipes ] ]", "gold_lf": "[IN:GET_RECIPES [SL:RECIPES_ATTRIBUTE Easy ] [SL:RECIPES_DISH salad ] ]"}
{"utterance": "call India Cortez and Vivian Hamilton", "intent": "create_call", "AMR Graph": "(call :arg0 (India) :arg1 (named-entity :op1 \"Cortez\" :op2 \"Vivian Hamilton\"))", "key_phrase": "India, Cortez, Vivian Hamilton", "slot_type": "('location', 'India'), ('attendee', 'Cortez'), ('attendee', 'Vivian Hamilton')", "pred_lf": "[IN:CREATE_CALL [SL:LOCATION India ] [SL:ATTENDEE Cortez ] [SL:ATTENDEE Vivian Hamilton ] ]", "gold_lf": "[IN:CREATE_CALL [SL:CONTACT India Cortez ] [SL:CONTACT Vivian Hamilton ] ]"}
{"utterance": "Where does Paula Carlton work?", "intent": "get_employer", "AMR Graph": "(work :ARG1 (person :name \"Paula Carlton\") :location (place :wiki \"Workplace\"))", "key_phrase": "Paula Carlton, work location", "slot_type": "('job', 'Paula Carlton'),('location', 'work location')", "pred_lf": "[IN:GET_EMPLOYER [SL:JOB Paula Carlton ] [SL:LOCATION work location ] ]", "gold_lf": "[IN:GET_EMPLOYER [SL:CONTACT Paula Carlton ] ]"}
{"utterance": "Will there be a lot of rain this weekend?", "intent": "get_weather", "AMR Graph": "(will \n   :ARG1 (be \n            :ARG1 (lot :opX-of rain)\n            :ARG2 (weekend)))", "key_phrase": "rain, this weekend, lot of", "slot_type": "('weather_attribute', 'rain'),('date_time', 'this weekend'),('amount', 'lot of')", "pred_lf": "[IN:GET_WEATHER [SL:WEATHER_ATTRIBUTE rain ] [SL:DATE_TIME this weekend ] [SL:AMOUNT lot of ] ]", "gold_lf": "[IN:GET_WEATHER [SL:WEATHER_ATTRIBUTE rain ] [SL:DATE_TIME this weekend ] ]"}
{"utterance": "set an alarm for one hour", "intent": "create_alarm", "AMR Graph": "(set-01\n        :ARG0 (alarm-02\n                    :ARG0 (you))\n        :ARG1 (measure-01\n                    :quantity (number-01\n                                    :value 1\n                                    :unit (hour :scale 1))))", "key_phrase": "set an alarm, one hour", "slot_type": "('method_timer', 'set an alarm'),('period', 'one hour')", "pred_lf": "[IN:CREATE_ALARM [SL:METHOD_TIMER set an alarm ] [SL:PERIOD one hour ] ]", "gold_lf": "[IN:CREATE_ALARM [SL:DATE_TIME for one hour ] ]"}
{"utterance": "Give me news regarding the Senate Russia hearings.", "intent": "get_details_news", "AMR Graph": "(c / contact\n      :medium (p / phone)\n      :information (n / news\n                      :topic (h / hearing\n                                :organization (s / senate)\n                                :country (r / Russia))))", "key_phrase": "Senate Russia hearings, news, give me", "slot_type": "('news_topic', 'Senate Russia hearings'),('type_content', 'news'),('user_attendee_event', 'me')", "pred_lf": "[IN:GET_DETAILS_NEWS [SL:NEWS_TOPIC Senate Russia hearings ] [SL:TYPE_CONTENT news ] [SL:USER_ATTENDEE_EVENT me ] ]", "gold_lf": "[IN:GET_STORIES_NEWS [SL:NEWS_TYPE news ] [SL:NEWS_TOPIC Senate Russia hearings ] ]"}
{"utterance": "Is there lightning reported in the current thunderstorm?", "intent": "get_weather", "AMR Graph": "(c / report-01\n      :ARG1 (l / lightning)\n      :location-of (s / storm\n                        :mod (c2 / current)))", "key_phrase": "lightning, reported, current thunderstorm", "slot_type": "('weather_attribute', 'lightning'),('type_content', 'reported'),('location', 'current thunderstorm')", "pred_lf": "[IN:GET_WEATHER [SL:WEATHER_ATTRIBUTE lightning ] [SL:TYPE_CONTENT reported ] [SL:LOCATION current thunderstorm ] ]", "gold_lf": "[IN:GET_WEATHER [SL:WEATHER_ATTRIBUTE lightning ] [SL:WEATHER_ATTRIBUTE thunderstorm ] ]"}
{"utterance": "Ask Ryan if he wants to go to an FSU football game this fall.", "intent": "get_attendee_event", "AMR Graph": "(ask\n  :agent (person :name \"Ryan\")\n  :recipient (event\n                :action (want)\n                :patient (event\n                             :action (go-to)\n                             :patient (event\n                                          :instance-of football-game\n                                          :time (season :name \"fall\")\n                                          :location (univ :name \"FSU\")))))", "key_phrase": "Ryan, wants to go, FSU football game, fall.", "slot_type": "('attendee', 'Ryan'),('content_exact', 'wants to go'),('location', 'FSU football game'),('date_time', 'fall')", "pred_lf": "[IN:GET_ATTENDEE_EVENT [SL:ATTENDEE Ryan ] [SL:CONTENT_EXACT wants to go ] [SL:LOCATION FSU football game ] [SL:DATE_TIME fall ] ]", "gold_lf": "[IN:SEND_MESSAGE [SL:RECIPIENT Ryan ] [SL:CONTENT_EXACT he wants to go to an FSU football game this fall ] ]"}
{"utterance": "Cancel my reminder for juice.", "intent": "delete_reminder", "AMR Graph": "(c / cancel \n      :ARG0 (m / me)\n      :ARG1 (r / reminder \n                :ARG0 m\n                :topic-of (j / juice)))", "key_phrase": "Cancel, reminder, juice", "slot_type": "('method_retrieval_reminder', 'Cancel'), ('todo', 'reminder'), ('recipes_included_ingredient', 'juice')", "pred_lf": "[IN:DELETE_REMINDER [SL:METHOD_RETRIEVAL_REMINDER Cancel ] [SL:TODO reminder ] [SL:RECIPES_INCLUDED_INGREDIENT juice ] ]", "gold_lf": "[IN:DELETE_REMINDER [SL:PERSON_REMINDED my ] [SL:TODO juice ] ]"}
{"utterance": "how to make pancakes from scratch", "intent": "get_info_recipes", "AMR Graph": "(c / compose-91\n      :op1 (m / make-76\n                  :ARG0 (p / pancakes)\n                  :manner (s / scratch-92))\n      :op2 (f / from\n                  :ARG1 (m2 / mix-22\n                              :ARG0 (i / ingredient)\n                              :ARG1 (s2 / scratch-92))))", "key_phrase": "pancakes, make from scratch, mix ingredients", "slot_type": "('recipes_dish', 'pancakes'), ('recipes_cooking_method', 'make from scratch'), ('recipes_attribute', 'mix ingredients')", "pred_lf": "[IN:GET_INFO_RECIPES [SL:RECIPES_DISH pancakes ] [SL:RECIPES_COOKING_METHOD make from scratch ] [SL:RECIPES_ATTRIBUTE mix ingredients ] ]", "gold_lf": "[IN:GET_RECIPES [SL:RECIPES_DISH pancakes ] [SL:RECIPES_COOKING_METHOD from scratch ] ]"}
{"utterance": "delete the wedding reminder for sunday", "intent": "delete_reminder", "AMR Graph": "(d / delete\n   :ARG1 (w / wedding-reminder\n             :mod (f / for\n                    :time (d2 / date-entity :weekday (s / sunday))))))", "key_phrase": "delete, wedding reminder, Sunday", "slot_type": "('method_retrieval_reminder', 'delete'),('todo', 'wedding reminder'),('date_time', 'Sunday')", "pred_lf": "[IN:DELETE_REMINDER [SL:METHOD_RETRIEVAL_REMINDER delete ] [SL:TODO wedding reminder ] [SL:DATE_TIME Sunday ] ]", "gold_lf": "[IN:DELETE_REMINDER [SL:TODO wedding ] [SL:DATE_TIME for sunday ] ]"}
{"utterance": "show me who is available please", "intent": "get_availability", "AMR Graph": "- [TOP]\n  - :request\n    - :show\n      - :person\n        - :available\n    - :please", "key_phrase": "show, me, available", "slot_type": "('todo', 'show'),('user_attendee_event', 'me'),('attendee_event', 'available')", "pred_lf": "[IN:GET_AVAILABILITY [SL:TODO show ] [SL:USER_ATTENDEE_EVENT me ] [SL:ATTENDEE_EVENT available ] ]", "gold_lf": "[IN:GET_AVAILABILITY ]"}
{"utterance": "Turn on the radio please", "intent": "play_music", "AMR Graph": "(s / turn-01\n   :ARG0 (y / you)\n   :ARG1 (r / radio)\n   :mode imperative)", "key_phrase": "Turn on, radio,please", "slot_type": "('O', 'Turn on'),('music_radio_id', 'radio'),('content_exact', 'please')", "pred_lf": "[IN:PLAY_MUSIC [SL:O Turn on ] [SL:MUSIC_RADIO_ID radio ] [SL:CONTENT_EXACT please ] ]", "gold_lf": "[IN:PLAY_MUSIC [SL:MUSIC_TYPE radio ] ]"}
{"utterance": "let's start recording a video message for Nobuko Falconeri", "intent": "create_call", "AMR Graph": "(start\n      :ARG0 (pronoun \n              :person i)\n      :ARG1 (record\n              :mode video\n              :ARG0 (pronoun \n                      :person i)\n              :ARG1 (message \n                      :topic (name \n                                :op1 \"Nobuko Falconeri\"))))", "key_phrase": "start recording, video message, Nobuko Falconeri", "slot_type": "('method_recipes', 'start recording'),('type_content', 'video message'),('recipient', 'Nobuko Falconeri')", "pred_lf": "[IN:CREATE_CALL [SL:METHOD_RECIPES start recording ] [SL:TYPE_CONTENT video message ] [SL:RECIPIENT Nobuko Falconeri ] ]", "gold_lf": "[IN:SEND_MESSAGE [SL:TYPE_CONTENT video ] [SL:RECIPIENT Nobuko Falconeri ] ]"}
{"utterance": "Play Eminem's newest hit", "intent": "play_music", "AMR Graph": "(play: event\n      :arg0 (person :wiki \"Eminem\")\n      :arg1 (music \n             :mod (superlative :polarity - \n                               :mode newest) \n             :name \"hit\"))", "key_phrase": "Eminem, newest hit", "slot_type": "('music_artist_name', 'Eminem'),('music_track_title', \"newest hit\")", "pred_lf": "[IN:PLAY_MUSIC [SL:MUSIC_ARTIST_NAME Eminem ] [SL:MUSIC_TRACK_TITLE newest hit ] ]", "gold_lf": "[IN:PLAY_MUSIC [SL:MUSIC_ARTIST_NAME Eminem ] [SL:MUSIC_TYPE hit ] ]"}
{"utterance": "Message Riley to say I am going to be late", "intent": "send_message", "AMR Graph": "(c / communicate-01 \n      :medium (t / text)\n      :sender (p / person :name \"I\")\n      :recipient (p2 / person :name \"Riley\")\n      :message \"I am going to be late\")", "key_phrase": "Riley, late, message, communicate, I", "slot_type": "('recipient', 'Riley'),('content_exact', 'I am going to be late'),('contact_method', 'message'),('type_relation', 'communicate')", "pred_lf": "[IN:SEND_MESSAGE [SL:RECIPIENT Riley ] [SL:CONTENT_EXACT I am going to be late ] [SL:CONTACT_METHOD message ] [SL:TYPE_RELATION communicate ] ]", "gold_lf": "[IN:SEND_MESSAGE [SL:RECIPIENT Riley ] [SL:CONTENT_EXACT I am going to be late ] ]"}
{"utterance": "What's happening in Dallas", "intent": "get_news", "AMR Graph": "(n / now-entity \n  :ARG1 (l / location \n          :wiki \"Dallas\"))", "key_phrase": "happening, Dallas", "slot_type": "('title_event', 'happening'),('location', 'Dallas')", "pred_lf": "[IN:GET_NEWS [SL:TITLE_EVENT happening ] [SL:LOCATION Dallas ] ]", "gold_lf": "[IN:GET_EVENT [SL:LOCATION Dallas ] ]"}
{"utterance": "Update reminder for today's staff meeting from 1 pm to 2 pm.", "intent": "update_reminder_date_time", "AMR Graph": "(update\n    :topic (reminder\n                :event (staff-meeting\n                            :date today\n                            :time-start \"1 pm\"\n                            :time-end \"2 pm\"))))", "key_phrase": "reminder, staff meeting, today, 1 pm, 2 pm", "slot_type": "('todo', 'reminder'),('title_event', \"staff meeting\"),('date_time', 'today'),('date_time', '1 pm'),('date_time', '2 pm')", "pred_lf": "[IN:UPDATE_REMINDER_DATE_TIME [SL:TODO reminder ] [SL:TITLE_EVENT staff meeting ] [SL:DATE_TIME today ] [SL:DATE_TIME 1 pm ] [SL:DATE_TIME 2 pm ] ]", "gold_lf": "[IN:UPDATE_REMINDER_DATE_TIME [SL:TODO today 's staff meeting ] [SL:DATE_TIME 1 pm ] [SL:DATE_TIME 2 pm ] ]"}
{"utterance": "Remind me to get tacos for dinner", "intent": "create_reminder", "AMR Graph": "Remind-01 :ARG1 (me)\n        :ARG2 (get-02 :ARG1 (tacos) \n                       :time (dinner))", "key_phrase": "Remind me, get tacos, for dinner", "slot_type": "('todo', 'Remind me'),('recipes_dish', 'tacos'),('recipes_meal', 'dinner')", "pred_lf": "[IN:CREATE_REMINDER [SL:TODO Remind me ] [SL:RECIPES_DISH tacos ] [SL:RECIPES_MEAL dinner ]]", "gold_lf": "[IN:CREATE_REMINDER [SL:PERSON_REMINDED me ] [SL:TODO get tacos for dinner ] ]"}
{"utterance": "Start the timer at 8:30", "intent": "create_timer", "AMR Graph": "(c / commence-01\n      :ARG1 (t / timer\n             :time \"8:30\"))", "key_phrase": "timer, start, 8:30", "slot_type": "('method_timer', 'start'),('timer_name', 'timer'),('date_time', '8:30')", "pred_lf": "[IN:CREATE_TIMER [SL:METHOD_TIMER start ] [SL:TIMER_NAME timer ] [SL:DATE_TIME 8:30 ] ]", "gold_lf": "[IN:CREATE_TIMER [SL:METHOD_TIMER timer ] [SL:DATE_TIME at 8 : 30 ] ]"}
{"utterance": "How many calories are in a Big Mac from McDonald's", "intent": "get_info_recipes", "AMR Graph": "(c / calories\n     :quant-of (n / number\n                    :quant 1\n                    :mode \"interrogative\")\n     :in (f / food\n              :name \"Big Mac\"\n              :brand (r / restaurant\n                         :name \"McDonald's\")))", "key_phrase": "calories, Big Mac, McDonald's", "slot_type": "('recipes_type_nutrition', 'calories'),('recipes_dish', 'Big Mac'),('recipes_source', \"McDonald's\")", "pred_lf": "[IN:GET_INFO_RECIPES [SL:RECIPES_TYPE_NUTRITION calories ] [SL:RECIPES_DISH Big Mac ] [SL:RECIPES_SOURCE McDonald's ] ]", "gold_lf": "[IN:GET_INFO_RECIPES [SL:RECIPES_UNIT_NUTRITION calories ] [SL:RECIPES_DISH Big Mac ] ]"}
{"utterance": "What is the correct temperature for medium rare steak", "intent": "question_food", "AMR Graph": "(s / ask\n      :ARG0 (y / you)\n      :ARG1 (t / temperature\n                   :mod (c / correct)\n                   :mod (m / medium)\n                   :mod (r / rare))\n      :ARG2 (s2 / steak\n                   :mod (w / what)))", "key_phrase": "correct temperature, medium rare, steak", "slot_type": "('weather_temperature_unit', 'correct temperature'),('recipes_qualifier_nutrition', 'medium rare'),('recipes_meal', 'steak')", "pred_lf": "[IN:QUESTION_FOOD [SL:WEATHER_TEMPERATURE_UNIT correct temperature ] [SL:RECIPES_QUALIFIER_NUTRITION medium rare ] [SL:RECIPES_MEAL steak ] ]", "gold_lf": "[IN:GET_INFO_RECIPES [SL:RECIPES_ATTRIBUTE temperature ] [SL:RECIPES_ATTRIBUTE medium rare ] [SL:RECIPES_DISH steak ] ]"}
{"utterance": "where does ali live?", "intent": "get_location", "AMR Graph": "(live :ARG1 (person :name \"ali\") :location (place))", "key_phrase": "ali, live, where", "slot_type": "('location', 'ali'),('method_retrieval_reminder', 'live'),('attribute_event', 'where')", "pred_lf": "[IN:GET_LOCATION [SL:LOCATION ali ] [SL:METHOD_RETRIEVAL_REMINDER live ] [SL:ATTRIBUTE_EVENT where ] ]", "gold_lf": "[IN:GET_LOCATION [SL:CONTACT ali ] ]"}
{"utterance": "make a call to Xander Brown's mom", "intent": "create_call", "AMR Graph": "(c / call-01\n      :ARG0 (y / you)\n      :ARG1 (m / mother\n             :name (n / name\n                    :op1 \"Xander\"\n                    :op2 \"Brown\")))", "key_phrase": "call, Xander Brown's mom", "slot_type": "('method_recipes', 'make'),('contact', \"Xander Brown's mom\")", "pred_lf": "[IN:CREATE_CALL [SL:METHOD_RECIPES make ] [SL:CONTACT Xander Brown's mom ] ]", "gold_lf": "[IN:CREATE_CALL [SL:CONTACT Xander Brown 's mom ] ]"}
{"utterance": "remind me about dinner tonight at 5", "intent": "create_reminder", "AMR Graph": "(c / remind\n    :recipient (m / me)\n    :topic (d / dinner\n             :suffix \"tonight\")\n    :time (a / at\n             :hour 5))", "key_phrase": "remind, me, dinner, tonight, 5", "slot_type": "('method_timer', 'remind'), ('user_attendee_event', 'me'), ('recipes_meal', 'dinner'), ('date_time', 'tonight at 5')", "pred_lf": "[IN:CREATE_REMINDER [SL:METHOD_TIMER remind ] [SL:USER_ATTENDEE_EVENT me ] [SL:RECIPES_MEAL dinner ] [SL:DATE_TIME tonight at 5 ] ]", "gold_lf": "[IN:CREATE_REMINDER [SL:PERSON_REMINDED me ] [SL:TODO dinner ] [SL:DATE_TIME tonight at 5 ] ]"}
{"utterance": "Find me a recipe for curry chicken", "intent": "get_info_recipes", "AMR Graph": "(find/find-01 :arg0 (me)\n          :arg1 (recipe\n                :mod (curry)\n                :mod (chicken)))", "key_phrase": "recipe, curry, chicken", "slot_type": "('recipes_meal', 'curry'),('recipes_dish', 'chicken'),('type_content', 'recipe'),('recipient', 'me')", "pred_lf": "[IN:GET_INFO_RECIPES [SL:RECIPES_MEAL curry ] [SL:RECIPES_DISH chicken ] [SL:TYPE_CONTENT recipe ] [SL:RECIPIENT me ] ]", "gold_lf": "[IN:GET_RECIPES [SL:RECIPES_DISH curry chicken ] ]"}
{"utterance": "theater events in los angeles this week", "intent": "get_event", "AMR Graph": "(p / place :wiki \"Los_Angeles\" \n     :name (n / name :op1 \"theater\")\n     :time (w / week :time \"this week\" )\n     :part-of (c / city)) \n(e / event \n   :instance-of (t / theater-event)\n   :location p)", "key_phrase": "theater events, Los Angeles, this week", "slot_type": "('title_event', 'theater events'),('location', 'Los Angeles'),('date_time', 'this week')", "pred_lf": "[IN:GET_EVENT [SL:TITLE_EVENT theater events ] [SL:LOCATION Los Angeles ] [SL:DATE_TIME this week ] ]", "gold_lf": "[IN:GET_EVENT [SL:CATEGORY_EVENT theater ] [SL:LOCATION los angeles ] [SL:DATE_TIME this week ] ]"}
{"utterance": "What do I need to make a chicken noodle soup", "intent": "get_info_recipes", "AMR Graph": "(x / need \n  :ARG0 (y / I)\n  :ARG1 (z / make \n          :ARG0 y \n          :ARG1 (s / soup \n                  :ARG0 (c / chicken) \n                  :ARG1 (n / noodle))))", "key_phrase": "I, chicken noodle soup", "slot_type": "('recipes_meal', 'chicken noodle soup'),('O', 'I')", "pred_lf": "[IN:GET_INFO_RECIPES [SL:RECIPES_MEAL chicken noodle soup ] [SL:O I ] ]", "gold_lf": "[IN:GET_INFO_RECIPES [SL:RECIPES_DISH chicken noodle soup ] ]"}
{"utterance": "What is the temperature in London?", "intent": "get_weather", "AMR Graph": "(t / temperature\n      :location (c / city\n                    :name \"London\"))", "key_phrase": "temperature, London", "slot_type": "('weather_temperature_unit', 'temperature'),('location', 'London')", "pred_lf": "[IN:GET_WEATHER [SL:WEATHER_TEMPERATURE_UNIT temperature ] [SL:LOCATION London ] ]", "gold_lf": "[IN:GET_WEATHER [SL:LOCATION London ] ]"}
{"utterance": "Play a bunch of songs from musicals, please.", "intent": "play_music", "AMR Graph": "(play :action (bunch :quantity \"many\" :of (song :genre \"musical\")) :receiver (please))", "key_phrase": "Play a bunch of songs, musicals, please.", "slot_type": "('music_type', 'songs'),('music_playlist_modifier', 'bunch'),('music_genre', 'musicals'),('content_exact', 'please')", "pred_lf": "[IN:PLAY_MUSIC [SL:MUSIC_TYPE songs ] [SL:MUSIC_PLAYLIST_MODIFIER bunch ] [SL:MUSIC_GENRE musicals ] [SL:CONTENT_EXACT please ] ]", "gold_lf": "[IN:PLAY_MUSIC [SL:MUSIC_TYPE songs ] ]"}
{"utterance": "Have Janie and Kyle Coleman messaged me today", "intent": "get_message_contact", "AMR Graph": "(have-01\n  :ARG0 (person :name (name-entity :op \"Janie\"))\n  :ARG1 (person :name (name-entity :op \"Kyle Coleman\"))\n  :ARG2 (message :topic (pronoun :op \"me\"))\n  :time (time :quant \"today\"))", "key_phrase": "Janie, Kyle Coleman, messaged me, today", "slot_type": "('user_attendee_event', 'Janie'),('user_attendee_event', 'Kyle Coleman'),('content_exact', 'messaged me'),('date_time', 'today')", "pred_lf": "[IN:GET_MESSAGE_CONTACT [SL:USER_ATTENDEE_EVENT Janie ] [SL:USER_ATTENDEE_EVENT Kyle Coleman ] [SL:CONTENT_EXACT messaged me ] [SL:DATE_TIME today ]]", "gold_lf": "[IN:GET_MESSAGE [SL:SENDER Janie ] [SL:SENDER Kyle Coleman ] [SL:RECIPIENT me ] [SL:DATE_TIME today ] ]"}
