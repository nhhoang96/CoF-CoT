{"utterance": "call Nicholas and Natasha", "intent": "create_call, get_call_contact, get_call", "AMR Graph": "(PERSON :name \"Nicholas\")\n(PERSON :name \"Natasha\")\n(CALL :callee (PERSON :name \"Nicholas\") :callee (PERSON :name \"Natasha\"))", "key_phrase": "Nicholas, Natasha, call", "slot_type": "('attendee', 'Nicholas'),('attendee', 'Natasha'),('todo', 'call')", "pred_lf": "[IN:CREATE_CALL [SL:ATTENDEE Nicholas ] [SL:ATTENDEE Natasha ] [SL:TODO call ] ]\n[IN:GET_CALL_CONTACT [SL:ATTENDEE Nicholas ] [SL:ATTENDEE Natasha ]]\n[IN:GET_CALL ]", "gold_lf": "[IN:CREATE_CALL [SL:CONTACT Nicholas ] [SL:CONTACT Natasha ] ]"}
{"utterance": "Give me the most recent NPR news", "intent": "get_details_news, get_stories_news, question_news\nConfidence scores: 0.80, 0.15, 0.05", "AMR Graph": "(get_details_news :subject (I) :object (most_recent_NPR_news))", "key_phrase": "NPR news, most recent", "slot_type": "('news_topic', 'NPR news'), ('ordinal', 'most recent')", "pred_lf": "[IN:GET_DETAILS_NEWS [SL:NEWS_TOPIC NPR news ] [SL:ORDINAL most recent ] ]", "gold_lf": "[IN:GET_STORIES_NEWS [SL:DATE_TIME the most recent ] [SL:NEWS_SOURCE NPR ] [SL:NEWS_TYPE news ] ]"}
{"utterance": "What's the work address with zipcode where James work?", "intent": "get_location, get_job, get_contact \nNumeric confidence scores: 0.85, 0.75, 0.6", "AMR Graph": "(s / ask\n   :intent get_location\n   :confidence 0.85\n   :subject (p / person :name \"James\")\n   :location-of (j / job\n                  :company (c / company)\n                  :address (a / address\n                              :street (s2 / street)\n                              :zipcode (z / zipcode))))", "key_phrase": "work address, zipcode, James work", "slot_type": "('location', 'work address'),('location', 'zipcode'),('contact', 'James work')", "pred_lf": "[IN:GET_LOCATION [SL:LOCATION work address ] [SL:LOCATION zipcode ] [SL:CONTACT James work ] ]", "gold_lf": "[IN:GET_LOCATION [SL:CONTACT James ] ]"}
{"utterance": "ring my brother", "intent": "get_call, create_call, update_call", "AMR Graph": "(PERSON :speaker (CALL :action ring :object (PERSON :name brother)))", "key_phrase": "ring, brother", "slot_type": "('todo', 'ring'), ('recipient', 'brother')", "pred_lf": "[IN:GET_CALL [SL:TODO ring ] [SL:RECIPIENT brother ] ]\nor [IN:CREATE_CALL [SL:TODO ring ] [SL:RECIPIENT brother ] ]\nor [IN:UPDATE_CALL [SL:TODO ring ] [SL:RECIPIENT brother ] ]", "gold_lf": "[IN:CREATE_CALL [SL:CONTACT my brother ] ]"}
{"utterance": "set a timer for my workout right now", "intent": "create_timer,add_time_timer,update_timer\nNumeric Confidence Scores: 0.95, 0.85, 0.80", "AMR Graph": "(text / set\n    :time (time-setter\n            :op1 (time-entity :event (event / workout))\n            :op2 (temporal-quantity-entity :quant 1 :unit (unit-of-time / hour)))\n    :mode (temporal-mode / now))", "key_phrase": "set a timer, workout, now", "slot_type": "('method_timer', 'set'),('todo', 'workout'),('date_time', 'now')", "pred_lf": "[IN:CREATE_TIMER [SL:METHOD_TIMER set ] [SL:TODO workout ] [SL:DATE_TIME now ] ] \nor \n[IN:ADD_TIME_TIMER [SL:METHOD_TIMER set ] [SL:TODO workout ] [SL:DATE_TIME now ] ] \nor \n[IN:UPDATE_TIMER [SL:METHOD_TIMER set ] [SL:TODO workout ] [SL:DATE_TIME now ] ] \n(Choosing the intent with the highest numeric confidence score)", "gold_lf": "[IN:CREATE_TIMER [SL:METHOD_TIMER timer ] [SL:TIMER_NAME workout ] ]"}
{"utterance": "call Camilla whatsapp video", "intent": "create_call, answer_call, send_message\nConfidence score: 0.9, 0.6, 0.5", "AMR Graph": "Potential Intent Types: create_call\nAMR Graph:\n(c / call\n    :mode video\n    :participant (p / person :name \"Camilla\")\n    :medium whatsapp)", "key_phrase": "Camilla, whatsapp, video", "slot_type": "('recipient', 'Camilla'),('contact_method', 'whatsapp'),('type_content', 'video')", "pred_lf": "[IN:CREATE_CALL [SL:RECIPIENT Camilla ] [SL:CONTACT_METHOD whatsapp ] [SL:TYPE_CONTENT video ]]", "gold_lf": "[IN:CREATE_CALL [SL:CONTACT Camilla ] [SL:NAME_APP whatsapp ] ]"}
{"utterance": "call Avery M", "intent": "get_call, create_call, update_call", "AMR Graph": "(BE :arg1 (CALL :name \"Avery M\"))", "key_phrase": "Avery M, call", "slot_type": "('contact', 'Avery M'),('type_content', 'call')", "pred_lf": "[IN:CREATE_CALL [SL:CONTACT Avery M ] [SL:TYPE_CONTENT call ] ] (Note: This logic form assumes the intent is to create a call with Avery M)", "gold_lf": "[IN:CREATE_CALL [SL:CONTACT Avery M ] ]"}
{"utterance": "what is the next alarm for", "intent": "get_alarm, get_timer, get_reminder\nConfidence Scores: 0.8, 0.1, 0.1", "AMR Graph": "(purpose / inquire\n\t:topic (alarm-entity\n\t\t:time (future)\n\t)\n)", "key_phrase": "next alarm", "slot_type": "('ordinal', 'next'),('alarm_name', 'alarm')", "pred_lf": "[IN:GET_ALARM [SL:ORDINAL next ] [SL:ALARM_NAME alarm ] ]", "gold_lf": "[IN:GET_ALARM [SL:ORDINAL next ] ]"}
{"utterance": "Recommend me some Broadway shows in Anchorage for Thursday night", "intent": "get_event, get_location, get_date_time_event", "AMR Graph": "(p / recommend-01\n    :ARG0 (m / me)\n    :ARG1 (s / show\n            :name (b / broadway))\n    :ARG2 (l / location\n            :name \"Anchorage\")\n    :ARG3 (n / night\n            :weekday \"Thursday\"))", "key_phrase": "Broadway shows, Anchorage, Thursday night", "slot_type": "('title_event', 'Broadway shows'), ('location', 'Anchorage'), ('date_time', 'Thursday night')", "pred_lf": "[IN:GET_EVENT [SL:TITLE_EVENT Broadway shows ] [SL:LOCATION Anchorage ] [SL:DATE_TIME Thursday night ] ]", "gold_lf": "[IN:GET_EVENT [SL:CATEGORY_EVENT Broadway shows ] [SL:LOCATION Anchorage ] [SL:DATE_TIME for Thursday night ] ]"}
{"utterance": "What's news about facebook this week", "intent": "get_details_news, get_stories_news, question_news\nConfidence scores: 0.8, 0.5, 0.4", "AMR Graph": "(get_details_news\n     :topic (news\n                :about facebook\n                :time (week)))\n(confidence-score 0.8)", "key_phrase": "facebook, this week", "slot_type": "('news_topic', 'facebook'),('date_time', 'this week')", "pred_lf": "[IN:GET_DETAILS_NEWS [SL:NEWS_TOPIC facebook ] [SL:DATE_TIME this week ] ]", "gold_lf": "[IN:GET_STORIES_NEWS [SL:NEWS_TYPE news ] [SL:NEWS_TOPIC facebook ] [SL:DATE_TIME this week ] ]"}
{"utterance": "can you set a warning alarm for 7pm", "intent": "create_alarm, get_timer, update_alarm\nConfidence scores: 0.9, 0.8, 0.7", "AMR Graph": "(purpose\n        :time (time :hour 7 :minute 0 :ampm \"pm\")\n        :event (warn\n                   :person (you)\n                   :object (alarm)))", "key_phrase": "set, warning alarm, 7pm, you", "slot_type": "('method_timer', 'set'), ('alarm_name', 'warning alarm'), ('date_time', '7pm'), ('user_attendee_event', 'you')", "pred_lf": "[IN:CREATE_ALARM [SL:METHOD_TIMER set ] [SL:ALARM_NAME warning alarm ] [SL:DATE_TIME 7pm ] [SL:USER_ATTENDEE_EVENT you ] ]", "gold_lf": "[IN:CREATE_ALARM [SL:ALARM_NAME warning ] [SL:DATE_TIME for 7 pm ] ]"}
{"utterance": "Tell me about events going on in Crandon this weekend", "intent": "get_event, get_location, get_date_time_event\nConfidence Scores: 0.9, 0.6, 0.5", "AMR Graph": "(c / clarify-01\n  :subject (p / person :name \"pro\")\n  :object (e / event\n            :location (l / location :name \"Crandon\")\n            :time (t / time\n                    :quant  (q / quantity :quant  \"this\")\n                    :unit (w / week :name \"weekend\"))))\nNote: The confidence scores are not used to generate the AMR graph.", "key_phrase": "events, Crandon, this weekend", "slot_type": "('title_event', 'events'),('location', 'Crandon'),('date_time', 'this weekend')", "pred_lf": "[IN:GET_EVENT [SL:TITLE_EVENT events ] [SL:LOCATION Crandon ] [SL:DATE_TIME this weekend ] ]", "gold_lf": "[IN:GET_EVENT [SL:LOCATION Crandon ] [SL:DATE_TIME this weekend ] ]"}
{"utterance": "make one timer for four minutes and another for 10 minutes", "intent": "create_timer, add_time_timer, delete_timer\nConfidence score: 0.8, 0.7, 0.6", "AMR Graph": "(perform\n  :action (create\n             :object (timer)\n             :quantity (number 1))\n  :duration (time\n               :unit (minute)\n               :quantity (number 4)))\n(perform\n  :action (create\n             :object (timer)\n             :quantity (number 1))\n  :duration (time\n               :unit (minute)\n               :quantity (number 10)))", "key_phrase": "make, timer, four minutes, another, 10 minutes", "slot_type": "('method_timer', 'make'), ('todo', 'timer'), ('amount', 'four minutes'), ('amount', '10 minutes')", "pred_lf": "[IN:CREATE_TIMER [SL:METHOD_TIMER make ] [SL:TODO timer ] [SL:AMOUNT four minutes ] ] [IN:ADD_TIME_TIMER [SL:TODO timer ] [SL:AMOUNT 10 minutes ] ]", "gold_lf": "[IN:CREATE_TIMER [SL:AMOUNT one ] [SL:METHOD_TIMER timer ] [SL:DATE_TIME for four minutes ] [SL:DATE_TIME for 10 minutes ] ]"}
{"utterance": "How do I prepare spaghetti", "intent": "get_info_recipes (0.7), question_recipes (0.2), prefer (0.1)", "AMR Graph": "(c / prepare-01\n      :arg0 (p / person :name \"I\")\n      :arg1 (s / spaghetti))", "key_phrase": "prepare spaghetti", "slot_type": "('recipes_dish', 'spaghetti'),('recipes_cooking_method', 'prepare')", "pred_lf": "[IN:GET_INFO_RECIPES [SL:RECIPES_DISH spaghetti ] [SL:RECIPES_COOKING_METHOD prepare ] ]", "gold_lf": "[IN:GET_RECIPES [SL:RECIPES_DISH spaghetti ] ]"}
{"utterance": "mark me as not going to Olympic Peninsula Apple and Cider Festival", "intent": "set_rsvp_no,update_event,create_event. Confidence Scores: 0.8, 0.6, 0.5.", "AMR Graph": "( set-event-status\n      :event ( create-event\n                  :name \"Olympic Peninsula Apple and Cider Festival\"\n                )\n      :attendee \"me\"\n      :status \"not going\"\n)", "key_phrase": "Olympic Peninsula Apple and Cider Festival, me, not going", "slot_type": "('title_event', 'Olympic Peninsula Apple and Cider Festival'),('user_attendee_event', 'me'),('todo', 'not going')", "pred_lf": "[IN:SET_RSVP_NO [SL:TITLE_EVENT Olympic Peninsula Apple and Cider Festival ] [SL:USER_ATTENDEE_EVENT me ] [SL:TODO not going ] ]", "gold_lf": "[IN:SET_RSVP_NO [SL:TITLE_EVENT Olympic Peninsula Apple and Cider Festival ] ]"}
{"utterance": "tell mark to pick up our to go order from olive garden", "intent": "send_message (0.80), create_reminder (0.15), get_contact (0.10)", "AMR Graph": "(purpose / send-communication :content (speech act / instruct\n                                                  :agent (person :name \"I\")\n                                                  :object (order :from \"Olive Garden\" :type to-go)\n                                                  :addressee (person :name \"Mark\")))", "key_phrase": "Mark, pick up, to go order, Olive Garden", "slot_type": "('recipient', 'Mark'), ('todo', 'pick up'), ('content_exact', 'to go order'), ('location', 'Olive Garden')", "pred_lf": "[IN:SEND_MESSAGE [SL:RECIPIENT Mark ] [SL:CONTENT_EXACT to go order ] [SL:LOCATION Olive Garden ] ]\nOR\n[IN:CREATE_REMINDER [SL:TODO pick up ] [SL:CONTENT_EXACT to go order ] [SL:LOCATION Olive Garden ] ]\nOR\n[IN:GET_CONTACT [SL:RECIPIENT Mark ] ] (if the intent is asking for Mark's contact information rather than sending him a message)", "gold_lf": "[IN:SEND_MESSAGE [SL:RECIPIENT mark ] [SL:CONTENT_EXACT pick up our to go order from olive garden ] ]"}
{"utterance": "Set my alarm for 21st of May at 5 am.", "intent": "create_alarm, update_alarm, add_time_timer", "AMR Graph": "(PREDICATE\\_SET :event (EVENT :instance-of (ALARM :time \"5am\" :date \"May 21st\")))", "key_phrase": "Set my alarm, May 21st, 5 am.", "slot_type": "('method_timer', 'Set my alarm'), ('date_time', 'May 21st'), ('time', '5 am')", "pred_lf": "[IN:CREATE_ALARM [SL:METHOD_TIMER Set my alarm ] [SL:DATE_TIME May 21st ] [SL:TIME 5 am ] ]", "gold_lf": "[IN:CREATE_ALARM [SL:DATE_TIME for 21st of May at 5 am ] ]"}
{"utterance": "call on whatsapp Zachary Adkins", "intent": "create_call, make_call, get_call_contact", "AMR Graph": "(PERSON :name \"Zachary Adkins\")\n(CALL :type \"whatsapp\" :contact PERSON)", "key_phrase": "whatsapp, Zachary Adkins", "slot_type": "('contact_method', 'whatsapp'),('attendee', 'Zachary Adkins')", "pred_lf": "[IN:CREATE_CALL [SL:CONTACT_METHOD whatsapp ] [SL:ATTENDEE Zachary Adkins ] ] or \n[IN:MAKE_CALL [SL:CONTACT_METHOD whatsapp ] [SL:ATTENDEE Zachary Adkins ] ] or \n[IN:GET_CALL_CONTACT [SL:CONTACT_METHOD whatsapp ] [SL:ATTENDEE Zachary Adkins ] ] (multiple possible intents)", "gold_lf": "[IN:CREATE_CALL [SL:NAME_APP whatsapp ] [SL:CONTACT Zachary Adkins ] ]"}
{"utterance": "Is it below 47 in F at New York today", "intent": "get_weather, get_location, question_weather", "AMR Graph": "(PRED (question_weather \n            :polarity positive\n            :location (name :value \"New York\"))\n      (and \n        (PRED (be_low \n                :location (name :value \"New York\"))\n              :measurement (temperature \n                             :number 47 \n                             :unit (F))))\n       (PRED (be_today)) ))", "key_phrase": "below, 47, F, New York, today", "slot_type": "('weather_attribute', 'below'), ('weather_temperature_unit', 'F'), ('location', 'New York'), ('date_time', 'today')", "pred_lf": "[IN:GET_WEATHER [SL:WEATHER_ATTRIBUTE below ] [SL:WEATHER_TEMPERATURE_UNIT F ] [SL:LOCATION New York ] [SL:DATE_TIME today ] ]", "gold_lf": "[IN:GET_WEATHER [SL:WEATHER_ATTRIBUTE below ] [SL:WEATHER_ATTRIBUTE 47 ] [SL:WEATHER_TEMPERATURE_UNIT F ] [SL:LOCATION New York ] [SL:DATE_TIME today ] ]"}
{"utterance": "Did my Mom send me a message this week?", "intent": "get_message, get_message_contact, question_news\nConfidence scores: 0.9, 0.8, 0.4", "AMR Graph": "(did \n :subject (mom)\n :predicate (send \n              :object (message)\n              :recipient (me)\n              :time (week)))", "key_phrase": "Mom, message, this week", "slot_type": "('contact', 'Mom'),('type_content', 'message'),('date_time', 'this week')", "pred_lf": "[IN:GET_MESSAGE_CONTACT [SL:CONTACT Mom ] [SL:TYPE_CONTENT message ] [SL:DATE_TIME this week ] ]", "gold_lf": "[IN:GET_MESSAGE [SL:SENDER my Mom ] [SL:RECIPIENT me ] [SL:DATE_TIME this week ] ]"}
{"utterance": "What kind of event is Pumpkin Run?", "intent": "get_category_event, get_event, get_details_news, 0.8, 0.7, 0.6", "AMR Graph": "(:interrogative\n        :op1 (event-entity\n                :name (name-entity :op1 \"Pumpkin Run\")\n                :category (kind-entity :op1 \"event\")))", "key_phrase": "Pumpkin Run, kind of event", "slot_type": "('title_event', 'Pumpkin Run'),('attribute_event', 'kind of event')", "pred_lf": "[IN:GET_CATEGORY_EVENT [SL:TITLE_EVENT Pumpkin Run ] [SL:ATTRIBUTE_EVENT kind of event ] ]\n[IN:GET_EVENT [SL:TITLE_EVENT Pumpkin Run ]]\n[IN:GET_DETAILS_NEWS [SL:TITLE_EVENT Pumpkin Run ] ]", "gold_lf": "[IN:GET_CATEGORY_EVENT [SL:TITLE_EVENT Pumpkin Run ] ]"}
{"utterance": "reset alarm for 7am on Sunday morning", "intent": "update_alarm, create_alarm, delete_alarm\nConfidence scores: 0.9, 0.6, 0.1", "AMR Graph": "(update_alarm\n   :time (date-entity :weekday (weekday-entity :weekday \"Sunday\")\n                      :time (time-entity :hour 7 :minute 0))\n)", "key_phrase": "reset alarm, 7am, Sunday morning", "slot_type": "('method_recipes', 'reset alarm'), ('date_time', '7am'), ('date_time', 'Sunday morning')", "pred_lf": "[IN:UPDATE_ALARM [SL:DATE_TIME 7am ] [SL:DATE_TIME Sunday morning ] ]", "gold_lf": "[IN:CREATE_ALARM [SL:DATE_TIME for 7 am on Sunday morning ] ]"}
{"utterance": "Find a recipe for jerk chicken", "intent": "get_info_recipes (0.8), like_music (0.2), get_details_news (0.1)", "AMR Graph": "(c / find-01\n   :ARG1 (r / recipe\n         :name \"jerk chicken\"))", "key_phrase": "recipe, jerk chicken", "slot_type": "('recipes_type', 'recipe'), ('recipes_dish', 'jerk chicken')", "pred_lf": "[IN:GET_INFO_RECIPES [SL:RECIPES_TYPE recipe ] [SL:RECIPES_DISH jerk chicken ] ]", "gold_lf": "[IN:GET_RECIPES [SL:RECIPES_DISH jerk chicken ] ]"}
{"utterance": "play destiny's child", "intent": "play_music, repeat_all_music, add_to_playlist_music\nConfidence scores: 0.80, 0.12, 0.06", "AMR Graph": "(Possible AMR graph in Neo-Davidsonian format)\n[purpose=play, entity=Destiny's Child]", "key_phrase": "Destiny's Child", "slot_type": "('music_artist_name', \"Destiny's Child\")", "pred_lf": "[IN:PLAY_MUSIC [SL:MUSIC_ARTIST_NAME Destiny's Child]]", "gold_lf": "[IN:PLAY_MUSIC [SL:MUSIC_ARTIST_NAME destiny 's child ] ]"}
{"utterance": "make an alarm for the 5th", "intent": "create_alarm, update_alarm, delete_alarm \nNumeric confidence scores: 0.88, 0.05, 0.02", "AMR Graph": "(A / alarm\n   :date (d / date-entity\n            :weekday 5))", "key_phrase": "alarm, 5th", "slot_type": "('todo', 'make'),('alarm_name', 'alarm'),('ordinal', 'the 5th')", "pred_lf": "[IN:CREATE_ALARM [SL:TODO make ] [SL:ALARM_NAME alarm ] [SL:ORDINAL the 5th ] ]", "gold_lf": "[IN:CREATE_ALARM [SL:DATE_TIME for the 5th ] ]"}
{"utterance": "Set an alarm for Monday at 5pm", "intent": "create_alarm,update_alarm,add_time_timer. Confidence scores cannot be provided without additional context or information on the specific model or algorithm used for intent classification.", "AMR Graph": "(PRED \"set\"\n   :ARG0 (PRED \"alarm\"\n            :ARG1 ( ENTITY \"Monday\"\n                    :wiki \"Monday\"\n                    :time \"XXXX-WXX-1\"\n                    :mod \"date\"\n                    :quant \"one\"\n                    :value \"2021-05-24\"\n                  )\n            :ARG2 ( ENTITY \"5pm\"\n                    :value \"17:00\"\n                    :time \"T17:00\"\n                    :mod \"time-of-day\"\n                  )\n          )\n)", "key_phrase": "Set an alarm, Monday, 5pm", "slot_type": "('method_timer', 'Set an alarm'), ('date_time', 'Monday'), ('date_time', '5pm')", "pred_lf": "[IN:CREATE_ALARM [SL:METHOD_TIMER Set an alarm ] [SL:DATE_TIME Monday ] [SL:DATE_TIME 5pm ] ]", "gold_lf": "[IN:CREATE_ALARM [SL:DATE_TIME for Monday at 5 pm ] ]"}
{"utterance": "When did Lisa's employment at Publix finish?", "intent": "get_employment_time, get_employer, get_life_event_time\nConfidence scores: 0.8, 0.7, 0.6", "AMR Graph": "(get_employment_time :time (finish :\n                :event (employment\n                        :person (name :op1 \"Lisa\")\n                        :place (name :op1 \"Publix\"))))", "key_phrase": "Lisa, employment, Publix, finish", "slot_type": "('person_reminded', 'Lisa'),('job', \"employment\"),('employer', 'Publix'),('method_retrieval_reminder', 'finish')", "pred_lf": "[IN:GET_EMPLOYMENT_TIME [SL:PERSON_REMINDED Lisa ] [SL:JOB employment ] [SL:EMPLOYER Publix ] [SL:METHOD_RETRIEVAL_REMINDER finish ] ]", "gold_lf": "[IN:GET_EMPLOYMENT_TIME [SL:CONTACT Lisa ] [SL:EMPLOYER Publix ] ]"}
{"utterance": "What's Larry's work address?", "intent": "get_location, get_contact, get_employer\nConfidence scores: 0.6, 0.3, 0.1", "AMR Graph": "(get_work_address\n   :person (name \"Larry\")\n)", "key_phrase": "Larry, work address", "slot_type": "('contact', 'Larry'), ('location', 'work address')", "pred_lf": "[IN:GET_LOCATION [SL:CONTACT Larry ] [SL:LOCATION work address]]", "gold_lf": "[IN:GET_LOCATION [SL:CONTACT Larry ] ]"}
{"utterance": "Does Rachel live in Avon?", "intent": "get_location, get_info_contact, question_general", "AMR Graph": "(s / question\n    :polarity - \n    :domain (c / communication)\n    :voice act\n    :topic (p / person :name \"Rachel\")\n    :prep-in (l / location :name \"Avon\"))", "key_phrase": "Rachel, Avon, live in", "slot_type": "('contact', 'Rachel'), ('location', 'Avon'), ('type_relation', 'live in')", "pred_lf": "[IN:QUESTION_GENERAL [SL:CONTACT Rachel ] [SL:LOCATION Avon ] [SL:TYPE_RELATION live in ] ]\n[IN:GET_LOCATION [SL:CONTACT Rachel ] [SL:LOCATION Avon ] ]\n[IN:GET_INFO_CONTACT [SL:CONTACT Rachel ] ]", "gold_lf": "[IN:GET_LOCATION [SL:CONTACT Rachel ] [SL:LOCATION Avon ] ]"}
{"utterance": "What method of cooking is better", "intent": "get_info_recipes (0.8), question_news (0.4), get_recipes (0.3)", "AMR Graph": "(p / prefer-01\n     :ARG1 (m / method\n               :mod (c / cook-01))\n     :ARG2 (b / better))", "key_phrase": "method of cooking, better", "slot_type": "('recipes_cooking_method', 'method of cooking'),('similarity', 'better')", "pred_lf": "[IN:GET_INFO_RECIPES [SL:RECIPES_COOKING_METHOD method of cooking ] [SL:SIMILARITY better ] ]", "gold_lf": "[IN:GET_INFO_RECIPES ]"}
{"utterance": "what is the weather in New York today?", "intent": "get_weather, get_location, get_date_time_event\nNumeric confidence scores: 0.9, 0.85, 0.8", "AMR Graph": "(PRED (name  :get_weather)\n      (ARG0   i)\n      (ARG1   :location\n              (name    :New_York))\n      (ARG2   :time\n              (op      today)))", "key_phrase": "weather, New York, today", "slot_type": "('attribute_event', 'weather'),('location', 'New York'),('date_time', 'today')", "pred_lf": "[IN:GET_WEATHER [SL:ATTRIBUTE_EVENT weather ] [SL:LOCATION New York ] [SL:DATE_TIME today ] ]", "gold_lf": "[IN:GET_WEATHER [SL:LOCATION New York ] [SL:DATE_TIME today ] ]"}
{"utterance": "add camille to call", "intent": "create_call, add_to_playlist_music, get_call_contact", "AMR Graph": "(Possible AMR Graph for all potential intent types, since the sentence is ambiguous)\n\n(add \n  :entity (person :name \"Camille\")\n  :to (call))", "key_phrase": "Camille, add to call", "slot_type": "('attendee', 'Camille'), ('group', 'call'), ('method_recipes', 'add to')", "pred_lf": "[IN:CREATE_CALL [SL:ATTENDEE Camille ] [SL:GROUP call ] ]\n[IN:ADD_TO_PLAYLIST_MUSIC [SL:ATTENDEE Camille ] [SL:METHOD_RECIPES add to ] ]\n[IN:GET_CALL_CONTACT [SL:ATTENDEE Camille ] [SL:GROUP call ] ]", "gold_lf": "[IN:UPDATE_CALL [SL:CONTACT_ADDED camille ] ]"}
{"utterance": "How to make gluten free pancakes", "intent": "get_info_recipes (0.9), question_recipes (0.5), is_true_recipes (0.3)", "AMR Graph": "(P / pancakes\n      :mod (G / gluten_free)\n      :prep (H / how_to_make))", "key_phrase": "gluten free, pancakes, how to make", "slot_type": "('recipes_diet', 'gluten free'), ('recipes_meal', 'pancakes'), ('recipes_cooking_method', 'how to make')", "pred_lf": "[IN:GET_INFO_RECIPES \n[SL:RECIPES_DIET gluten free ] \n[SL:RECIPES_MEAL pancakes ] \n[SL:RECIPES_COOKING_METHOD how to make ]]", "gold_lf": "[IN:GET_RECIPES [SL:RECIPES_TYPE gluten free ] [SL:RECIPES_DISH pancakes ] ]"}
{"utterance": "Pause the timer.", "intent": "pause_timer, pause_music, resume_timer", "AMR Graph": "(PAUSE :OBJECT TIMER)", "key_phrase": "Pause, timer", "slot_type": "('method_timer', 'Pause'), ('todo', 'timer')", "pred_lf": "[IN:PAUSE_TIMER [SL:METHOD_TIMER Pause ] [SL:TODO timer ] ]\nor\n[IN:PAUSE_MUSIC [SL:METHOD_TIMER Pause ] ]\nor\n[IN:RESUME_TIMER [SL:METHOD_TIMER Pause ] ]", "gold_lf": "[IN:PAUSE_TIMER [SL:METHOD_TIMER timer ] ]"}
{"utterance": "remind rex to set up the meeting time", "intent": "create_reminder, update_reminder, get_info_contact", "AMR Graph": "(PREDICATE /remind\n  :ARG0 (ENTITY /rex)\n  :ARG1 (PREDICATE /set_up\n           :ARG0 (ENTITY /meeting_time)))", "key_phrase": "rex, set up, meeting time", "slot_type": "('user_attendee_event', 'rex'),('todo', 'set up'),('title_event', 'meeting time')", "pred_lf": "[IN:CREATE_REMINDER [SL:USER_ATTENDEE_EVENT rex ] [SL:TODO set up ] [SL:TITLE_EVENT meeting time ] ]", "gold_lf": "[IN:CREATE_REMINDER [SL:PERSON_REMINDED rex ] [SL:TODO set up the meeting time ] ]"}
{"utterance": "Can I wear sandals today?", "intent": "get_weather, get_location, get_attire", "AMR Graph": "(:root\n    (request\n        :op1 (can)\n        :op2 (wear :thing (sandals))\n        :op3 (today)\n    )\n)", "key_phrase": "sandals, today", "slot_type": "('weather_attribute', 'sandals'),('date_time', 'today')", "pred_lf": "[IN:GET_WEATHER [SL:DATE_TIME today ] [SL:WEATHER_ATTRIBUTE sandals ] ] OR [IN:GET_LOCATION [SL:DATE_TIME today ] [SL:WEATHER_ATTRIBUTE sandals ] ] OR [IN:GET_ATTIRE [SL:DATE_TIME today ] [SL:WEATHER_ATTRIBUTE sandals ] ]", "gold_lf": "[IN:GET_WEATHER [SL:WEATHER_ATTRIBUTE sandals ] [SL:DATE_TIME today ] ]"}
{"utterance": "Add aunties to current call", "intent": "create_call, add_call_contact, merge_call\nConfidence scores: 0.6, 0.5, 0.4", "AMR Graph": "(purpose / create_call\n            :focus (and \n                       (type / call)\n                       (state / current))\n            :participant (and \n                            (type / contact)\n                            (proper_q / aunties))\n            :action (and\n                      (type / add)\n                      (reference / contact_of_call)))", "key_phrase": "aunties, current call, add contact", "slot_type": "('attendee', 'aunties'), ('todo', 'add contact'), ('group', 'current call')", "pred_lf": "[IN:ADD_CALL_CONTACT [SL:ATTENDEE aunties ] [SL:TODO add contact ] [SL:GROUP current call ] ]", "gold_lf": "[IN:UPDATE_CALL [SL:CONTACT_ADDED aunties ] ]"}
{"utterance": "where will american federal aid be sent to", "intent": "get_location, get_details_news, get_event", "AMR Graph": "(Possible AMR graph for all potential intent types combined)\n(c / realize-1\n      :ARG0 (y / you)\n      :ARG1 (q / question\n            :ARG0 y\n            :ARG1 (n / name\n                  :op1 \"ingredients\"))\n      :mode interrogative\n      :ARG2 (h / have-01\n            :ARG0 (t / they)\n            :ARG1 (l / leave-01)))", "key_phrase": "american federal aid, sent to, location", "slot_type": "('location', 'sent to'), ('news_topic', 'american federal aid')", "pred_lf": "[IN:GET_LOCATION [SL:LOCATION sent to ] ] or [IN:GET_DETAILS_NEWS [SL:NEWS_TOPIC american federal aid ] ] or [IN:GET_EVENT [SL:LOCATION sent to ] [SL:NEWS_TOPIC american federal aid ] ]", "gold_lf": "[IN:QUESTION_NEWS [SL:NEWS_TOPIC where will american federal aid be sent to ] ]"}
{"utterance": "get me messages from Angela", "intent": "get_message, get_info_contact, get_message_contact\nConfidence Scores: 0.8,0.6,0.6", "AMR Graph": "(pick :ARG1 (messages :mode imperative) :ARG2 (contact :name \"Angela\"))", "key_phrase": "messages, Angela", "slot_type": "('type_content', 'messages'), ('contact', 'Angela')", "pred_lf": "[IN:GET_MESSAGE [SL:TYPE_CONTENT messages ] [SL:CONTACT Angela ] ]", "gold_lf": "[IN:GET_MESSAGE [SL:SENDER Angela ] ]"}
{"utterance": "Temperature this weekend new york fahrenheit", "intent": "get_weather (0.9), get_location (0.8), get_temperature (0.7)", "AMR Graph": "(p / query\n      :QUERY (w / weather\n                  :time (w2 / weekend)\n                  :place (l / location\n                               :name \"New York\"))\n      :UNIT (f / fahrenheit))", "key_phrase": "Temperature, this weekend, New York, Fahrenheit", "slot_type": "('weather_attribute', 'Temperature'), ('date_time', 'this weekend'), ('location', 'New York'), ('weather_temperature_unit', 'Fahrenheit')", "pred_lf": "[IN:GET_WEATHER [SL:WEATHER_ATTRIBUTE Temperature ] [SL:DATE_TIME this weekend ] [SL:LOCATION New York ] [SL:WEATHER_TEMPERATURE_UNIT Fahrenheit ] ]", "gold_lf": "[IN:GET_WEATHER [SL:DATE_TIME this weekend ] [SL:LOCATION new york ] [SL:WEATHER_TEMPERATURE_UNIT fahrenheit ] ]"}
{"utterance": "How many kids got arrested", "intent": "get_details_news, get_event, get_category_event", "AMR Graph": "(p / arrest\n      :ARG1 (n / number :quant 0~1 :op1 \"many\" :op2 (k / kid))\n      :ARG2 (g / get\n              :ARG1 (e / event\n                      :ARG1 (p2 / person :quant 1 :op1 \"kid\" :op2 (c / count))\n                      :ARG2 (a / arrest))))", "key_phrase": "kids, arrested, number", "slot_type": "('news_topic', 'kids'),('attribute_event', 'arrested'),('amount', 'number')", "pred_lf": "[IN:GET_DETAILS_NEWS [SL:NEWS_TOPIC kids ] [SL:ATTRIBUTE_EVENT arrested ] [SL:AMOUNT number ] ]\nor\n[IN:GET_EVENT [SL:NEWS_TOPIC kids ] [SL:ATTRIBUTE_EVENT arrested ] [SL:AMOUNT number ] ]\nor\n[IN:GET_CATEGORY_EVENT [SL:NEWS_TOPIC kids ] [SL:ATTRIBUTE_EVENT arrested ] [SL:AMOUNT number ] ]", "gold_lf": "[IN:QUESTION_NEWS [SL:NEWS_TOPIC kids got arrested ] ]"}
{"utterance": "Show new messages", "intent": "get_message, play_music, get_reminder\nConfidence scores: 0.90, 0.85, 0.80", "AMR Graph": "(Possible AMR Graph for Intent Type: get_message)\n[[Show]]\n       |\n  [:arg1 (new)]\n       |\n  [:arg0 (messages)]\n\nNote: This is just one of the possible AMR Graphs and may not necessarily be the most accurate representation of the sentence and intent types.", "key_phrase": "new messages", "slot_type": "('content_exact', 'new messages')", "pred_lf": "[IN:GET_MESSAGE [SL:CONTENT_EXACT new messages ] ]", "gold_lf": "[IN:GET_MESSAGE ]"}
{"utterance": "Remind me to take dinner to Lori on Friday.", "intent": "create_reminder, update_reminder, delete_reminder\nNumeric confidence scores: 0.9, 0.8, 0.7", "AMR Graph": "(purpose\n  :action create_reminder\n  :remind\n    (event\n      :description \"take dinner to Lori\"\n      :date Friday))", "key_phrase": "Remind me, take dinner, Lori, Friday", "slot_type": "('method_retrieval_reminder', 'Remind me'), ('recipes_meal', 'dinner'), ('recipient', 'Lori'), ('date_time', 'Friday')", "pred_lf": "[IN:CREATE_REMINDER [SL:METHODOF_RETRIEVAL_REMINDER Remind me ] [SL:RECIPES_MEAL dinner ] [SL:RECIPIENT Lori ] [SL:DATE_TIME Friday ] ]", "gold_lf": "[IN:CREATE_REMINDER [SL:PERSON_REMINDED me ] [SL:TODO take dinner to Lori ] [SL:DATE_TIME on Friday ] ]"}
{"utterance": "Show my spa reminders with my mom next month.", "intent": "get_reminder, get_contact, get_date_time_event  Confidence Scores: 0.9, 0.8, 0.7", "AMR Graph": "(c / remind\n      :event-date-range (d / date-entity\n                            :month (m / month :name \"November\"))\n      :topic (m / my-reminders)\n      :participant (p / person :name \"mom\"))", "key_phrase": "spa reminders, my mom, next month", "slot_type": "('method_retrieval_reminder', 'Show'), ('todo', 'spa reminders'), ('contact', 'my mom'), ('date_time', 'next month')", "pred_lf": "[IN:GET_REMINDER [SL:METHOD_RETRIEVAL_REMINDER Show ] [SL:TODO spa reminders ] [SL:CONTACT my mom ] [SL:DATE_TIME next month ] ]\n[IN:GET_CONTACT [SL:CONTACT my mom ] ]\n[IN:GET_DATE_TIME_EVENT [SL:DATE_TIME next month ] ]", "gold_lf": "[IN:GET_REMINDER [SL:METHOD_RETRIEVAL_REMINDER Show ] [SL:PERSON_REMINDED my ] [SL:TODO spa ] [SL:TODO with my mom ] [SL:DATE_TIME next month ] ]"}
{"utterance": "Michigan crime reports", "intent": "get_details_news, get_location, get_event", "AMR Graph": "(Purposeful-communication \n    :content (find \n                :op1 (Michigan) \n                :op2 (crime-reports)))\n                \nNote: This AMR graph represents the intent of the sentence to obtain information about crime reports in the location of Michigan.", "key_phrase": "Michigan, crime reports", "slot_type": "('location', 'Michigan'),('news_topic', 'crime reports')", "pred_lf": "[IN:GET_DETAILS_NEWS [SL:LOCATION Michigan ] [SL:NEWS_TOPIC crime reports ] ] or [IN:GET_LOCATION [SL:LOCATION Michigan ] ] or [IN:GET_EVENT [SL:LOCATION Michigan ] [SL:EVENT_TOPIC crime reports ] ]", "gold_lf": "[IN:GET_STORIES_NEWS [SL:NEWS_TOPIC Michigan crime ] [SL:NEWS_TYPE reports ] ]"}
{"utterance": "What's the biggest story today?", "intent": "get_details_news, question_news, get_stories_news\nConfidence scores: 0.9, 0.6, 0.5", "AMR Graph": "(s / ask\n      :intent get_details_news\n      :topic (s2 / story\n                 :most ARGMAX\n                 :time (d / today)))", "key_phrase": "biggest story, today", "slot_type": "('news_topic', 'biggest story'),('date_time', 'today')", "pred_lf": "[IN:GET_DETAILS_NEWS [SL:NEWS_TOPIC biggest story ] [SL:DATE_TIME today ] ]", "gold_lf": "[IN:GET_STORIES_NEWS [SL:NEWS_REFERENCE biggest ] [SL:NEWS_TYPE story ] [SL:DATE_TIME today ] ]"}
{"utterance": "please record a video message for Gina and Sparks", "intent": "create_call, send_message, create_reminder\nConfidence scores: 0.8, 0.2, 0.1", "AMR Graph": "(node / please\n      :intent create_call\n      :recipient (person / Gina)\n      :subject (person / Sparks)\n      :action (action / record\n                  :object (video-message)))\n     \nNote: Since the confidence score for create_call is highest, we assume that the intent is to create a call and the AMR graph is generated accordingly, where the subject is the person initiating the call, the recipient is the person receiving the call, and the action is to record a video message during the call.", "key_phrase": "record, video message, Gina, Sparks", "slot_type": "('method_recipes', 'record'), ('type_content', 'video message'), ('recipient', 'Gina'), ('recipient', 'Sparks')", "pred_lf": "[IN:CREATE_CALL [SL:METHOD_RECIPES record ] [SL:TYPE_CONTENT video message ] [SL:RECIPIENT Gina ] [SL:RECIPIENT Sparks ] ]", "gold_lf": "[IN:SEND_MESSAGE [SL:TYPE_CONTENT video ] [SL:RECIPIENT Gina ] [SL:RECIPIENT Sparks ] ]"}
{"utterance": "What is the temperature going to be today?", "intent": "get_weather (0.8), get_temperature (0.6), get_forecast (0.5)", "AMR Graph": "(c / ask-temperature :mode indicative\n      :polarity interrogative\n      :time (t / today))", "key_phrase": "temperature, today", "slot_type": "('weather_attribute', 'temperature'),('date_time', 'today')", "pred_lf": "[IN:GET_WEATHER [SL:WEATHER_ATTRIBUTE temperature ] [SL:DATE_TIME today ] ]", "gold_lf": "[IN:GET_WEATHER [SL:DATE_TIME today ] ]"}
{"utterance": "Do you have any reminders for me?", "intent": "get_reminder, get_message, help_reminder\nConfidence scores: 0.8, 0.15, 0.05", "AMR Graph": "(node / have_reminders\n      :ARG0 (pronoun / you)\n      :mod (quantifier / any)\n      :ARG1 (pronoun / me))", "key_phrase": "reminders, you, me", "slot_type": "('method_retrieval_reminder', 'reminders'),('user_attendee_event', 'you'),('recipient', 'me')", "pred_lf": "[IN:GET_REMINDER [SL:METHOD_RETRIEVAL_REMINDER reminders ] [SL:USER_ATTENDEE_EVENT you ] [SL:RECIPIENT me ] ]", "gold_lf": "[IN:GET_REMINDER [SL:PERSON_REMINDED me ] ]"}
{"utterance": "I have a video message I need sent to my dad.", "intent": "send_message, create_reminder, create_call", "AMR Graph": "(send_message\n      :sender (person :name \"I\")\n      :message (video_message :content \"I need sent to my dad.\")\n      :recipient (person :name \"my dad\"))", "key_phrase": "video message, I, need sent, dad", "slot_type": "('type_content', 'video message'), ('user_attendee_event', 'I'), ('method_retrieval_reminder', 'need sent'), ('recipient', 'dad')", "pred_lf": "[IN:SEND_MESSAGE [SL:TYPE_CONTENT video message ] [SL:USER_ATTENDEE_EVENT I ] [SL:RECIPIENT dad ] ]\nOR \n[IN:CREATE_REMINDER [SL:METHOD_RETRIEVAL_REMINDER need sent ] [SL:USER_ATTENDEE_EVENT I ] [SL:REMINDER_TYPE video message ] [SL:RECIPIENT dad ] ]\nOR \n[IN:CREATE_CALL [SL:USER_ATTENDEE_EVENT I ] [SL:RECIPIENT dad ] ]", "gold_lf": "[IN:SEND_MESSAGE [SL:TYPE_CONTENT video ] [SL:RECIPIENT my dad ] ]"}
{"utterance": "Any celebrity news stories?", "intent": "get_stories_news (0.9), question_news (0.8), get_details_news (0.7)", "AMR Graph": "(Possible AMR Graph)\n\n[ TOP: relation=\"want\"\n      LBL: relation=\"op1\"\n      ARG0: relation=\"you\"\n      ARG1: relation=\"get_stories_news\"\n      score: 0.9\n      ]\n      \n[ TOP: relation=\"question\"\n      ARG0: relation=\"you\"\n      ARG1: relation=\"news\"\n      score: 0.8\n      ]\n      \n[ TOP: relation=\"want\"\n      LBL: relation=\"op1\"\n      ARG0: relation=\"you\"\n      ARG1: relation=\"get_details_news\"\n      score: 0.7\n      ] \n\n(Note: As there are multiple potential intent types, multiple AMRs are provided using different relations)", "key_phrase": "celebrity, news stories", "slot_type": "('news_topic', 'celebrity'), ('news_type', 'news stories')", "pred_lf": "[IN:GET_STORIES_NEWS [SL:NEWS_TOPIC celebrity ] [SL:NEWS_TYPE news stories ] ]", "gold_lf": "[IN:GET_STORIES_NEWS [SL:NEWS_CATEGORY celebrity ] [SL:NEWS_TYPE news stories ] ]"}
{"utterance": "put up my blink timer", "intent": "create_timer, add_time_timer, update_timer (in any order)\nConfidence scores: 0.8, 0.7, 0.6 (in any order)", "AMR Graph": "Textual Neo-Davidsonian format does not exist. Could you provide the intended graph format to proceed with the task?", "key_phrase": "None, as a valid AMR graph format is not provided.", "slot_type": "No key phrases provided.", "pred_lf": "[IN:CREATE_TIMER]\n[IN:ADD_TIME_TIMER]\n[IN:UPDATE_TIMER]", "gold_lf": "[IN:GET_TIMER [SL:TIMER_NAME blink ] [SL:METHOD_TIMER timer ] ]"}
{"utterance": "how do you cook steak in a pan", "intent": "get_info_recipes (0.9), question_food (0.6), get_cooking_method (0.4)", "AMR Graph": "(p / pan\n      :mod (c / cook\n             :arg0 (s / steak)))\n          \n(c / cook-01\n      :arg0 (y / you)\n      :arg1 (s / steak)\n      :manner (f / fry))", "key_phrase": "cook, steak, pan, fry", "slot_type": "('recipes_cooking_method', 'cook'), ('recipes_dish', 'steak'), ('recipes_cooking_method', 'pan'), ('recipes_cooking_method', 'fry')", "pred_lf": "[IN:GET_INFO_RECIPES [SL:RECIPES_COOKING_METHOD cook ] [SL:RECIPES_DISH steak ] [SL:RECIPES_COOKING_METHOD pan ] [SL:RECIPES_COOKING_METHOD fry ] ]", "gold_lf": "[IN:GET_INFO_RECIPES [SL:RECIPES_INCLUDED_INGREDIENT steak ] ]"}
{"utterance": "how long should i cook ribs", "intent": "get_info_recipes (0.80), question_food (0.65), get_ingredients (0.50)", "AMR Graph": "(c / cook\n   :ARG0 (i / i)\n   :ARG1 (r / rib\n          :quant (h / how-long)))", "key_phrase": "cook, ribs, how long", "slot_type": "('recipes_dish', 'ribs'), ('recipes_cooking_method', 'cook'), ('method_timer', 'how long')", "pred_lf": "[IN:GET_INFO_RECIPES [SL:RECIPES_DISH ribs ] [SL:RECIPES_COOKING_METHOD cook ] [SL:METHOD_TIMER how long ] ] or \n[IN:QUESTION_FOOD [SL:RECIPES_DISH ribs ] [SL:RECIPES_COOKING_METHOD cook ] [SL:METHOD_TIMER how long ] ] or \n[IN:GET_INGREDIENTS [SL:RECIPES_DISH ribs ] [SL:RECIPES_COOKING_METHOD cook ] [SL:METHOD_TIMER how long ] ]", "gold_lf": "[IN:GET_INFO_RECIPES [SL:RECIPES_ATTRIBUTE how long ] [SL:RECIPES_INCLUDED_INGREDIENT ribs ] ]"}
{"utterance": "End my call", "intent": "end_call, stop_music, switch_call\nConfidence scores: 0.90, 0.04, 0.03", "AMR Graph": "(:stop (op1 /call))", "key_phrase": "End my call", "slot_type": "('todo', 'End my call')", "pred_lf": "[IN:END_CALL [SL:TODO End my call ] ]", "gold_lf": "[IN:END_CALL ]"}
{"utterance": "Savannah Georgia events for next weekend", "intent": "get_event, get_location, get_date_time_event\nConfidence scores: 0.9, 0.7, 0.6", "AMR Graph": "(get_event\n  :event (and\n            :name \"events\"\n            :location (get_location\n                          :location (location\n                                        :name \"Savannah\"\n                                        :type \"city\"\n                                        :in \"Georgia\")))\n          :date-time (get_date_time_event\n                        :date-time (date-entity\n                                      :weekday \"next\"\n                                      :type \"weekend\"))))", "key_phrase": "Savannah, Georgia, events, next weekend", "slot_type": "('location', 'Savannah'), ('location', 'Georgia'), ('category_event', 'events'), ('date_time', 'next weekend')", "pred_lf": "[IN:GET_EVENT [SL:LOCATION Savannah ] [SL:LOCATION Georgia ] [SL:CATEGORY_EVENT events ] [SL:DATE_TIME next weekend ] ]", "gold_lf": "[IN:GET_EVENT [SL:LOCATION Savannah Georgia ] [SL:DATE_TIME for next weekend ] ]"}
{"utterance": "what's the temperature supposed to be tomorrow?", "intent": "get_weather (0.9), get_temperature (0.8), question_weather (0.7)", "AMR Graph": "(c / request-quantity\n      :quant 1\n      :domain (s / temperature\n                  :location (l / tomorrow)))", "key_phrase": "temperature, tomorrow", "slot_type": "('weather_attribute', 'temperature'),('date_time', 'tomorrow')", "pred_lf": "[IN:GET_WEATHER [SL:WEATHER_ATTRIBUTE temperature ] [SL:DATE_TIME tomorrow ] ]", "gold_lf": "[IN:GET_WEATHER [SL:DATE_TIME tomorrow ] ]"}
{"utterance": "Did someone just graduate from CU Denver?", "intent": "get_education_degree, get_education_time, get_school", "AMR Graph": "(past\n  :event (graduate\n           :agent (someone)\n           :source (school\n                      :name \"CU Denver\")))", "key_phrase": "someone, graduate, CU Denver", "slot_type": "('major', 'someone'), ('O', 'graduate'), ('school', 'CU Denver')", "pred_lf": "[IN:GET_EDUCATION_DEGREE [SL:MAJOR someone ] [SL:O graduate ] [SL:SCHOOL CU Denver ] ]  or \n[IN:GET_EDUCATION_TIME [SL:MAJOR someone ] [SL:O graduate ] [SL:SCHOOL CU Denver ] ] or \n[IN:GET_SCHOOL [SL:MAJOR someone ] [SL:O graduate ] [SL:SCHOOL CU Denver ] ]", "gold_lf": "[IN:GET_CONTACT [SL:SCHOOL CU Denver ] ]"}
{"utterance": "which whole food karen used to work at", "intent": "get_employer, get_info_contact, get_job\nConfidence Scores: 0.7, 0.2, 0.1", "AMR Graph": "(get_employer\n\t  :entity (whole_food\n\t             :name \"Karen's former workplace\"))\n\t \nNote: The confidence scores provided do not affect the resulting AMR graph, as they are not used to generate it.", "key_phrase": "whole food, Karen, former workplace", "slot_type": "('employer', 'whole food'),('contact', 'Karen'),('job', 'former workplace')", "pred_lf": "[IN:GET_EMPLOYER [SL:EMPLOYER whole food ] [SL:CONTACT Karen ] [SL:JOB former workplace ] ]", "gold_lf": "[IN:GET_EMPLOYER [SL:EMPLOYER whole food ] [SL:CONTACT karen ] ]"}
{"utterance": "Healthy dinner recipes", "intent": "get_info_recipes (0.9), prefer (0.05), dislike_music (0.03)", "AMR Graph": "(PREFER\n :ARG1 (GET-INFO-RECIPES\n        :topic \"Healthy dinner recipes\"))", "key_phrase": "Healthy dinner recipes", "slot_type": "('recipes_diet', 'Healthy'),('recipes_meal', 'dinner'),('recipes_type_nutrition', 'recipes')", "pred_lf": "[IN: GET_INFO_RECIPES [SL:RECIPES_DIET Healthy ] [SL:RECIPES_MEAL dinner ] [SL:RECIPES_TYPE_NUTRITION recipes ]]", "gold_lf": "[IN:GET_RECIPES [SL:RECIPES_ATTRIBUTE Healthy ] [SL:RECIPES_MEAL dinner ] ]"}
{"utterance": "Message Jason and ask him to send a photo of his damaged car.", "intent": "send_message (0.7), get_message_contact (0.2), get_info_contact (0.1)", "AMR Graph": "(P / message\n      :recipient (n / name :op \"Jason\")\n      :content (a / ask\n                  :theme (h / him)\n                  :ontology (s / send\n                                :object (p / photo)\n                                :source (h2 / his)\n                                :location (c / car\n                                             :mod (d / damage)))))", "key_phrase": "Jason, message, send, photo, damaged car", "slot_type": "('recipient', 'Jason'),('content_exact', 'message'),('method_recipes', 'send'),('type_content', 'photo'),('content_exact', 'damaged car')", "pred_lf": "[IN:SEND_MESSAGE [SL:RECIPIENT Jason ] [SL:CONTENT_EXACT message ] [SL:METHODOF_RECIPES send ] [SL:TYPE_CONTENT photo ] [SL:CONTENT_EXACT damaged car ] ]", "gold_lf": "[IN:SEND_MESSAGE [SL:RECIPIENT Jason ] [SL:CONTENT_EXACT send a photo of his damaged car ] ]"}
{"utterance": "What temp for the cherry pies", "intent": "get_info_recipes, get_details_news, get_weather\nConfidence scores: 0.85, 0.82, 0.75", "AMR Graph": "(get_info_recipes\n   :recipe (cherry_pies\n             :temperature ?temp))", "key_phrase": "cherry pies, temperature", "slot_type": "('recipes_meal', 'cherry pies'),('weather_temperature_unit', 'temperature')", "pred_lf": "There are multiple potential intents with similar confidence scores and the given slot type and value pair does not uniquely correspond to one intent, therefore the logic form cannot be determined.", "gold_lf": "[IN:GET_INFO_RECIPES [SL:RECIPES_ATTRIBUTE temp ] [SL:RECIPES_DISH cherry pies ] ]"}
{"utterance": "Add more minutes to my timer.", "intent": "add_time_timer, add_to_playlist_music, create_timer (in no particular order)\nConfidence scores: 0.9, 0.5, 0.4 (in no particular order)", "AMR Graph": "(Possible AMR graph for add_time_timer)\n\n(add-event\n   :cause (become (incomplete-entity\n                      :quant 1\n                      :mode duration\n                      :domain (temporal-interval\n                                 :operator add\n                                 :quant 1))))\n   :theme (timer-entity\n             :possessor (i-entity\n                             :quant 1\n                             :possessum (minute-entity\n                                           :quant 1))))\n\nNote: This AMR graph represents the intent of adding more time to an existing timer. The cause of the event is becoming an incomplete-entity with the property of quantity of 1 mode of duration in a domain of a temporal-interval with an operator of add and a quantity of 1. The theme of the event is a timer-entity with a possessor of an i-entity with a quantity of 1 and a possessum of a minute-entity with a quantity of 1.", "key_phrase": "Add more minutes, timer.", "slot_type": "('method_timer', 'Add more minutes'),('todo', 'timer')", "pred_lf": "[IN:ADD_TIME_TIMER [SL:METHOD_TIMER Add more minutes ] [SL:TODO timer ] ]", "gold_lf": "[IN:ADD_TIME_TIMER [SL:DATE_TIME minutes ] [SL:METHOD_TIMER timer ] ]"}
{"utterance": "What is the hottest that it will get all week?", "intent": "get_weather (0.85), \nget_temperature (0.6), \nget_forecast (0.55)", "AMR Graph": "(get_weather \n      :degree (most \n                  :time (week))\n      :topic (it))", "key_phrase": "hottest, all week", "slot_type": "('weather_attribute', 'hottest'), ('date_time', 'all week')", "pred_lf": "[IN:GET_WEATHER [SL:WEATHER_ATTRIBUTE hottest ] [SL:DATE_TIME all week ] ]", "gold_lf": "[IN:GET_WEATHER [SL:WEATHER_ATTRIBUTE hottest ] [SL:DATE_TIME all week ] ]"}
{"utterance": "set alarm for 7:30 am", "intent": "create_alarm, add_time_timer, update_alarm\nNumeric confidence scores: 0.95, 0.85, 0.80", "AMR Graph": "(:event ( :instance-of create_alarm :time ( :time \"7:30am\")) )", "key_phrase": "set alarm, 7:30 am", "slot_type": "('method_timer', 'set alarm'), ('date_time', '7:30 am')", "pred_lf": "[IN:CREATE_ALARM [SL:DATE_TIME 7:30 am ] ]", "gold_lf": "[IN:CREATE_ALARM [SL:DATE_TIME for 7 : 30 am ] ]"}
{"utterance": "How much is it going to rain tomorrow?", "intent": "get_weather (0.95), question_news (0.84), get_location (0.79)", "AMR Graph": "(clear-sent\n        :question \n        (possible-intent \n            :get_weather \n            :get_location) \n        (possible-conf \n            :get_weather 0.95 \n            :question_news 0.84 \n            :get_location 0.79)\n        :time \n        (next \n            :unit-of-time \n            (day))\n        :condition \n        (weather \n            :precipitation \n            (rain))\n        :quant \n        (measurement \n            :quantity \n            (how-much)\n            :unit \n            (none)\n            :topic \n            (it)))", "key_phrase": "rain, tomorrow, how much", "slot_type": "('weather_attribute', 'rain'),('date_time', 'tomorrow'),('amount', 'how much')", "pred_lf": "[IN:GET_WEATHER [SL:WEATHER_ATTRIBUTE rain ] [SL:DATE_TIME tomorrow ] [SL:AMOUNT how much ] ]", "gold_lf": "[IN:GET_WEATHER [SL:WEATHER_ATTRIBUTE rain ] [SL:DATE_TIME tomorrow ] ]"}
{"utterance": "start music on pandora", "intent": "play_music, resume_music, add_to_playlist_music\nNumeric confidence scores: 0.95, 0.92, 0.75", "AMR Graph": "(ADD :Op1 (MUSIC\n           :action (START\n                   :source PANDORA))) [Intent Type: play_music, confidence score: 0.95]", "key_phrase": "start, music, pandora", "slot_type": "('method_music', 'start'),('music_type', 'music'),('music_provider_name', 'pandora')", "pred_lf": "[IN:PLAY_MUSIC [SL:METHOD_MUSIC start ] [SL:MUSIC_TYPE music ] [SL:MUSIC_PROVIDER_NAME pandora ] ]", "gold_lf": "[IN:PLAY_MUSIC [SL:MUSIC_TYPE music ] [SL:MUSIC_PROVIDER_NAME pandora ] ]"}
{"utterance": "when are the next elections", "intent": "get_event, get_date_time_event, get_details_news", "AMR Graph": "(get_event :event (elections :time (next)))", "key_phrase": "next elections", "slot_type": "('title_event', 'next elections')", "pred_lf": "[IN:GET_EVENT [SL:TITLE_EVENT next elections ] ]\nOR\n[IN:GET_DATE_TIME_EVENT [SL:TITLE_EVENT next elections ] ]\nOR\n[IN:GET_DETAILS_NEWS [SL:TITLE_EVENT next elections ] ]", "gold_lf": "[IN:QUESTION_NEWS [SL:NEWS_REFERENCE next ] [SL:NEWS_TOPIC elections ] ]"}
{"utterance": "Find me the latest Linkin Park album", "intent": "get_track_info_music, get_music_album, get_music_info", "AMR Graph": "(get_album :artist \"Linkin Park\"\n           :name (latest :genre \"music\")\n           :requester \"me\")", "key_phrase": "latest, Linkin Park, album", "slot_type": "('music_artist_name', 'Linkin Park'),('music_album_title', 'latest album')", "pred_lf": "[IN:GET_TRACK_INFO_MUSIC [SL:MUSIC_ARTIST_NAME Linkin Park ] [SL:MUSIC_ALBUM_TITLE latest album ] ]\n[IN:GET_MUSIC_ALBUM [SL:MUSIC_ARTIST_NAME Linkin Park ] [SL:MUSIC_ALBUM_TITLE latest album ] ]\n[IN:GET_MUSIC_INFO [SL:MUSIC_ARTIST_NAME Linkin Park ] [SL:MUSIC_ALBUM_TITLE latest album ] ]", "gold_lf": "[IN:PLAY_MUSIC [SL:MUSIC_ARTIST_NAME Linkin Park ] [SL:MUSIC_TYPE album ] ]"}
{"utterance": "Easy salad recipes", "intent": "get_info_recipes (0.9), question_news (0.6), get_details_news (0.5)", "AMR Graph": "(get_info :topic (recipe :food \"salad\" :difficulty \"easy\"))", "key_phrase": "Easy salad, recipes", "slot_type": "('recipes_meal', 'Easy salad'),('recipes_attribute', 'recipes')", "pred_lf": "[IN:GET_INFO_RECIPES [SL:RECIPES_MEAL Easy salad ] [SL:RECIPES_ATTRIBUTE recipes ] ]", "gold_lf": "[IN:GET_RECIPES [SL:RECIPES_ATTRIBUTE Easy ] [SL:RECIPES_DISH salad ] ]"}
{"utterance": "call India Cortez and Vivian Hamilton", "intent": "create_call, make_call, dial_call, 0.75, update_method_call, 0.2, switch_call, 0.15.", "AMR Graph": "(This answer may vary based on the interpretation of the potential intent types, but one possible AMR graph representation is provided below)\n\n# ::snt call India Cortez and Vivian Hamilton\n# ::intent create_call\n\n[create_call-1\n  :object (list\n             :person1 (name :op \"India Cortez\")\n             :person2 (name :op \"Vivian Hamilton\"))\n]", "key_phrase": "India Cortez, Vivian Hamilton, call", "slot_type": "('recipient', 'India Cortez'),('recipient', 'Vivian Hamilton'),('type_contact', 'call')", "pred_lf": "[IN:CREATE_CALL [SL:RECIPIENT India Cortez ] [SL:RECIPIENT Vivian Hamilton ] [SL:TYPE_CONTACT call ] ] or [IN:MAKE_CALL [SL:RECIPIENT India Cortez ] [SL:RECIPIENT Vivian Hamilton ] [SL:TYPE_CONTACT call ] ] or [IN:DIAL_CALL [SL:RECIPIENT India Cortez ] [SL:RECIPIENT Vivian Hamilton ] [SL:TYPE_CONTACT call ] ] or [IN:UPDATE_METHOD_CALL [SL:RECIPIENT India Cortez ] [SL:RECIPIENT Vivian Hamilton ] [SL:TYPE_CONTACT call ] ] or [IN:SWITCH_CALL [SL:RECIPIENT India Cortez ] [SL:RECIPIENT Vivian Hamilton ] [SL:TYPE_CONTACT call ] ] (depending on the specific intent and its corresponding probability)", "gold_lf": "[IN:CREATE_CALL [SL:CONTACT India Cortez ] [SL:CONTACT Vivian Hamilton ] ]"}
{"utterance": "Where does Paula Carlton work?", "intent": "get_employer, get_job, get_details_news\nConfidence scores: 0.9, 0.6, 0.4", "AMR Graph": "(:name (person :op1 \"Paula Carlton\")\n     :place-of-work (company :op1 \"unknown\"))  [get_employer]", "key_phrase": "Paula Carlton, work", "slot_type": "('person_reminded', 'Paula Carlton'),('job', 'work')", "pred_lf": "[IN:GET_EMPLOYER [SL:PERSON_REMINDED Paula Carlton ] [SL:JOB work ] ]", "gold_lf": "[IN:GET_EMPLOYER [SL:CONTACT Paula Carlton ] ]"}
{"utterance": "Will there be a lot of rain this weekend?", "intent": "get_weather,question_news, get_details_news\nNumeric confidence scores: 0.8, 0.75, 0.7", "AMR Graph": "(p / ask\n   :op1 (w / weather\n             :quantifier (l / lot)\n             :time (w2 / weekend)))", "key_phrase": "rain, weekend, lot", "slot_type": "('weather_attribute', 'rain'),('date_time', 'weekend'), ('amount', 'lot')", "pred_lf": "[IN:GET_WEATHER [SL:WEATHER_ATTRIBUTE rain ] [SL:DATE_TIME weekend ] [SL:AMOUNT lot ] ]", "gold_lf": "[IN:GET_WEATHER [SL:WEATHER_ATTRIBUTE rain ] [SL:DATE_TIME this weekend ] ]"}
{"utterance": "set an alarm for one hour", "intent": "create_alarm (0.95), add_time_timer (0.75), create_timer (0.5)", "AMR Graph": "(a / set-01\n      :ARG1 (t / timer\n              :time (i / interval\n                      :unit (s / second\n                              :quant 3600)\n                      :type (s / timer-type :interval))\n              :mode (s / timer-mode :alarm)))", "key_phrase": "set alarm, one hour", "slot_type": "('todo', 'set alarm'), ('method_timer', 'for'), ('date_time', 'one hour')", "pred_lf": "[IN:CREATE_ALARM [SL:TODO set alarm ] [SL:DATE_TIME one hour ] ]", "gold_lf": "[IN:CREATE_ALARM [SL:DATE_TIME for one hour ] ]"}
{"utterance": "Give me news regarding the Senate Russia hearings.", "intent": "get_details_news, question_news, get_event\nConfidence scores: 0.8, 0.7, 0.6 (in any order)", "AMR Graph": "(PRED: give\n    :ARG0 (PRED: I)\n    :ARG1 (PRED: news\n            :mod (PRED: regarding\n                    :ARG1 (PRED: hearings\n                            :mod (PRED: Senate)\n                            :mod (PRED: Russia))))\n    :ARG2 (PRED: details))", "key_phrase": "Senate Russia hearings, news, regarding", "slot_type": "('news_topic', 'Senate Russia hearings'), ('type_content', 'news'), ('attribute_event', 'regarding')", "pred_lf": "[IN:GET_DETAILS_NEWS [SL:NEWS_TOPIC Senate Russia hearings ] [SL:TYPE_CONTENT news ] [SL:ATTRIBUTE_EVENT regarding ] ] or \n[IN:QUESTION_NEWS [SL:NEWS_TOPIC Senate Russia hearings ] [SL:TYPE_CONTENT news ] [SL:ATTRIBUTE_EVENT regarding ] ] or \n[IN:GET_EVENT [SL:NEWS_TOPIC Senate Russia hearings ] [SL:TYPE_CONTENT news ] [SL:ATTRIBUTE_EVENT regarding ] ]", "gold_lf": "[IN:GET_STORIES_NEWS [SL:NEWS_TYPE news ] [SL:NEWS_TOPIC Senate Russia hearings ] ]"}
{"utterance": "Is there lightning reported in the current thunderstorm?", "intent": "get_weather, get_airquality", "AMR Graph": "(c / have-attribute\n      :polarity \"positive\"\n      :attribute (l / lightning\n              :location (t / thunderstorm\n                          :time (c2 / current)))))\nExplanation: The graph represents the intent of getting information about the weather, specifically if there is lightning reported in the current thunderstorm. The root node \"have-attribute\" represents the question asking if the attribute is present or not. The attribute is represented by the \"lightning\" node and the location is represented by the \"thunderstorm\" node, which in turn has a time attribute represented by \"current\". The polarity attribute is set as \"positive\" as it is asking if the attribute is present.", "key_phrase": "lightning, reported, current, thunderstorm", "slot_type": "('weather_attribute', 'lightning'),('content_exact', 'reported'),('location', 'current'),('weather_attribute', 'thunderstorm')", "pred_lf": "[IN:GET_WEATHER_GET_AIRQUALITY [SL:WEATHER_ATTRIBUTE lightning ] [SL:CONTENT_EXACT reported ] [SL:LOCATION current ] [SL:WEATHER_ATTRIBUTE thunderstorm ] ]", "gold_lf": "[IN:GET_WEATHER [SL:WEATHER_ATTRIBUTE lightning ] [SL:WEATHER_ATTRIBUTE thunderstorm ] ]"}
{"utterance": "Ask Ryan if he wants to go to an FSU football game this fall.", "intent": "get_attendee_event, get_event, create_call", "AMR Graph": "(Purpose \n  :op1 (inquire \n         :person (person-name :name \"Ryan\"))\n  :op2 (make-plan \n         :event (event-name :name \"FSU football game this fall\")\n         :invited (person-name :name \"Ryan\")))", "key_phrase": "Ryan, FSU football game, this fall", "slot_type": "('attendee', 'Ryan'),('title_event', 'FSU football game'),('date_time', 'this fall')", "pred_lf": "[IN:GET_ATTENDEE_EVENT \n[SL:ATTENDEE Ryan ] \n[SL:TITLE_EVENT FSU football game ] \n[SL:DATE_TIME this fall ] \n]", "gold_lf": "[IN:SEND_MESSAGE [SL:RECIPIENT Ryan ] [SL:CONTENT_EXACT he wants to go to an FSU football game this fall ] ]"}
{"utterance": "Cancel my reminder for juice.", "intent": "delete_reminder, cancel_message, update_reminder (0.8, 0.1, 0.1)", "AMR Graph": "(purpose \n   :mod (cancel_message)\n   :topic (reminder \n            :content \"juice\"\n            :status (active)))\nNote: The intent type \"cancel_message\" was chosen as it is the most semantically accurate representation of the sentence. The others were included for completeness.", "key_phrase": "Cancel my reminder, juice.", "slot_type": "('method_retrieval_reminder', 'Cancel my reminder'), ('recipes_included_ingredient', 'juice')", "pred_lf": "[IN:DELETE_REMINDER [SL:METHOD_RETRIEVAL_REMINDER Cancel my reminder ] [SL:RECIPES_INCLUDED_INGREDIENT juice ] ]", "gold_lf": "[IN:DELETE_REMINDER [SL:PERSON_REMINDED my ] [SL:TODO juice ] ]"}
{"utterance": "how to make pancakes from scratch", "intent": "get_info_recipes (0.95), play_music (0.03), question_music (0.02)", "AMR Graph": "(d / recipe-ingredient\n      :name (m / make-01\n             :patient (p / pancake)\n             :condition (s / scratch)))", "key_phrase": "pancakes, from scratch, make", "slot_type": "('recipes_dish', 'pancakes'),('recipes_cooking_method', 'from scratch'),('method_recipes', 'make')", "pred_lf": "[IN:GET_INFO_RECIPES [SL:RECIPES_DISH pancakes ] [SL:RECIPES_COOKING_METHOD from scratch ] [SL:METHOD_RECIPES make ] ]", "gold_lf": "[IN:GET_RECIPES [SL:RECIPES_DISH pancakes ] [SL:RECIPES_COOKING_METHOD from scratch ] ]"}
{"utterance": "delete the wedding reminder for sunday", "intent": "delete_reminder, update_reminder_date_time, get_reminder", "AMR Graph": "(PERSON :person (DELETE :action (REMINDER :reminder (DATE-TIME :date \"Sunday\"))))", "key_phrase": "wedding reminder, Sunday, delete", "slot_type": "('title_event', 'wedding reminder'),('date_time', 'Sunday'),('method_retrieval_reminder', 'delete')", "pred_lf": "[IN:DELETE_REMINDER [SL:TITLE_EVENT wedding reminder ] [SL:DATE_TIME Sunday ] [SL:METHOD_RETRIEVAL_REMINDER delete ] ]", "gold_lf": "[IN:DELETE_REMINDER [SL:TODO wedding ] [SL:DATE_TIME for sunday ] ]"}
{"utterance": "show me who is available please", "intent": "get_availability, get_group, get_info_contact\nConfidence scores: 0.45, 0.3, 0.25", "AMR Graph": "(PLEASE :topic (SHOW :purpose GET :object (AVAILABILITY :subject (WHO :ROLE-1 AGENT) :ROLE-2 (IS :ROLE-1 PATIENT))))", "key_phrase": "show me, available, who, please", "slot_type": "('type_content', 'show me'),('attribute_event', 'available'),('type_contact', 'who'),('content_exact', 'please')", "pred_lf": "[IN:GET_AVAILABILITY [SL:TYPE_CONTENT show me ] [SL:ATTRIBUTE_EVENT available ] [SL:TYPE_CONTACT who ] [SL:CONTENT_EXACT please ] ]", "gold_lf": "[IN:GET_AVAILABILITY ]"}
{"utterance": "Turn on the radio please", "intent": "play_music,play_media,set_available", "AMR Graph": "(n / turn-on\n     :action (a / activate\n                 :instrument (r / radio))\n     :degree please)", "key_phrase": "Turn on, radio, please", "slot_type": "('music_type', 'radio'),('method_timer', 'Turn on'),('content_exact', 'please')", "pred_lf": "[IN:PLAY_MUSIC [SL:MUSIC_TYPE radio ] [SL:METHOD_TIMER Turn on ] [SL:CONTENT_EXACT please ] ] OR [IN:PLAY_MEDIA [SL:MUSIC_TYPE radio ] [SL:METHOD_TIMER Turn on ] [SL:CONTENT_EXACT please ] ] OR [IN:SET_AVAILABLE [SL:MUSIC_TYPE radio ] [SL:METHOD_TIMER Turn on ] [SL:CONTENT_EXACT please ] ]", "gold_lf": "[IN:PLAY_MUSIC [SL:MUSIC_TYPE radio ] ]"}
{"utterance": "let's start recording a video message for Nobuko Falconeri", "intent": "create_call,send_message,get_message", "AMR Graph": "(Note: There are multiple ways to represent the same sentence, but this is one possible AMR graph.)\n\n      (s / start-01\n         :ARG0 (p / person :named \"I\")\n         :ARG1 (r / record-01\n                  :ARG0 p\n                  :ARG1 (v / video-message\n                          :topic (p2 / person :named \"Nobuko Falconeri\"))))", "key_phrase": "start recording, video message, Nobuko Falconeri", "slot_type": "('method_recipes', \"let's\"), ('method_recording', 'recording'), ('type_content', 'video message'), ('recipient', 'Nobuko Falconeri')", "pred_lf": "[IN:CREATE_CALL [SL:METH_RECIPES let's ] [SL:RECIP_METHOD recording ] [SL:TYPE_CONTENT video message ] [SL:RECIPIENT Nobuko Falconeri ] ]\nOR \n[IN:SEND_MESSAGE [SL:METH_RECIPES let's ] [SL:RECIP_METHOD recording ] [SL:TYPE_CONTENT video message ] [SL:RECIPIENT Nobuko Falconeri ] ]\nOR \n[IN:GET_MESSAGE [SL:METH_RECIPES let's ] [SL:RECIP_METHOD recording ] [SL:TYPE_CONTENT video message ] [SL:RECIPIENT Nobuko Falconeri ] ]", "gold_lf": "[IN:SEND_MESSAGE [SL:TYPE_CONTENT video ] [SL:RECIPIENT Nobuko Falconeri ] ]"}
{"utterance": "Play Eminem's newest hit", "intent": "play_music (0.8), add_to_playlist_music (0.1), question_music (0.05)", "AMR Graph": "(c / play \n     :polarity +\n     :ARG1 (s / song\n              :name \"Eminem's newest hit\"))", "key_phrase": "Eminem's newest hit", "slot_type": "('music_artist_name', 'Eminem'),('music_track_title', \"newest hit\")", "pred_lf": "[IN:PLAY_MUSIC [SL:MUSIC_ARTIST_NAME Eminem ] [SL:MUSIC_TRACK_TITLE newest hit ] ]", "gold_lf": "[IN:PLAY_MUSIC [SL:MUSIC_ARTIST_NAME Eminem ] [SL:MUSIC_TYPE hit ] ]"}
{"utterance": "Message Riley to say I am going to be late", "intent": "send_message (0.95), update_method_call (0.3), create_reminder (0.25)", "AMR Graph": "(send_message\n    :recipient (person :name \"Riley\")\n    :message \"I am going to be late\")", "key_phrase": "Riley, message, going to be late", "slot_type": "('recipient', 'Riley'), ('content_exact', 'message'), ('content_exact', 'going to be late')", "pred_lf": "[IN:SEND_MESSAGE [SL:RECIPIENT Riley ] [SL:CONTENT_EXACT message ] [SL:CONTENT_EXACT going to be late ] ]", "gold_lf": "[IN:SEND_MESSAGE [SL:RECIPIENT Riley ] [SL:CONTENT_EXACT I am going to be late ] ]"}
{"utterance": "What's happening in Dallas", "intent": "get_event, question_news, get_details_news", "AMR Graph": "(Possible graph for all potential intent types)\n\n[:event\n   :location (Dallas)\n   :type (happening)\n]", "key_phrase": "happening, Dallas", "slot_type": "('attribute_event', \"What's happening\"),('location', 'Dallas')", "pred_lf": "[IN:GET_EVENT [SL:ATTRIBUTE_EVENT What's happening ] [SL:LOCATION Dallas ] ]\nor\n[IN:QUESTION_NEWS [SL:LOCATION Dallas ] ]\nor\n[IN:GET_DETAILS_NEWS [SL:LOCATION Dallas ] ]", "gold_lf": "[IN:GET_EVENT [SL:LOCATION Dallas ] ]"}
{"utterance": "Update reminder for today's staff meeting from 1 pm to 2 pm.", "intent": "update_reminder, update_reminder_date_time, create_reminder\nConfidence scores: 0.8, 0.7, 0.6", "AMR Graph": "(purpose\n      :action (update-reminder\n                  :event (meeting\n                             :date today\n                             :time (interval\n                                       :start-time 1pm\n                                       :end-time 2pm))))", "key_phrase": "reminder, staff meeting, today, 1 pm, 2 pm, update", "slot_type": "('method_retrieval_reminder', 'update'), ('title_event', 'staff meeting'), ('date_time', \"today's\"), ('date_time', '1 pm'), ('date_time', '2 pm')", "pred_lf": "[IN:UPDATE_REMINDER [SL:METHOD_RETRIEVAL_REMINDER update ] [SL:TITLE_EVENT staff meeting ] [SL:DATE_TIME today's ] [SL:DATE_TIME 1 pm ] [SL:DATE_TIME 2 pm ] ]", "gold_lf": "[IN:UPDATE_REMINDER_DATE_TIME [SL:TODO today 's staff meeting ] [SL:DATE_TIME 1 pm ] [SL:DATE_TIME 2 pm ] ]"}
{"utterance": "Remind me to get tacos for dinner", "intent": "create_reminder,update_reminder,create_timer", "AMR Graph": "(d / do\n     :action create_reminder\n     :object (t / tacos)\n     :time (d2 / dinner))", "key_phrase": "Remind me, tacos, dinner", "slot_type": "('method_retrieval_reminder', 'Remind me'), ('recipes_dish', 'tacos'), ('recipes_meal', 'dinner')", "pred_lf": "[IN:CREATE_REMINDER [SL:METHOD_RETRIEVAL_REMINDER Remind me ] [SL:RECIPES_DISH tacos ] [SL:RECIPES_MEAL dinner ] ]", "gold_lf": "[IN:CREATE_REMINDER [SL:PERSON_REMINDED me ] [SL:TODO get tacos for dinner ] ]"}
{"utterance": "Start the timer at 8:30", "intent": "add_time_timer (0.80), create_timer (0.15), update_timer (0.05)", "AMR Graph": "(Predicted AMR graph for add_time_timer intent)\n[event\n    :time (time-of-day :hour 8 :minute 30)\n    :task (timer :action start)]", "key_phrase": "Start the timer, 8:30.", "slot_type": "('method_timer', 'Start the timer'), ('date_time', '8:30')", "pred_lf": "[IN:ADD_TIME_TIMER [SL:METHOD_TIMER Start the timer ] [SL:DATE_TIME 8:30 ] ]", "gold_lf": "[IN:CREATE_TIMER [SL:METHOD_TIMER timer ] [SL:DATE_TIME at 8 : 30 ] ]"}
{"utterance": "How many calories are in a Big Mac from McDonald's", "intent": "get_info_recipes, question_food, get_nutrition", "AMR Graph": "(:amr-unknown :domain (calories)\n              :mode interrogative\n              :polarity positive\n              :arg0 (food :name (Big-Mac :wiki \"Big_Mac\"))\n              :arg1 (restaurant :name (McDonald-s :wiki \"McDonald-s\"))\n              :topic (calories))", "key_phrase": "calories, Big Mac, McDonald's", "slot_type": "('recipes_attribute', 'calories'), ('recipes_dish', 'Big Mac'), ('recipes_source', \"McDonald's\")", "pred_lf": "[IN:GET_INFO_RECIPES [SL:RECIPES_ATTRIBUTE calories ] [SL:RECIPES_DISH Big Mac ] [SL:RECIPES_SOURCE McDonald's ] ]\n[IN:QUESTION_FOOD [SL:FOOD_ITEM Big Mac ] ]\n[IN:GET_NUTRITION [SL:NUTRIENT_TYPE calories ] [SL:FOOD_ITEM Big Mac ] [SL:RESTAURANT McDonald's ] ]", "gold_lf": "[IN:GET_INFO_RECIPES [SL:RECIPES_UNIT_NUTRITION calories ] [SL:RECIPES_DISH Big Mac ] ]"}
{"utterance": "What is the correct temperature for medium rare steak", "intent": "get_info_recipes (0.9), question_food (0.8), get_cooking_temperature (0.7)", "AMR Graph": "(c / correct-01\n      :polarity +\n      :topic (s / steak\n            :mod (m / medium-rare))\n      :purpose (i / instruct-01\n            :topic s\n            :time (n / now))\n      :quant (t / temperature\n            :mod c))", "key_phrase": "correct temperature, medium rare steak, cooking temperature", "slot_type": "('recipes_attribute', 'correct temperature'), ('recipes_attribute', 'medium rare steak'), ('recipes_cooking_method', 'cooking temperature')", "pred_lf": "[IN:GET_INFO_RECIPES [SL:RECIPES_ATTRIBUTE correct temperature ] [SL:RECIPES_ATTRIBUTE medium rare steak ] [SL:RECIPES_COOKING_METHOD cooking temperature ] ]", "gold_lf": "[IN:GET_INFO_RECIPES [SL:RECIPES_ATTRIBUTE temperature ] [SL:RECIPES_ATTRIBUTE medium rare ] [SL:RECIPES_DISH steak ] ]"}
{"utterance": "where does ali live?", "intent": "get_location, get_info_contact, get_group\nConfidence scores: 0.7, 0.2, 0.1", "AMR Graph": "(node / have\n      :ARG0 (node / what)\n      :ARG1 (node / ingredients)\n      :ARG2 (node / left))\n\nIntent Type: get_message \n\nExplanation: The sentence is a question asking about the ingredients that are still available. The intent is to get a message or information about what ingredients are remaining. \n\n(node / live-01\n      :ARG0 (node / ali))\n\nIntent Type: get_location\n\nExplanation: The sentence is a question asking about the location of Ali. The intent is to get the location information of Ali. \n\n(node / live-01\n      :ARG0 (node / ali))\n\nIntent Type: get_info_contact\n\nExplanation: The sentence is a question asking about Ali's residence, which falls under contact information. The intent is to get information about Ali's contact details. \n\n(node / where\n      :ARG0 (node / ali)\n      :ARG1 (node / live-01))\n\nIntent Type: get_group\n\nExplanation: The sentence is a question asking about where Ali lives and who else lives there. The intent is to get information about a group or community Ali is living with.", "key_phrase": "Ali, live, location, contact details, residence, community", "slot_type": "('location', 'Ali'),('type_content', 'live'),('type_content', 'residence'),('location', 'location'),('contact_related', 'contact details'),('group', 'community')", "pred_lf": "[IN:GET_LOCATION [SL:LOCATION Ali ] [SL:TYPE_CONTENT live ] ]", "gold_lf": "[IN:GET_LOCATION [SL:CONTACT ali ] ]"}
{"utterance": "make a call to Xander Brown's mom", "intent": "create_call, get_contact, update_call", "AMR Graph": "(PERSON :name \"Xander Brown's mom\")\n(CALL :action make :to PERSON :name \"Xander Brown's mom\")", "key_phrase": "make a call, Xander Brown's mom", "slot_type": "('contact', 'Xander Brown\\'s mom')", "pred_lf": "[IN:CREATE_CALL [SL:CONTACT Xander Brown's mom ] ] or \n[IN:GET_CONTACT [SL:CONTACT Xander Brown's mom ] ] or \n[IN:UPDATE_CALL [SL:CONTACT Xander Brown's mom ] ] (The intent type can depend on the specific goal of the user. If the user wants to make a call to Xander Brown's mom, the intent is CREATE_CALL. If the user wants to check if Xander Brown's mom is available or to get her contact information, the intent is GET_CONTACT. If the user wants to update the call with Xander Brown's mom, the intent is UPDATE_CALL.)", "gold_lf": "[IN:CREATE_CALL [SL:CONTACT Xander Brown 's mom ] ]"}
{"utterance": "remind me about dinner tonight at 5", "intent": "create_reminder,update_reminder_date_time,update_reminder_todo\nNumeric confidence scores: 0.91,0.72,0.55", "AMR Graph": "(purpose\n  :op1 (remind\n         :recipient (person :name \"me\")\n         :topic (dinner)\n         :time (time :day (today)\n                     :clock (time-posit :value 5 :unit \"hour\"))\n         :status (scheduled)))", "key_phrase": "remind, dinner, tonight, 5", "slot_type": "('method_recipes', 'remind'),('recipes_meal', 'dinner'),('date_time', 'tonight at 5')", "pred_lf": "[IN:CREATE_REMINDER [SL:TODO dinner ] [SL:DATE_TIME tonight at 5 ] ]", "gold_lf": "[IN:CREATE_REMINDER [SL:PERSON_REMINDED me ] [SL:TODO dinner ] [SL:DATE_TIME tonight at 5 ] ]"}
{"utterance": "Find me a recipe for curry chicken", "intent": "get_info_recipes (0.80), prefer (0.10), dislike_music (0.09)", "AMR Graph": "(c / find\n      :ARG1 (m / me)\n      :ARG2 (r / recipe\n            :name (n / name :op \"curry chicken\")))", "key_phrase": "recipe, curry chicken", "slot_type": "('recipes_meal', 'curry chicken'), ('recipes_dish', 'recipe')", "pred_lf": "[IN:GET_INFO_RECIPES [SL:RECIPES_MEAL curry chicken ] [SL:RECIPES_DISH recipe ]]", "gold_lf": "[IN:GET_RECIPES [SL:RECIPES_DISH curry chicken ] ]"}
{"utterance": "theater events in los angeles this week", "intent": "get_event, get_location, get_date_time_event\nConfidence scores: 0.8, 0.7, 0.5", "AMR Graph": "(p / get_event\n  :location (l / location\n              :name \"los angeles\")\n  :date-time (dt / date-time\n               :operator \"this_week\")\n  :event-type (e / event\n               :type \"theater\"))", "key_phrase": "theater events, los angeles, this week", "slot_type": "('category_event', 'theater events'),('location', 'los angeles'),('date_time', 'this week')", "pred_lf": "[IN:GET_EVENT [SL:CATEGORY_EVENT theater events ] [SL:LOCATION los angeles ] [SL:DATE_TIME this week ] ]", "gold_lf": "[IN:GET_EVENT [SL:CATEGORY_EVENT theater ] [SL:LOCATION los angeles ] [SL:DATE_TIME this week ] ]"}
{"utterance": "What do I need to make a chicken noodle soup", "intent": "get_info_recipes, get_details_news, get_ingredients", "AMR Graph": "(c / need-01\n   :arg0 (i / I)\n   :arg1 (m / make\n        :arg0 (s / soup\n                :mod (c2 / chicken)\n                :mod (n / noodle))))\n   \nNote: This representation assumes the intent is to get information about the recipe and its necessary ingredients.", "key_phrase": "chicken noodle soup, necessary ingredients", "slot_type": "('recipes_dish', 'chicken noodle soup'),('recipes_attribute', 'necessary ingredients')", "pred_lf": "[IN:GET_INFO_RECIPES [SL:RECIPES_DISH chicken noodle soup ] [SL:RECIPES_ATTRIBUTE necessary ingredients ] ]", "gold_lf": "[IN:GET_INFO_RECIPES [SL:RECIPES_DISH chicken noodle soup ] ]"}
{"utterance": "What is the temperature in London?", "intent": "get_weather (0.9), get_location (0.8), question_news (0.7)", "AMR Graph": "(get_weather :city \"London\")", "key_phrase": "temperature, London", "slot_type": "('weather_attribute', 'temperature'), ('location', 'London')", "pred_lf": "[IN:GET_WEATHER [SL:WEATHER_ATTRIBUTE temperature ] [SL:LOCATION London ] ]", "gold_lf": "[IN:GET_WEATHER [SL:LOCATION London ] ]"}
{"utterance": "Play a bunch of songs from musicals, please.", "intent": "play_music, add_to_playlist_music, get_track_info_music", "AMR Graph": "(d / do-2 \n      :intent play_music \n      :playlist \n        (p / playlist \n          :songs \n            (s / sequence \n              :first \n                (a / bunch \n                  :of \n                  (s2 / song \n                    :genre musicals)))\n          :operation add))", "key_phrase": "musicals, play a bunch of songs.", "slot_type": "('music_genre', 'musicals'),('music_type', 'songs'),('method_recipes', 'Play')", "pred_lf": "[IN:PLAY_MUSIC [SL:MUSIC_GENRE musicals ] [SL:MUSIC_TYPE songs ] [SL:METHOD_RECIPES Play ] ]\n[IN:ADD_TO_PLAYLIST_MUSIC [SL:MUSIC_GENRE musicals ] [SL:MUSIC_TYPE songs ] [SL:METHOD_RECIPES Play ] ]\n[IN:GET_TRACK_INFO_MUSIC [SL:MUSIC_GENRE musicals ] [SL:MUSIC_TYPE songs ] [SL:METHOD_RECIPES Play ] ]", "gold_lf": "[IN:PLAY_MUSIC [SL:MUSIC_TYPE songs ] ]"}
{"utterance": "Have Janie and Kyle Coleman messaged me today", "intent": "get_message (0.9), get_message_contact (0.7), get_contact (0.6)", "AMR Graph": "(PERSON :name (name \"Janie\")\n        :name (name \"Kyle Coleman\"))\n    (MESSAGE :sender (PERSON :name (name \"Janie\")\n                              :name (name \"Kyle Coleman\"))\n             :recipient (PERSON :pronoun \"me\")\n             :time \"today\")", "key_phrase": "Janie, Kyle Coleman, message, me, today", "slot_type": "('attendee', 'Janie'), ('attendee', 'Kyle Coleman'), ('type_content', 'message'), ('user_attendee_event', 'me'), ('date_time', 'today')", "pred_lf": "[IN:GET_MESSAGE [SL:ATTENDEE Janie ] [SL:ATTENDEE Kyle Coleman ] [SL:TYPE_CONTENT message ] [SL:USER_ATTENDEE_EVENT me ] [SL:DATE_TIME today ] ]", "gold_lf": "[IN:GET_MESSAGE [SL:SENDER Janie ] [SL:SENDER Kyle Coleman ] [SL:RECIPIENT me ] [SL:DATE_TIME today ] ]"}
